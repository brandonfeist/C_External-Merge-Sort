 A survey of algorithms in FCIM 
   
Maryam Shekofteh 
Islamic Azad University, Sarvestan Branch 
Shiraz,Iran 
maryam_shekofteh@yahoo.com 
 
 
Abstract- Frequent closed itemsets (FCI) is a condensed 
representation method for frequent item-sets. FCI reduces the 
redundant rules and increases the performance of mining. In 
recent years, a large number of algorithms have been 
proposed about frequent closed itemsets mining due to 
the importance of them  In this paper, we generally review 
and compare the most important FCI algorithms with each 
other. Results show that each algorithm based on its applied 
strategy has some advantages and disadvantages for mining in 
dense and sparse datasets. However, DCI-Closed algorithm is 
more effective than other ones.  
Keywords-Association rule mining; frequent closed 
itemset 
I. Introduction 
Association rule mining (ARM) is one of the most 
important data mining techniques. ARM aims at 
extraction, hidden relation, and interesting associations 
between the existing items in a transactional database. 
The main step in association rule mining is the mining 
frequent itemsets, and time cost in ARM is due to this 
step.  
Frequent itemsets mining often generates a very 
large number of frequent itemsets and rules. As such, it 
not only reduces the efficiency, but also decreases the 
power of mining. To overcome the problem, in recent 
years condensed representation has been used for 
frequent itemsets. A popular condensed representation 
method is using to frequent closed itemsets in which 
instead of mining all frequent itemsets, only association 
mining is required to mine the closed  frequent itemsets 
and their association rules. Compared with frequent 
itemsets, the frequent closed itemsets is a much more 
limited set but with similar power. In addition, it 
decreases redundant rules and increases mining 
efficiency. 
In recent years, a large number of algorithms have 
been proposed about frequent closed itemsets mining 
due to the importance of them. Here, some of them are 
introduced and compared.                                             
This article is structured as follows; frequent closed 
itemsets and relevant topics are introduced in section 2  
. Section 3 deals with the most important algorithms of 
frequent closed itemsets mining. Different 
classifications and algorithm comparison are sketched 
in section 4. Section 5 evaluates the experimental and 
section 6 concludes on the results. 
II. Problem Development  
Let D be a transactional database. Each 
transactional database includes a set of transactions. 
Each transaction t is represented by <TID, x> in which 
x is a set of items and TID is the unique identifier of 
transaction. Further, let us consider I = {i1, i2, …, in} as 
the complete set of distinct items in D. Each non- empty 
subset y of I is termed an itemset, and if includes k 
items, it would be called k-itemset. The number of 
transactions existing in D including itemset y, is called 
the support of itemset y, denoted as sup(y) and it is 
usually represented in percentage. Given a minimum 
support, min-sup, an itemset y is frequent itemset, if 
sup(y) ? min-sup. 
Definition1- Closed Itemset: An itemset y is a 
closed itemset if there is not any superset of y like y'  
that sup(y) = sup(y'). 
The precise definition of closed itemset, however, is 
based on Relations (1) and (2). Let us consider T, y and 
then respectively IyDT ?? ,  are subset of all items 
and transactions appeared in D. Then functions f and g 
are defined based on Relations (1) and (2). 
},|{)( tiTtIiTf ????=  (1) 
},|{)( tiyiDtyg ????=  (2) 
 
Considering these two functions, an itemset y is a 
closed itemset, if and only if Relation (3) is held. 
 
h(y )= f(g(y)) = fog(y )= y  (3) 
 
The combinational function h = fog is called closure 
operator. If a closed itemset is frequent, it is called 
frequent closed itemset.  
Definition 2- Generator: An itemset p is a generator 
of a closed itemset y if p is one of the itemsets (there 
may be more than one) that determines y using Galois 
closure operator: h(p) = y.  
2010 International Conference on Data Storage and Data Engineering
978-0-7695-3958-4/10 $26.00 © 2010 IEEE
DOI 10.1109/DSDE.2010.32
29
 III. Main algorithms in frequent closed itemsets 
mining 
The frequent closed itemsets mining algorithms can 
be put in two classes. The first class follows the breath-
first-search method, while the second class employs the 
depth-first-search method.  
A. First Class Algorithms 
1)   A-Closed Algorithm: A-close algorithm is a 
basic algorithm in frequent closed itemsets mining 
which is based on Apriori algorithm[1] in frequent item 
mining. A-close operation is performed in the following 
two general steps: Producing frequent generators and 
achieving closure of frequent generators. For A-close 
algorithm, an itemset p is generator of closed itemset y, 
if p is one of smallest itemsets (it may be more than 
one), and it determines y with Galois closure operator 
h(p)=y  [5].       
To produce generators, a level-wise approach, 
similar to that of Apriori algorithm is taken. Then three 
steps of pruning are conducted on candidate generators, 
and useless generators are pruned thereby[5]. The 
operation of generator production is repeated until no 
other generator is produced.         
After producing generators G1 to Gn (n is maximum 
generator size), closure of all these frequent generators 
should be computed. The closure of all frequent 
generators results in all closed frequent itemsets. The 
method for computing closure is based on proposition 1  
    Proposition1.  The closure of generator p which is 
achieved by applying function h from Relation (3) on p, 
is intersection of all database transactions that include p  
A-close algorithm uses breath-first-search strategy 
for mining operation, and itemset lattice is analyzed in a 
bottom-up way. Its weak point is the great number of  
candid items and passes from dataset, leading to much 
time and memory in large datasets. 
B. Second Class Algorithms 
These algorithms are totally different from those of 
first class. Due to depth traversal of itemset lattice, here 
there is no need to pass from dataset in each level, and 
the count of passes is usually one or two. Next, the 
dataset is changed to a tree-like structure, and mining is 
performed on it.  
 
1) Charm Algorithm: Charm algorithm is different 
from other coexisting algorithms [9]. In this algorithm, 
a vertical format is used for data. The vertical format 
includes a list of items that for each item a list of 
transactions in which the item is occurred is stored. This 
list reminds the function g in relation (2). All algorithms 
presented until that time and most algorithms after 
Charm use horizontal format for working with data. The 
horizontal dataset includes a list of transactions and 
each transaction has a list of transaction items.     
Unlike all former association mining algorithms that 
mined only itemsets space, Charm performs mining in 
both spaces of items and transactions simultaneously.  
Charm algorithm starts to build a lattices with the 
existing data available in dataset. It centers around the 
idea that each node in the lattice should be processed so 
that all its children are frequent. All infrequent ones and 
non-closed branches are pruned. The children of each 
node are created by combination of one node with its 
siblings that are located in the next branches. If one 
sibling is pruned due to being infrequent or non-closed, 
it can be ignored. While usually a lexicographic order is 
considered for branching, it is shown that branching 
based on support ascending order increases the 
performance of Charm algorithm.         
The lattice formation in Charms involves 
considering one branch and node for all single itemsets 
like x, and labeling it as  x×g(x) (g indicates function in 
relation2). Then, for combining two pairs such as   
x1×g1   and its sibling  x2×g2  four conditions is 
considered[9]. Therefore, all frequent closed itemsets 
are mined.   
2) closet Algorithm: The format and framework of 
Closet is based on FP-growth [3] algorithm in frequent 
itemsets mining [6]. The method used in this algorithm 
is depth-first-search, and it uses FP-tree[3] structure, 
and narrows the mining from dataset to FP-tree mining. 
The Closet operation is conducted in three steps: 
a) Finding frequent items: In first step, like all 
algorithms the goal is searching frequent single items. 
Therefore, a set of frequent single items and the support 
number related to support descending order is put in a 
list called f-list.  
b)  Partitioning the search space and forming 
conditional database: Like FP-growth algorithm whose 
search for frequent items is partitioned to n sub-problem 
(n represents frequent single items), here the space 
partitioning and formation of conditional database is 
performed based [6] . The process of partitioning can be 
recursive, and each sub-set or sub-problem for frequent 
closed itemsets can be partitioned further when 
necessary.  
c) Identify the frequent closed itemsets from 
conditional databases: some lemmas and optimizations 
provides the theoretical foundation that closet can find 
frequent closed itemsets correctly[6]. 
The Close algorithm uses many optimizations for 
saving time and memory. But its main problem like FP-
growth is that it requires a large memory in sparse 
databases, as in such databases FP-tree occupies large 
space due to limited  prefixes. 
30
 3) Closet+ Algorithm: Closet+ was developed 
thanks to the best presented techniques at the time and 
adding some new optimal methods as well [7].                                                                
Closet+ uses the divide-and-conquer method such as 
FP-growth for mining frequent closed itemsets. It 
follows the depth-first-search and it is attested that it is 
more efficient than breadth-first-search in mining 
closed itemsets. This algorithm uses FP-tree as 
compress technique. The calculation of frequent items 
with a specific prefix is done by a hybrid tree-projection 
which enhances the memory. In algorithms such as 
Closet the projection of conditional database in a 
bottom-up manner is used in mining the frequent closed 
itemsets. However, as noted earlier, Closet algorithm 
had drawback in sparse databases as it needed large 
memory. The hybrid tree-projection method creates the 
conditional databases by two ways: bottom-up physical 
tree-projection for dense databases, and top-down 
pseudo tree-projection for sparse databases.The Closet+ 
is the developed version of Closet algorithm aiming at 
solving its problem as far as large memory requirement 
concerned. This algorithm employs the horizontal 
format for recording transactions, and as such, it is 
analyzed along with Charm algorithm as one algorithm 
based on vertical format.                                            
In addition to hybrid tree-projection technique, this 
algorithm uses techniques like item skipping for pruning 
search space and increase of mining speed, and 
techniques of subset-checking which are combination of 
two methods of  Two-level hash-indexed result tree for 
dense databases, and  Pseudo-projection based upward 
checking for sparse databases in order to decrease the 
closure calculation cost.  
Closet+ is generally an appropriate algorithm 
compared with other closed item mining algorithms, 
and it runs with less time and memory due to employed 
optimal techniques. Compared with Closet, it also 
enjoys higher scalability both in database size and the 
count of single items. In sparse databases, however, it 
requires large memory.                                                                                                                    
4) FP-Close Algorithm: In order to conduct mining 
frequent closed itemsets, FP-Close algorithm mines 
frequent item from FP-trees. Then, to determine 
whether the frequent items are closed, it uses frequent 
closed itemsets tree, CFI-tree, which is a type of FP-tree 
[2].   A CF-tree is related to a FP-tree Tx , and it is 
shown as Cx. The tree Cx always stores all found 
frequent closed itemsets which include x itemset. A 
newly found frequent itemset y which includes x should 
be compared with just existing frequent itemsets in  Cx. 
If there is no superset of y in  Cx with similar support, 
then y is closed.     
The main idea in FP-close is using FP-array 
technique. In Closet, Closet+, and FP-Close algorithms, 
when the initial FP-tree is created from original 
database, the most important task is traversing FP-trees 
and creating conditional FP-trees. A number of different 
experiments show that 80% of CPU time is devoted to 
traversal of FP-trees. In FP-close, using FP-array by 
which a corresponding array with FP-tree is created, 
traverse is removed from tree, and computation is 
conducted simply on the corresponding array. Hence, in 
most cases, FP-close has better performance than 
Closet+. When the time consumed for creating 
corresponding array from FP-tree is more than FP-tree 
traversal,  Closet+ performance is better than FP-Close. 
Such case  occurs in databases with numerous items. 
Like Close and Closet+, FP-Close requires large 
memory in sparse databases.    
5) DCI-Closed Algorithm: DCI-Closed is another 
algorithm for mining frequent closed itemsets. This 
algorithm uses a depth-first-search method in search 
space, and uses a vertical format[4].     
Since detecting the duplicate closed items, i.e. items 
that have been formerly generated, is a critical issue in 
increasing the performance in mining the frequent 
closed itemsets, this algorithm suggests a general 
technique for quick detection and removal of duplicate 
closed items. This is an optimal technique from 
memory point of view as unlike formerly discussed 
algorithms, it does not need to keep all closed itemsets 
that have been mined so far. It detects the duplicate 
closed itemsets in another way.        
In this algorithm a term ,i.e. equivalence classes in 
introduced. Two itemsets belong to the same class 
equivalence if and only if they have the same closure. 
Some algorithms such as A-close choose minimum 
elements or key patterns of each equivalence class as 
closure generators. The key patterns form a lattice, and 
this lattice can be easily traversed by a simple algorithm 
like Apriori [1]. But an equivalence class can have more 
than one minimum element, and still leads to similar 
closed itemsets. Other algorithms use another technique 
called closure climbing. Once a generator is 
determined, its closure is calculated. The new 
generators are formed as recently discovered closed 
itemsets supersets. As the closed itemsets are maximal 
elements of their own class, this strategy always 
guarantees to jump from an equivalence class to 
another. However, it does not guarantee that a new 
generator belongs to an equivalence class which has not 
been visited yet.  
Hence, regardless of the strategy adopted, needed to 
use some duplicate checking  technique in order to 
avoid generating multiple times the same closed 
itemsets. It is not favored, like former algorithms, to 
keep all mined closed items in the memory and 
compare them with the new ones, as it requires much 
space and time. DCI-Closed uses a specific check on 
frequent itemsets in the algorithm that is used for 
detecting unique generators of each equivalence class to 
achieve all closed itemsets whose closure minimum is 
31
 required. This algorithm extracts a relation of total 
lexicographic order ?    among all search space 
itemsets and does not calculate closure of generators 
which are not matched with order preserving for 
preventing duplicate closed itemsets. DCI-Closed 
performs mining all frequent closed itemsets by 3 sets 
that name Closed-set, Pre-set, and post-set[4]. 
IV. . Classifying and comparing frequent closed 
itemsets  
A. Classifying different frequent closed itemsets  
As noted in different classes of  frequent closed 
itemsets mining algorithms, they can be categorized as 
following: 
 
1) Type of Search Strategy: In the first 
classification, introduced in section 3, the closed 
itemsets mining algorithms are classified in two classes 
according to their search strategy. The first class use 
breadth-first-search strategy, and the second class 
employ depth-first-search strategy for mining operation. 
The experiments imply that the latter are more 
successful.      
2) Type of  Data Format: The algorithms use two 
vertical and horizontal formats for mining process. 
Generally there is no straightforward position to decide 
which class is better.  
3) Type of Generator Selection: Some algorithms 
choose minimum elements of each equivalence class as 
closure generators. In other algorithms that use closure 
climbing method. Therefore, closed itemsets mining 
algorithms can be divided in two classes; minimum 
elements method, and closure climbing method. 
Algorithms that use of with closure climbing method 
have better performance, as in these algorithms 
generators are recursively formed from closed itemsets, 
and they are probably larger than other class generators 
including minimum elements. A larger generator 
requires less check to determine its closure, and 
therefore algorithms based on closure climbing method 
are more efficient.    
4)  Type of Closure Calculation: Generators' closure 
calculation can be done both on-line and off-line. In the 
former case, the closure is calculated once a frequent 
generator is formed, whereas in the latter closure is 
calculated after all frequent generators are calculated. 
Hence, frequent closed itemsets mining algorithms are 
put in two classes, i.e. "on-line" and "off-line". The 
latter consider minimum elements strategy as the type 
of generator selection, while the former usually use the 
closure climbing method. Therefore, algorithms with 
on-line method are usually more successful than off-
line ones.  Table1 shows the algorithms' classification. 
B. Comparison of frequent Closed Itemsets Mining 
Algorithms 
This section compares introduced algorithms for 
their performance. The first algorithm was A-close. 
Table1. Classification of frequent Closed Itemsets mining Algorithms 
A-close has much considerable time. The main 
reason lies in the fact that it uses breath-first-search 
method in which for each level the database is read. In 
other words, the main problem of A-close is the high 
number of passes of database. Therefore, it requires 
much more time especially when the databases is large 
or min-support is low. Charm is the first algorithm that 
uses vertical format for mining process. It has higher 
performance compared with other previous algorithms. 
Closet is another algorithm for frequent closed itemsets 
mining that employs FP-tree structure to narrow the 
database mining to FP-tree mining. In this algorithm, 
some optimizations are proposed to enhance time and 
memory. Its main drawback, however, is that it requires 
large memory in sparse databases. Comparing Charm 
and Closet, it is noted that the former is mostly faster 
than the latter in dense databases, except when the 
minimum support is high. Closet+ is the developed 
version of Close that tries to remove Close drawback 
using two different structures for sparse and dense 
databases. This algorithm proves to have great 
performance with the help of existing strategies and 
some new optimization technique. Still it has some 
weak point in sparse databases as it needs large 
memory. Compared with Charm, Closet+ has smaller 
consumption memory and higher scalability. In 
execution time there are some variations. Sometimes  
Closet+ works better, and sometimes Charm. FP-close 
algorithm also uses FP-tree structure like Closet and  
Closet+. It decreases tree's traversal time using a new 
technique termed FP-array. Therefore, in most cases it 
needs less time compared with previous algorithms. 
DCI-Closed algorithm which is introduced as the best 
and last closed itemsets mining algorithm uses various 
Type 
of Closure 
Calculation
Type of 
Generator 
Selection 
Type of  
Data Format 
Type 
of  Search 
Strategy 
Algorithm 
off-line minimumelements horizontal
breadth-
first-search A-close 
on-line closure climbing vertical 
depth-
first-search Charm 
on-line closure climbing horizontal
depth-
first-search Closet 
on-line closure climbing horizontal
depth-
first-search Closet+ 
on-line closure climbing horizontal
depth-
first-search FP-Close
on-line closure climbing vertical 
depth-
first-search 
DCI-
Closed 
32
 innovative optimizations in itemsets closure 
calculations and their support. Furthermore, employing 
an optimal technique in time and memory, it quickly 
detects and removes duplicate closed itemsets. This 
algorithm excels in time and memory all other 
algorithms in almost all situations.                        
V. Experimental Evaluation   
Due to high number of discussed algorithms for 
frequent closed itemsets mining, just performance 
results of the best algorithms ,i.e.  Closet+, FP-close, 
and DCI-Closed are shown. These results have been 
tested on databases Chess, Retail and  Pumsb*. Chess 
and  Pumsb* are dense databases and Retail is among 
sparse databases. 
Figure 2,3, and 4 illustrate of the results of 
execution of  DCI-Closed, FP-Close, and  Closet+ on 
databases Chess, Retail ,and Pumsb* respectively.  
0
100
200
300
400
500
600
20 25 30 35 40 45
minimum support 
R
un
tim
e(
se
co
nd
)
DCI-Closed
FP-Close
Closet+
   
            Figure2. Execution Time in Chess Database 
       
0
10
20
30
40
50
60
70
0.01 0.02 0.03 0.04 0.05 0.06
minimum support
Ru
nt
im
e (
se
co
nd
)
DCI-Closed
Closet+
FP-Close
    
      Figure 3. Execution Time in Retail Database 
0
100
200
300
400
500
600
700
800
900
8 10 12 14 16 18 20
minimum support
R
un
tim
e 
(s
ec
on
d)
DCI-Closed
FP-Close
Closet+
 
     Figure 4. Execution Time in Pumsb* Database 
As shown above, DCI-Close has better execution 
time compared with other two algorithms. In figures 2 
and 4, the execution time of algorithm FP-Close is 
better than Closet+. But in figure 3, Closet+ works 
better than FP-Close. It is due to the fact that in Retail 
database the number of frequent items is high, and 
therefore the time given for formation of corresponding 
array from related FP-tree is high, whereas FP-tree 
traversal with optimized strategies employed in Closet+ 
consumes substantially less time.  
VI. Conclusion 
A significant method of condensed representation 
involves using frequent closed itemsets as their number 
is fewer than frequent itemsets. The frequent closed 
itemsets are as powerful as all frequent itemsets, and 
they increase the effect of mining through removing 
redundant rules. In recent years, due to the importance 
of frequent closed itemsets mining many algorithms 
have been introduced which use various strategies. In 
this study, the most popular algorithms of frequent 
closed itemsets  mining have been analyzed. The 
experiments show that each algorithm has its own 
advantages and disadvantages regarding its use in 
different sparse and dense databases. Among them, 
however, DCI-Close algorithm has higher performance 
due to various innovative optimizations in closure 
calculations of itemsets, preventing generation of 
duplicate closed itemsets, and no extra closure 
operation.  
References 
[1] R. Agrawal and R. Srikant, "Fast algorithms for 
mining association rules", Proc. 20th int'1 conf. very 
large data bases, 1994. 
[2] G. Grahne, and J. Zhu,  "Efficiently using prefix-trees 
in mining frequent itemsets", IEEE ICDM Workshop 
on Frequent Itemset Mining Implementations, 2003. 
[3] J. Han, J. Pie, Y. Yin, and R. Mao, "Mining frequent 
pattern without candidate generation", Data mining 
and knowledge discovery, 2003. 
[4] C. Lucchese, S. Orlando, and R. Perego, "Fast and 
memory efficient mining of frequent closed itemsets", 
IEEE Transaction On Knowledge And Data 
Engineering, Vol. 18, No. 1, PP. 21-35, 2006. 
[5] N. Pasquier, Y. Bastide,  R. Taouil, and L. Lakhal, " 
Discovering frequent closed itemsets for association 
rules", Proc. Int'l conf. Database Theory, PP. 398-
416, 1999. 
[6] J. Pei,  J. Han, and R. Mao, " CLOSET: An efficient 
Algorithm for mining frequent closed itemsets", ACM 
SIGMOD workshop research issue in Data mining 
and knowledge Discovery, PP. 21-30, 2000. 
[7] J. Wang, J. Han, and J. Pei, "CLOSET+: Searching 
for the best strategies for mining frequent closed 
itemsets", proc. Int'l Conf. Knowledge Discovery and 
Data Mining, PP. 236-245, 2003. 
[8] J. Wang,  J. Han, Y.  Lu, and P. Tzvetkov,  "TFP: An 
efficient algorithm for Mining top-k frequent closed 
itemsets", IEEE Transactions on knowledge and data 
engineering, Vol. 17, No. 5, PP. 652-664, 2005. 
[9] M.J.  Zaki, and C. Hsiao., "Charm: An efficient 
algorithm for closed itemset mining", Proc. SIAM Int'l 
Conf. Data Mining, PP. 457-473, 2002. 
 
33
