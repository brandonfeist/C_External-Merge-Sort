The Design of a P2P Video-on-Demand Prototype System 
Ling Gao, Hailin Xie, Zhe Zhang, Ruyi Wang, Yijie Lu 
Dept. of Computer Science and Technology 
Northwest University 
Xi'an, P.R.China 
{gl, xiehailin}@nwu.edu.cn 
Abstract-this paper designs a P2P video-on-demand 
prototype system. A hybrid push-pull scheduling mechanism 
with random linear network coding in Galois field 2 and a 
weight function based caching strategy are adopted in the 
design. After careful and suitable segment and block division 
on video, random linear network coding in Galois field 2 is 
carried out on the blocks within a segment, and then the push­
pull hybrid solution is used to schedule the blocks and 
segments. In the weight function of the caching strategy not 
only the emergency degree, rare level but also the association 
rules mining results of user jump behavior is considered. And 
a prefetching algorithm and caching algorithm are 
constructed according to the weight function. Based on these 
design idea, a prototype system design is given out including a 
system topology design, system architecture design and peer's 
module structure design. 
Keywords- P2P; Video-on-Demand; Prototype System design 
I. INTRODUCTION 
The P2P video-on-demand (VoD) system, because of its 
good interactivity, excellent system scalability and low 
deployment cost, is preferred by more and more Internet 
users and has become the major direction of Internet video 
application. At present, designing and deploying a peer-to­
peer video-on-demand streaming system with better user 
experience, guaranteed quality of service and less server 
stress still face some open problems which are requiring 
further research. After deeply researching of the P2P video­
on-demand system, this paper designs a P2P VoD prototype 
system. The system adopts a hybrid push-pull scheduling 
mechanism with random linear network coding in Galois 
field 2 and a weight function based caching strategy. The 
remainder of this paper is organized as follows. we discuss 
the related work in Section II; The data scheduling 
mechanism and caching strategy used in our prototype 
system are proposed in Section III. The prototype system 
design is given in Section IV; the system topology design is 
described in Subsection IV.A; the system architecture design 
is presented in Subsection IV.B, followed by the peer's 
module structure design in Subsection IV.e. Finally we 
conclude this paper and discuss the future work in Section 
V; 
II. RELATED WORK 
With many P2P streaming protocols being proposed, the 
current data scheduling mechanisms can be divided into 
978-1-4244-5540-9/10/$26.00 ©2010 IEEE 
473 
three categories: pull strategy[11, push strategy[21, and push­
pull strategy[31. The pull strategy has better fault tolerance 
for peers' dynamics. The system based it is more robust and 
more easy to implement. But pull strategy will cause large 
delay. On the other hand, because it need exchange buffer 
information between peers periodically, if the period is too 
big, the system will generate too much expired buffer 
information and the system delay will be increased. If the 
period is too small, the control overhead will raise 
significantly. However, because of the simplicity of 
implementation, many of existing real systems still adopt 
this strategy such as PPlive[41. 
The push strategy can reduce the playback delay, but the 
peer may receive too many redundant data from multiple 
peers which it doesn't need. Consequently, the redundancy 
in the system is increased remarkably, which will cause 
large system overhead. 
In order to reduce the data redundancy caused by push 
strategy and the playback delay caused by pull strategy, a 
hybrid push-pull strategy is proposed in [3]. The main idea 
of this strategy is that when the streaming server generates a 
new data block, firstly, it pushes the new bock to some 
predefined peers directly. The other peers which have not 
received the block in the push step will pull the data from its 
neighbors. This strategy put more emphasis on push 
operation. Its typical drawback still is that a large number of 
peers will receive much data that it is not interested in, 
which will cause large waste of resources. A hybrid push­
pull strategy is also proposed in [5]. In [5], the stream is 
divided into many sub streams. If a peer pulled the first 
packet in a sub stream, it believes that the peer will request 
the following packets in the same sub steam. So the sender 
will directly push the following packets in the sub stream to 
the request peer. However, this strategy is designed for live 
streaming system. For the VoD streaming system, it is not 
sure that after requesting a packet, a peer will request the 
next packet of it because peer may jump to another 
destination packet to watch. 
Caching mechanism is another aspect which has 
significant impact on system performance as same as the 
scheduling mechanism. Most of early P2P streaming 
systems are live streaming systems. These systems mainly 
adopt the cache-relay strategy[6-81. The main idea of this 
strategy is that the receiver caches the contents played 
recently, and supplies them to the requiring peers whose 
playing offset is within the sliding-window. Now, the 
Cache-Relay strategy which only caches the pla?ed parts is 
expanded to the prefetching and cache strategy[9, 01 that uses 
some extra bandwidth to prefetch some part of stream before 
the playing offset. In the prefetching and cache strategy, the 
peer prefetches and caches different parts of the video, 
which ensures that the peer can overcome the sudden packet 
loss and the source peer departure to realize smooth play. 
And some of the pre fetching contents can be used to serve 
other peers, thus alleviate the pressure of the content 
distribution[111. 
III. THE SCHEDULING MECHANISM AND CACHING 
STRATEGY ADOPTED IN OUR PROTOTYPE SYSTEM 
Because of the limitations of existing scheduling 
mechanism in P2P VoD system, this paper adopts a network 
coding based hybrid push-pull strategy to maximize system 
throughput and minimize system delay and redundancy, as 
well as reducing system overhead. The objective and the 
most essential advantage of introducing network coding is 
that multiple peers can perfectly collaborate with each other 
to serve one peer in the case of no coordination. In our 
design, the block is basic unit of coding and transporting. 
The coding is carried out on the blocks within a segment, not 
across segment so as to limit the coding dimension and 
reduce the coding complexity. In this paper, we use the 
random linear network coding in Galois field 2, GF(2iI21. 
The network coding in GF(2) has lower coding complexity 
and faster operation speed than that in GF(28). But it will 
generate a larger number of dependent encoded blocks. 
However, literature [ 13] points out that though the number 
of defendent encoded blocks in GF(2) is larger than that in 
GF(2 ), it is still very limited. If a codeword is uniformly 
selected, the average number of dependent packets received 
before a peer can successfully decode the segment is upper 
bounded by a constant value of 2 in GF(2) random linear 
network coding. Moreover, the upper bound of the average 
number of dependent packets is independent to the coding 
dimension. So the extra communication overhead and delay 
due to the dependent packets become negligible when the 
coding dimension is large. Thus, for the 100-500 coding 
dimension in our design, the number of dependent blocks is 
very small. It will not cause the system overhead and delay 
significantly. 
In our strategy, a peer actively requests the first encoded 
block in a segment from multiple neighbors in a pull 
manner. And then multiple sender peers will push the 
following encoded blocks to the request peers until receiving 
the stop signal. After receiving the stop signal, if the senders 
have surplus capacity to serve the request peer, it will 
randomly select a segment from the same data chunk which 
just segment belongs to, and directly push to the request 
peers without coding. Through our scheduling mechanism, 
multiple peers can perfectly collaborate with each other to 
serve one peer in the case of no coordination. So the 
utilization rate of upload bandwidth will be improved, and 
the system throughput will be improved, too. Moreover, 
because the use of a hybrid push-pull strategy, the scheme 
can relatively well adapt to the jitter of the peers and it can 
474 
reduce not only the system delay but also the system 
redundancy. 
In this paper, a weight function based caching 
mechanism is adopted. It also belongs to the prefetching and 
cache strategy. Our caching strategy considers not only the 
emergency degree, rare level but also the association rules 
mining results of user jump behavior. The association rules 
mining of user jump behavior is introduced to reveal the 
characteristics of the video itself to some extent. And a 
pre fetching algorithm and caching algorithm are proposed 
according to the weight function. In this strategy, both the 
individual requirements of single peer and the impact on the 
overall performance of the system are considered. So the 
limited buffer space can be better used and the system 
performance can be improved. 
IV. THE DESIGN OF THE PROTOTYPE SYSTEM 
A P2P V oD prototype system will be designed in this 
section according to the data scheduling mechanism and 
caching strategy mentioned above. 
A. The Design of System Topology 
Similarly to much of the existing P2P streaming 
systems[4,14.161 such as PPlive[4], thousands of videos is 
supported in the system. And the user can select the 
preferred video to watch. Here we call each video as 
"channel". A tracker server is used to maintain the 
information about participating peers. The information 
includes peer identities, such as IP address and port number, 
current caching information, the mining result of video 
object and so on. The system organizes the peers into a mesh 
topology in which each peer can provide service for several 
peers and each peer can acquire service from several peers 
according to its own needs at the same time. The system 
topological diagram is shown as Fig. 1. In the topological 
diagram, we demonstrate the situation of two channels. In 
the system, when a peer selects a channel to watch, firstly it 
contacts with the tracker server. The tracker server randomly 
selects a part of peers which buffers some beginning data of 
the channel to construct the neighbor list and sends it to the 
require peer. The peer joins in these peers, acquires the 
caching map from these peers and requests the beginning 
data from these peers to finish the startup initialization. This 
process is described as the process 1 in the diagram. The 
process 2 in the diagram denotes the peer is leaving the 
system and sends the mining result to the tracker server. The 
situation that the streaming server pushes data to a peer is 
demonstrated as process 3. And the process 4 presents that 
peer "pulls" data from the server when the weight value of 
the segment is larger than the system threshold. More over 
we design a log server to collect the system's log 
information. The Log information can include the basic 
information of peers, the network coding information, the 
user behavior information and the playback information and 
so on. The basic information of peers can consist of the 
channel ID playing currently, the upload and download 
bandwidth and so on. The network coding information can 
be the number of the encoded blocks acquired from 
neighbors in a period, the number of the dependent blocks in 
it and the number of the redundant blocks received after includes the information of peer joining in the system, 
sending out the stop signal. The user behavior information departing from the system and VCR 
?------
I 
I 
I 
I 
I 
, 
, 
, 
, 
, 
I 
\ 
\ 
\ 
\ 
\ 
\ 
\ 
\ 
\ 
\ 
... --- ... 
/Channel '>: ' ... ...'" 
" "2" Is '-I \ I , I _ ... " , 
\ 
\ 
\ 
... _--_ .... 
I 
I 
I 
I 
I 
Just joined 
, , , , , , I , , I 
", ',: Peer I 
" 
I', 
',? , 
I 
\ 
\ 
\ 
\ 
\ 
, 
(5'\ Report Log ... -! 
\ 
\ 
\ 
\ 
\ 
I 
I 
, 
I 
I 
I 
I 
\ 
\ 
\ 
\ 
\ 
I 
I 
I 
I 
I 
I 
, 
, 
Figure I. The system topological diagram 
jumping signal. The playback information can be startup 
latency, jump latency and playback continuity and so on. 
B. The Design of System Architecture 
Now we will give out the system architecture diagram, as 
Fig. 2 shows. Here we adopt hierarchical design ideas. The 
top is streaming service layer which mainly provide the 
service about the VoD streaming such as video dividing 
service, the video characteristic extracting service, i.e., 
mining of relation rule of user jump behavior on video 
segments, the selection of streaming transport protocol such 
as RTP or RSTP, the streaming transporting of the media 
server and playing of channel in media player. The middle is 
P2P layer. The P2P VoD system, in the fIrst step, should 
organize a high effIcient P2P network. In this layer including 
the overlay constructing, the data scheduling and delivery in 
the P2P network, network coding and caching mechanism 
VoD Streaming Server/Media Player 
} Streaming 
r= I Streaming division/Weight Calc. Association rule Mining 
Data schedule I Network Codec I Buffer Manage 
Overlay Construction/Neighbor Peers selection Data Transmission 
TCP UDP 
IP 
Figure 2. the system architecture diagram 
475 
?J 
I? 
1 J 
service 
} Underlying 
Network 
implementation. That is to say this layer should solve these 
problems: how to construct the P2P overlay network, how to 
schedule the data, what network coding manner will be 
adopted and how to organize and manage the buffer, how to 
decide the prefething and replacing strategy. The bottom is 
underlying network layer. It decides which transport protocol 
will be adopt, which depends on the actual needs of the 
application. Here we adopt UDP protocol to transport the 
streaming data and TCP to transport the separate control 
messages. 
C. The Design of Peer's Module Structure 
At last, we give out the peer's module structure design as 
Fig. 3 shows. In our system, a peer include neighbor 
management module "Neighbor Manager", data scheduling 
module "Schedule Manager", buffer management module 
"Buffer Manager", network coding module "Network 
Codec", data mining module, and media player module. In 
the system, a peer will act as both the provider of the 
streaming service and the receiver of the streaming service. 
The neighbor management module is in charge of the 
neighbor peer discovery and selection to construct a mesh 
overlay network. The buffer management module calculates 
weight value of the missing segments according to the 
current caching content and the mining result of the data 
mining module, and then submits the segment requests 
according to the prefetching algorithm. The data scheduling 
module determined which segments should be requested and 
from which peers to request. Once a peer received neighbors' 
data requests, the data scheduling module, based on its local 
buffer content, decides to which peers it will provide service 
and which segments it will provide to a particular peer and 
then after network coding module generates the coding 
coefficients and encoding the blocks, the data scheduling 
module adopts the UDP protocol to transport the encoded 
block (UDP is used by default. If UDP is unreachable, The 
TCP will be chosen). Once received a encoded block from 
underlying network, the peer puts the encoded block into the 
decoding zone of the buffer, and then the decoding module 
of the coding codec will decode the encoded blocks 
aggressively with aggressive Gauss-Jordan elimination. 
When all the blocks in the segment is decoding, the peer will, 
by "pre-braking" manner, randomly picks out some peers in 
the data providers to send the stop signal. Once received the 
stop signal, these peers will stop sending the data to the 
downstream peers immediately. And then the downstream 
peer continues to decode the blocks until all the blocks in the 
segment is decoded and sends the stop signal to the 
remaining data providing peers. After the decoding is 
finished, the decoded blocks will be inserted into the 
playback zone of the buffer and the buffer management 
module will provide data to the media player according to 
the playback request. The media player implements the play 
operation once received the streaming data. Because the 
network coding is adopted and a peer could request data 
from multiple peers, the UDP transport manner without 
guaranteed quality of service can be used to delivery the 
Media Player 
Neighbor 
Manager 
D Data Mining 
¢:::::::> M odul e 
Network Codec 
Encoder Module 
TCP ( UDP 
IP 
u 
Figure 3. the peer's module structure design diagram 
streaming data and the TCP protocol is not a must. Only if 
the UDP protocol is unreachable, the TCP transportation will 
be used. What's more, for the separate control messages, the 
TCP Transportation will be used in order to reduce the 
control signal loss. 
476 
V. CONCLUSIONS AND FUTURE WORK 
In this paper, a P2P Video-on-Demand prototype system 
IS designed. In our design, a hybrid push-pull scheduling 
mechanism with random linear network coding in Galois 
field 2 and a weight function based caching strategy are 
adopted. The system topology design, system architecture 
design and peer's module structure design is given out. 
Beyond this work there are still many problems requiring 
further study. Firstly, the caching mechanism of a P2P VOD 
system should be integrated with overlay network 
constructing mechanism and data scheduling strategy to 
achieve better performance. Secondly, a proper incentive 
structure should be created to avoid the selfish behaviors. 
Thirdly, a realistic system should be developed and deployed 
to testifY the system performance. We will be interested in 
these areas and do that in our future work. 
ACKNOWLEDGMENTS 
This work is partially supported by the National Science 
and Technology Support Program of China under Grant No. 
2007BAH08BOI; the " 13 1 15" scientific and technological 
innovation program of Shaanxi Province under Grant No. 
2009FWPT -06. 
REFERENCES 
[I] X. Zhang, J. Liu, B. Li, and T.-S. P. Yum, "CooIStreamingIDONet: A 
Data-driven Overlay Network for Live Media Streaming," in 
Proceedings of IEEEINFOCOM, Miami, FL, USA, Mar. 2005. 
[2] V. Venkataraman, K. Yoshida, and P. Francis. Chunkyspread: 
Heterogeneous Unstructured Tree-based Peer-to-Peer Multicast. In 
Proc. of IEEE International Conference on Network Protocols 
(ICNP),2006. 
[3] Locher T. Push-to-Pull Peer-to-Peer Live Streaming. in Proceedings. 
of 21st International Symposium on Distributed Computing (DISC), 
2007, pp: 388-402. 
[4] Huang Y. PPLive---A Practical P2P Live System with Huge Amount 
of Users. In keynote speech at ACM SIGCOMM P2P-TV Workshop, 
Kyoto, 2007 
477 
[5] M. Zhang, Q. Zhang, L. Sun, and S. Yang. Understanding the Power 
of Pull-based Streaming Protocol: Can We Do Better? IEEE J. on Sel. 
Areas in Communications, December 2007. 
[6] Cui Y, Nahrstedt K, "Layered peer-to-peer streaming," In Proc. Of 
NOSSDAV'03, Monterey, CA, Jun. 2003, pp. 162-171. 
[7] Jin S, Bestavros A, "OSMOSIS: scalable delivery of real-time 
streaming media in Ad-Hoc overlay networks," In Proc. of IEEE 
ICDCS'03 Workshop on Data Distribution in Real-Time Systems, 
2003, pp. 214-219. 
[8] Jin S, Bestavros A, "Scalability of multicast delivery for non­
sequential streaming access," In Proc. of the 2002 ACM 
SIGMETRICS international conference on Measurement and 
modeling of computer systems, June, 2002, pp. 97-107. 
[9] T. Ye, W. Di and Ng. Kam-Wing, "A novel caching mechanism for 
peer-to-peer based media-on-demand streaming," Elsevier Journal of 
System Architecture(2007), v.54 n.1-2, pp.55-69, January, 2008. 
[10] H. Xie, L. Gao, L. Zhang, Z. Zhang, "An Efficient Caching 
Mechanism for Video-on-Demand Service over Peer-to-Peer 
Network," In Proc. of 2009 international conference on Scalable 
Computing and Communications, Dalian, China, 2009, pp: 251-256. 
[II] Sharma A, Bestavros A, Matta I, "dPam: A distributed prefetching 
protocol for scalable asynchronous multicast in P2P systems," In 
Proc. of the IEEE INFOCOM 2005, pp. 1139-1150. 
[12] N. Jacobson, Basic Algebra, 2nd ed. New York: W. H. Freeman and 
Co.,1985. 
[13] Huang Z. Design of heterogeneous p2p video-on-demand systems. 
HongKong: The Hong Kong University of Science and Technology, 
2008 
[14] Y. Huang, T. Z. Fu, D.-M. Chiu, J. C. Lui, and C. Huang, 
"Challenges, Design and Analysis of a Large-Scale P2P-VoD 
System," in Proc. ACM SIGCOMM'08, Aug. 2008, pp. 375-388. 
[15] X. Wang, C. Zheng, Z. Zhang, H. Lu, and X. Xue, "The Design of 
Video Segmentation-aided VCR Support for P2P VoD Systems," 
IEEE Transactions on Consumer Electronics, vol. 54, no. 2, pp. 531-
537,2008 
[16] Do T. T, Hua K. A, Tantaoui M. A. P2VoD: Providing Fault Tolerant 
Video-on-Demand Streaming in Peer-to-Peer Environment[A]. in 
Proceedings of IEEE International Conference on Communications 
(ICC)[C]. Paris, France: IEEE International Conference on 
Communications, June 2004. 
