20IO 3rd International Conference on Advanced Computer Theory and Engineering(ICACTE) 
A New Association Rule Mining Algorithm and Its Application 
lun Gao 
Dept. of Computer Science 
Shanghai Institute of Technology 
Shanghai 200235, China 
gaojun@sit.edu.cn 
AbstractThis paper presents a new association rule mmmg 
algorithm called MFP. The MFP algorithm can convert a 
transaction database into an MFP _tree through scanning the 
database only once, and then do the mining of the tree. The 
MFP algorithm usually is more efficient than FP_growth. We 
used it for mining some formulas of synthetic perfume 
essence and obtained the success. 
Keywords: Data mining; MFP algorithm; Formulas Mining; 
synthetic perfume essence 
I. INTRODUCTION 
Association rule mining belongs to data mining area. It is 
used to search for interesting relationship among items in a 
large transaction database[IJ. Boolean association rule 
mining is used more widely than other kinds of association 
rule mining. Its whole mining process can be completed in 
three steps. Firstly, the database which will be mined are 
transformed into a transaction database. And then, some 
mining method is used to mine out all candidate frequent 
patterns. At last, the association rules are created from the 
candidate frequent patterns. The second stage is the most 
important. It will decide the correctness and efficiency of 
the mining process. There are two mining algorithms which 
are widely used to mine association rules. One is Apriori; 
the other is FP ?rowth[ 3J. FP _growth algorithm is more 
efficient than Apriori. Some related research showed that 
FP ?rowth algorithm is about one order of magnitude faster 
than the Apriori[4J. The larger the transaction database, the 
higher FP ?rowth's efficiency. The main reason is that 
Apriori algorithm need scan transaction database being 
mined several times and FP _growth algorithm need to scan 
the database only twice. 
FP _growth algorithm is used to mine transaction database 
for Boolean association frequent patterns. Its mining process 
is quite complicated, and can be divided into three basic 
stages. The first stage is to scan the transaction database 
being mined and construct a L table with the value of 
min_sup given. The second stage is to scan the transaction 
database again, and build an FP _tree. The last stage is to 
mine the FP _tree, and search for all candidate frequent 
patterns. After we get the patterns, we can construct all 
association rules from them easily. 
Although FP _growth algorithm is more efficient than 
Apriori algorithm, it has to scans the transaction database 
twice. The first time, an L table is created. The second time, 
an FP tree is built. The cost of scanning a transaction 
database is usually very high. If we can decrease the number 
of scan times of association rule mining algorithms, the 
algorithms will be even more efficient than FP _growth. We 
design a fast association rule mining algorithm called MFP 
algorithm. MFP algorithm firstly scans a transaction 
database and converts the database into MFP tree which is 
similar to FP _tree, and then, the algorithm mines MFP _tree 
to find all possible candidate frequent patterns. Comparing 
with FP _growth algorithm, MFP algorithm scans a 
transaction database only once, it has higher efficiency than 
FP _growth. We have not found the similar work so far. 
II. THE PRINCIPLE OF THE MFP ALGORITHM 
A. Related Definition 
We give the following definitions first. 
Definition 1 Transaction database stores transaction 
records. Every transaction record in a transaction database 
has a sole identifier and all items included in the transaction 
record are listed in order. Figure I is a simple transaction 
database named D. 
TOOl is the identifier of the first transaction record in D. 
Transaction TOOl includes items II , 12, IS, which are listed 
in the order of item suffixes. 
TID List of item ID's 
TOOl 11, 12, 15 
TOO2 12, 14 
T003 12, 13 
TOO4 11, 12, 14 
T005 11, 13 
TOO6 12, 13 
T007 11, 12 
T008 11, 12, 13, 15 
TOO9 11, 12, 13 
F gure 1. Transaction database 
978-1-4244-6542-2/$26.00 © 2010 IEEE V5-122 
2010 3rd International Conference on Advanced Computer Theory and Engineering(ICACTE) 
Definition 2 MFP _tree, is composed of a number of tree 
nodes and a root labeled with "null". Every node has n sub­
nodes (n = 0, 1, 2 . . .  ). When n = 0, the node is called leaf 
node. We use an MFP _tree to present a transaction database. 
A tree node is labeled with the name of an item in the 
transaction database. Except of the root, every node in the 
tree has two fields. One is Ii.count and the other is Ii.pointer. 
The Ii.count is equal to the number of the items, which 
appear in the nodes, and is displayed in a bracket on the right 
of the node label. Ii.pointer is a pointer, which points to its 
mother node. 
Definition 3 Combination C is any combination of nodes 
(the root is not included) on a branch from a leaf to the root. 
The C is presented with the labels of the nodes combined. 
The name has a number in a bracket on the right. An 
example of an MFP _tree is shown in Figure 2. 
nu11 
12(2) 14(2) 
15(1) 
Figure2. MFP _tree 
a) 
14, 15 are leaf nodes in the Figure 2. Because 15.count=l, 
and there are three nodes I1, 12, 15 on the branch, four 
compositions are constructed. They are {I5, I2}(1), {I5, Il}(l)' 
{15, 12, 11 }(l), {12, I1 }(1). There are two nodes 12, 14 on the 
other branch, and I4.count = 2, so we can get the 
composition of {14, I2h2). 
Definition 4 Table TL is a list of pointers. Every pointer 
in table TL only points to a leaf node of an MF _tree and 
every leaf node is pointed only by one pointer. 
Definition 5 Set CF is a kind of sets whose element is C. 
B. The principle of MFP Algorithm 
The mining process of MFP Algorithm can be divided 
into two steps. One is to construct MFP _tree; the other is to 
mine MFP tree. 
(1) Construction ofMFP _tree 
The root of an MFP tree labeled with "null" is created 
first. Then, the first transaction record is taken out from the 
transaction database D being mined and inserted into the 
MFP_tree in the following way. The first item of the record 
is taken out. If the root of the tree has a sub-node whose 
label is the same as the label of item just taken out, we add 1 
to the node's count field. Otherwise, we create a new sub­
node of the root with the same label as the item. After that, 
we use the sub-node as a sub-tree's root, take out the next 
item from the transaction record and insert it into the sub-
tree in the same way. The process repeats till all the items in 
the transaction record are put into the MFP _tree. In this way, 
we can insert all the transaction records in D into the 
MFP _tree and complete the conversion of the transaction 
database D into the MFP _tree. In the MFP _tree, one branch 
from a leaf to the root presents one or more transaction 
records of D, and stores the association information among 
the items of a transaction record. 
In order to mine an MFP _tree easier, according to 
Definition 5, we create table TL whose elements are pointers 
pointing to leaf nodes respectively. 
We can convert the transaction database D showed in 
Figure 1 into the MFP _tree shown in Figure 3. The number 
in the bracket on the right side of a node label is the node's 
Ii.count value. 
F 
n L\I2(3' 
'" LI 11(6) J
? .. IJ(2) 
\'" IJ (2) 012 (4) 14 (I) 
.. \r'->I \ //?// 4 
.. /-\4;(7; ???I?? ) 
\. 
r' 5 '" " 
,/ 6 .. 15 (I) 
Figure 3. The MFP _tree from 0 
(2) Mining MFP _tree 
We take out the first pointer in table TL and get the leaf 
pointed to. All of combinations are composed of the nodes 
except the root on the branch the leaf connects to. We then 
put labels and values to all the combinations according to 
Definition 3. After that, we send all combinations into set 
CF, if there are not the same combination labels in set CF. 
Otherwise, we merge the two combinations with the same 
label by adding together the two count values. After all 
combinations of the nodes on the branch are sent into set CF, 
we modifY the nodes on the branch in following way. The 
leaf node's count value is subtracted from every other node's 
count value on the branch. Then, if the mother node of the 
leaf is not the root and does not have other sub-node or sub­
nodes, we make the pointer of table TL point to the mother 
node of the leaf. Otherwise, we delete the pointer in TL. 
We can take out all the pointers in table TL and process all 
the node in the MFP _tree in this way. 
On finishing processing the MFP _tree, we delete those 
combinations in CF, whose count value is less than min_sup 
given. After that, all the combinations left in set CF are 
candidate frequent patterns we want. We can create all 
association rules from the combination in set CF, and use 
min _ conf given to find strong association rules. An example 
of mining MFP _tree shown in Figure 3 is given below. 
V5-123 
2010 3rd International Conference on Advanced Computer Theory and Engineering(ICACTE) 
We find leaf nodes 15 with the first pointer in table TL, 
and get the branch node 15, 12, 11. We combine the three 
node to get the combinations of {15, I2}(l), {15, 11 hI), {15, 12, 
11 }(l), {12, II }(I), . Because set CF is empty at this moment, 
the four combinations enter CF directly. Then we modifY 
the nodes on the branch, by subtracting the number of the 
I5.count from the other nodes count on the branch. Because 
the mother node of 15 is 12 and it has other sub-nodes, we 
simply delete the pointer in table TL. Now we take out the 
next pointer in table TL and repeat the above process till 
there is the last pointer. The last pointer in table TL points to 
15, so we get the branch from 15 to the root. The branch is 
composed of I5, 13, 12, n. We can get all the combinations 
from the four nodes, and put them into set CF. Then, we 
modifY the count fields of the four nodes on the branch. At 
this time, 13 the mother node of 15 does not have any other 
sub-node, so we let the pointer pointing to 15 to point to B. 
After that, in the same way, we process the new branch from 
the root to 13 being pointed to by the pointer. 
At last, we delete those combinations in set CF, whose 
count is less than min_sup (min_sup = 2 in this example) and 
obtain set CF as below. 
CF={ {I3,Il h4), {I2,Il }(4), {I3,I2 h4), {I5,I2h2), {I5,Il h2), 
{I4,I2h2»), {I5,I2,Il }(2), {I3,I2,Il }(2)l } 
III. MFP ALGORITHM 
A. The Algorithm 
The poseudcode ofMFP algorithm lists below. 
Input: Transaction database D, min_sup 
output: Candidate frequent set CF 
method: ( I) Build MFP tree 
Create root node; 
Open D: 
While (not EO F) 
{ R = current record: 
call insert_tree(R, null): 
move the pointer of D to the next record; } 
procedure insert_tree (record, root_nod) 
{ while (record <> ¢) 
{first = the first item of the record: 
delete the item from the record: 
if (root node has a sub-node labeled with A and the 
label = first) 
A.count = A.count+ I : 
else 
{ create node A; 
A.count=l; 
A.pointer point to root_nod;} 
If (record <> ¢) 
{call insert_tree (record, A) recursively} 
} 
delete the pointer in table TL pointing to another 
node on the branch.: 
create a pointer pointing to node A: 
(2) mining MFP _tree (tree,TL) 
{ while (TL<>¢) 
{get the first pointer of TL which point to A; 
combine all nodes on the branch from A to root 
and get Cl, C2,  , Cm; 
for (I = I; I <= m; i++) 
{Ci.count = a.count; 
if (Ci E CF) 
CF.Ci.count=CF.Ci.count+Ci.count;else; 
put Ci into CF: } 
Subtract A.count from all other nodes' count; 
if (A is not the root and its mother node does no 
have other sub-nodes) 
{ let the pointer in TL point to the mother node of 
A: 
else 
delete node A; } 
delete the pointer in TL point to A: } 
delete those combinations in CF whose count 
<min_sup: 
B. The Result of the trial operation 
We used MFP algorithm to mine an experiment 
transaction database in order to obtain automatically the 
formulas of synthetic perfume essence. The database stores 
about 5000 records. The records came from the experiments 
for synthetic perfume essence and were transferred into 
transaction data. The test results show that MFP algorithm 
successfully mine out about one hundred of candidate 
frequent formulas and some of formulas turned to be very 
interesting and valuable. Some professional persons who are 
studying the perfume essences formulas think this is a new 
way to find formulas of perfume essences and can obtain 
essence formulas automatically. Of cause, in this process 
professional persons are still needed to test those formulas in 
order to get really useful formulas. The tests showed that 
MFP algorithm's mining efficiency is very high. It can be 
inferred easily from the principle of the algorithm that MFP 
algorithm's efficiency will get even higher, when a 
transaction database becomes larger and it can be used in 
similar situation. 
IV. CONCLUSION 
It is very important to have a data mining algorithm with 
high efficiency because transaction database usually are very 
V5-124 
2010 3rd International Conference on Advanced Computer Theory and Engineering(ICACTE) 
large. Analyzing FP _growth algorithm fully, we design an 
association rule mining algorithm called MFP. MFP 
algorithm can complete the mining process through scanning 
the transaction database only one time. MFP algorithm can 
be applied to any situation where FP _growth or Apriori 
algorithm can be used. 
Acknowledgment 
The author appreciates the associate editor anonymous 
reviewers for their invaluable comments and suggestions to 
improve the manuscript. This study is partly supported by 
key Foundation of Shanghai Educational 
Committee(07ZZ164, 060Z016) , Foundation of Shanghai 
Institute of Technology(YJ2004-05) , key subject of 
Shanghai Institute of Technology(Computer science and 
information) , Foundation of Shanghai Educational 
Committee(060Z021 )and Shanghai Leading Academic 
Discipline Project (Project Number: J5150l). 
REFERENCES 
[I) T Imielinski, A Virmani, "MSQL: Aquery languang for database 
mining", Data Mining and Knowledge Discovery, 1999,3(2)pp. 373 -
408. 
[2) R Groth. Data Mining Building Competitive Advantage. Prentice 
Hall, 1999. 
[3) M Goebel, L Gruenwald. "A survey of data mining and knowledge 
discovery software tools", SIGKDD Explorations, 1999,1(5)pp.20-33. 
[4) [4) G Grahne, "Efficient mining of constrained correlated sets", In 
Proc 2000 In!. Conf Data Engineering(ICDE'OO), San Diego, 2000, 
pp.512-521. 
[5) J Han, "Mining frequent patterns without candidate generation", In 
Proc. 2000 
ACM-SIGMOD Int.Conf Dallas: 2000. 
[6) Jiang Xiaoliang, "FP ?growth Based Algorithm for Mining of decision 
rule", Computer Science, 2003,8(6), pp.23-25. 
[7) J Han, J Pei, Freespan, "Frequent pattern-projected sequential pattern 
mining", In Technical Report CMPT2000-06, Simon Fraser 
University, 2000, pp.6-12. 
[8) Jiawei Han, "Data Mining Concepts and Techniques", Burnaby: 
Simon Fraser University, 2000, pp.155-163. 
V5-125 
