A Novel Web Recommender System Considering 
Users’ Need Evolution 
 
Rozita Tavakolian 
Department of Information Technology Engineering 
Tarbiat Modares University 
Tehran, Iran 
tavakolian@modares.ac.ir 
Nasrollah Moghadam Charkari 
Department of Electrical and Computer Science 
Trabiat Modares University 
Tehran, Iran 
charkari@modares.ac.ir
 
 
Abstract— The recommender systems’ task is to predict items in 
which a user might like in future. Typically they do it in two 
stages. One, offline stage, that extracts patterns from mining 
users’ historical behavior, and another, online stage predicts 
items by matching the active requests with the patterns; but 
without considering other interests of the active user. In general, 
web users’ navigations contain gradual evolution of their needs. 
We conducted an approach that addresses the evolving nature of 
users’ needs and interests in making recommendations. Since 
users’ behaviors are not stable and their interest changes with 
time, our approach is based on interest-drifting. One of the main 
shortcomings of interest-drifting based approaches is that they 
assume different users have the similar interest changes over 
time and do not consider this important factor that the trend of 
interest changes for users is different. This paper attempts to 
tackle this problem, too. Up to now there has not been any study 
to tackle these problems. We evaluate our proposed methodology 
on EachMovie dataset. Results show a better performance than 
existing approaches. 
Keywords-component; recommender system; web mining; 
evolution of users’ needs and interest; interest-drifting 
I.  INTRODUCTION  
Web Mining (WM) is a popular technique that can be used 
to discover information hidden into Web-related data by 
exploiting Data Mining techniques [1]. It can be used for 
different goals such as web recommendation systems. The 
recommender systems’ task is to predict items in which a user 
might like in future. Typically they consist of two major parts: 
offline mining and online recommendation. In the first part, 
some web mining techniques are applied to historical behaviors 
of users to mine the navigation patterns of users. In the online 
recommendation part, user’s requests from his/her current 
active session are matched with the patterns obtained from the 
offline part in order to generate recommendations [2]. The 
most recommender systems work in this way [3,4,5,6]. They 
consider only current request of user and don’t pay any 
attention to other interests of him/her. In general, Web users’ 
navigations contain gradual evolution of their information 
needs. Therefore some previous observations of users might be 
still of their interest. It represents that considering previous 
observations and related interests of the user might result 
predicting his/her future needs more precise. Suppose that a 
user has been interested in movies that actor X plays in them 
before and now he/she browses movies with genre Y. Our 
system can suggest movies with genre Y that actor X plays in 
them.  
In this paper we propose a novel method that is able to 
dynamically identify potential interests of an active user and 
consider this information to improve the performance of 
recommendations. The main idea is introducing a 
recommendation approach that identifies potential interests of 
the user and integrates it with his/her current request in making 
recommendation. 
On the other, user’s interest changes with time. The old 
interest is gradually forgotten, and the new one is created. This 
phenomenon is called as interest-drifting [7]. User may change 
the items which have been rated highly in the past. For 
example, a man previously liked thrillers. So he rated The 39 
Steps, a thriller, the highest score 5 three years ago. But he 
changes his interests as time goes by. Currently he dislikes 
thrillers. He rated The Bourne Identity, another thriller, the 
score 2 a month ago [8]. It represents that all observation 
history of a user might not include in his/her potential interest. 
So, our approach is based on interest-drifting. 
In the recent years, many researchers have focused on 
addressing user’s interest drifting problem. They assign time 
weights to all observations of user. Since the last observations 
of users represent the current users’ interest better than older 
ones, they assign time weights to items such that the items 
visited recently have more contribution to the recommendation. 
It’s called forgetting mechanism [7]. Sugiyama, Hatano and 
yoshikawa explored a type of time-based collaborative filtering 
with detailed analysis of user's browsing history in one day [9]. 
In [8] an item-based collaborative filtering algorithm has been 
presented to compute the time weights for different items in a 
manner that will assign a decreasing weight to old data. In [10] 
a hybrid filtering algorithm has been introduced to address 
interest drift. Godoy and Amandi developed a mechanism 
named WebProfiler, which learns a hierarchical representation 
of all user interests using conceptual clustering [11]. Interests 
at the top and bottom levels of the hierarchy can be seen as 
long-term short-term interests respectively. Then a time-based 
forgetting is used to give weight to different web paged in the 
hierarchy. Li and Feng has developed a computation model to 
estimate the user interest of the accessed pages through 
analyzing users’ browsing behaviors; they have used a time 
2010 5th International Symposium on Telecommunications (IST'2010)
978-1-4244-8185-9/10/$26.00 ©2010 IEEE 738
function to give more importance to the recent observations 
[12]. A personalized service which recommends resources for 
users at massive education resources net has been proposed in 
[13]. A model of resource’s description and the treatment of 
user’s interest drift using usage and content data has been 
shown.  Min and Han [14] developed a modified collaborative 
filtering based approach which can find the active user’s 
neighbors according to his/her changing pattern. 
One of the main shortcomings of available approaches 
based on interest-drifting is that they assume different users 
have the similar interest changes over time. In real world, the 
trend of interest changes in user purchase interest is different. 
For example, some users’ interest changes with time quickly, 
while others may have a stable interest.  We decided to address 
this problem, too. Differently from previously approaches, our 
method tracks and detects the drifted interests of users 
individually.   
We evaluate the efficiency of our proposal from two 
aspects: (1) the impact of considering user’s interest evolution, 
and (2) the impact of detecting users’ interest drifting 
individually. 
The rest of this paper is organized as follows. Section II 
describes our proposed approach. The experiments are given in 
section III. And the paper ends with a short conclusion and 
some suggestions for future work in section IV. 
II. THE PROPOSED RECOMMENDATION SYSTEM 
In this section we present an approach based on web mining 
techniques and interest-drifting that takes into account all 
potential interests of the user in making recommendations. It 
solves the problem of identifying drifted interests of users 
individually. The steps in the algorithms could be briefly 
summarized as follows: 
a) Create a Time-to-Category Rating matrix using 
web page clusters and web users’ ratings to detect 
interest drifting of users individually.  
b) Calculate the weights of interests based on their 
importance for users.  
c) Mine weighted association rules. 
d) Update active user profile. 
e) Recommend unseen items to the active user.  
Fig. 1 shows a general view of the proposed algorithm. 
In the next subsections, we will describe each step in detail. 
A. Detecting User Interest Drifting 
In an electronic shop different users differ about purchase 
behavior and, consequently the trend of their interest changes is 
not same. We attempt to detect changes in user interest at 
different periods of times individually. For this, we use a 
modified approach in [14]. Our proposed method is as follows: 
Step 1. Cluster web pages; after preprocessing and TF-IDF 
weighting [15], we categorized web pages based on content 
similarity. 
 
Figure 1.  The architecture of our proposal 
 
Step 2. Produce a Time-to-Category Rating Matrix for each 
user; in this matrix, rows are timeframes and columns are 
categories found in previous step. Numbers in each row 
denotes ratings of user u to each item in categories. We 
represent the interests of a user in different timeframes by 
Time-to-Category Rating Matrix. Table 1 shows a Time-to-
Category Rating Matrix of a user. 
Step 3. Calculate category ratings; the category rating is 
defined as the average ratings for the items in that category and 
defined as follow. 
 
ia,
k category,i k
ku, rRN
1  cr ?
?
=
 (1) 
In the above equation, cru,k is the derived rating of category 
k of user u, RNk is the number of rated items that belong to that 
category. ru,i is the rating of item i of user u. we calculate 
category rating for each category and each user in different 
timeframes. In our work, category ratings might be a good 
indicator for estimating the amount of importance for a 
particular content for each user.  
Step 4. Calculate the correlation between different interests 
of each user in different timeframes; the calculation is done by 
Auto-Similarity measure (AS) which discussed in [14]. Here, 
it’s applied to detect a behavior change for any user. It’s found 
by (2).  
 
( ) ( ) ( )( )
( ) ( )( )
( ) ( )( )
( ) ( )( )?
?
?
?
?
×
?
?
k
2
uku,
uku,
k
2
uku,
k uku,
T2T1,
2TT2cr
2TT2cr 
1TT1cr
 1TT1cr
uAS
r
r
r
r
 (2) 
In this equation, ( ) ku,T1cr is the category rating k of user u 
in timeframe T1 and ( )u1Tr is the average ratings of user u in 
timeframe T1. 
739
TABLE I.  TIME-TO-CATEGORY RATING MATRIX 
 
 
This measure is used for detecting the degree of changes. 
Auto-Similarity AS(u)T1,T2 is defined as the similarity between 
the user’s category ratings at timeframe T1 and the same user’s 
category ratings at timeframe T2. 
Step 5. Detect changes; if the value of (2) is less than a 
predefined threshold ?, we can understand that a change in user 
interest has been occurred   
In real world, the timeframe size is decided by how 
frequently the user purchase interest changes. If the user 
preference changes frequently or dramatically, we should 
assign a small size; it helps us detecting more drifting. 
Conversely, if the user preference is consistent, we should 
increase the size of timeframe. So, timeframe size influences 
the performance of the algorithm. 
B. Calculating the Weights of Interests 
To capture the real interest of a user to items, we assign a 
new weight to each rating based on combining user ratings and 
time whenever user’s interest changes. Several reasons validate 
the idea of computing this hybrid weight: 
• An item with more ratings is of greater interest to 
customers. 
• Customer preferences are time-sensitive. The item 
rated more recently by a user might have a larger 
impact on the prediction of user’s preference than an 
item that was rated long time ago. In the other words, 
recent ratings should be able to reflect user’s current 
interests more accurately [8]. 
Users’ ratings recorded in dataset. Most studies applied a 
time-sensitive function to assign a smaller weight to old ratings 
and larger weight to newer ratings [8,10,11,12,13]. But these 
studies don’t detect drift and multiply the time function in all 
ratings of a user. If a user has a stable interest, it results 
decreasing the importance of his/her long-term interest and 
finally poor predictions. In this paper, we firstly detected users’ 
interest drifting individually. Then we apply time function 
whenever an interest change occurs. In this case time function 
can decrease the importance of items related to each interest of 
the user. 
The following example illustrates our approach in finding 
individually the interest drift of each user and then giving 
weight to each interest:  
Suppose that table 1 is a Time-to-Category Rating Matrix 
of a user u. Ti is a timeframe. Tm represents the last timeframe 
user has done rating and T1 is the oldest timeframe. We 
compute the new weight for items using (3). Wu,j and Ru,j 
denote new weight of item j for user u and, rating user u has 
assigned  to item j. F(ti) is a time function. 
 
)iF(t  ju,R  ju,W ×=
 (3) 
The value of variable ti is determined as follows: 
• Since the ratings in row Tm indicate the current 
interest. So, we consider ti=0 for all items in this row. 
• In other rows, ti?0. If in timeframe Ti a drift is 
detected, then ti will be the elapsed days from Ti  to 
Tm. For example if Tm is November 1995 and Ti is 
August 1995, then ti for all items in timeframe Ti is 
equal to 91.  
• If in timeframe Ti interest doesn’t change, then ti will 
be equal with the value of ti in timeframe Ti+1.  
Equation (4) shows the above explanation briefly. 
 
 
     ,T -T
           ,t
               0
  t
mi
1ii ??
??
? =
= +
change interstif
change interest noif
if
mi
 (4) 
Function F(t) called time function or forgetting function. In 
literature, many Forgetting Functions have been introduced, for 
example, logistic function, sigmoid function and linear 
functions. Here, we choose the time function used in [10] as 
following: 
 
 t- e  F(t) ?=
 (5) 
It can satisfy our needs well. Using F(t), the value of time 
weight lies in the range (0,1) and the more recent data will have 
the higher the value.  
We firstly, defined a decay rate parameter ?. Our aim is to 
define the rate of decay of the weight assigned to interests [10].  
C. Mining Weighted Association Rules 
In this section, we extract weighted association rules. 
Discovery of association rules has been found successful in 
many recommender systems. Despite classic association rule 
mining, weighted association rule mining allows different 
weights to be assigned to different items to reflect their 
importance to the user. The weights may represent as the 
profitability or popularity of different items for the user. 
Weighted association rule mining pays more attention to items 
with higher importance [16]. 
We have implemented the algorithm of weighted rule 
mining presented in [17]. The value of minimum support and 
confidence was considered 0.6 and 0.5 respectively. The result 
740
of this algorithm conceptually described as follows: 
( ) ( ) ( )
( ) }C ,S ,  w,p
,..., w,p  w,p..., ,  w,p{  r
aanknk
11kkk11a
++
++?= k  where 
( ) ( )} w,p..., ,  w,p{ kk11  and ( ) ( )} w,p,..., w,p{ nknk1k1k ++++  represent the left-hand 
side and the right-hand side of the ath weighted rule 
respectively, pi represents each item and wi is the weight of the 
ith item. Sa and Ca are weighted support and weighted 
confidence of rule ath respectively. 
D. Updating Active User Profile and Recommendation 
As mentioned before, because of evolving nature of users’ 
needs, we have decided to take into account related interests of 
the active user in prediction. Current observations of an active 
user in website represent his/her recent preferences. When a 
user enters the website and starts to visit web pages, we first 
update active user profile by reassigning new weights to his/her 
interests based on current session using technique described in 
sections II and subsection B. 
In our evaluations of recommendation approach, we use 
leave-one-out method. Suppose that vector ( ) ( )nn11 r,t ..., ,r,t  T =  is a vector in test set for an active 
user u where ti and ir indicate each item and the rating of user 
u to ti respectively. Then we apply the leave-one-out method 
for each (ti ,ri) in T. In this way, we eliminate a (ti ,ri) at each 
step, then the current user session will represent as a vector ( ) ( )1-i1-i11 r,t ..., ,r,t  S = . Therefore, S represents current 
interest of u. Now we update the profile of u based on current 
session and obtain 
( ) ( )ss 1-i1-i11 w,t ..., , ,w,t  S =?  as the profile 
of u. Now we can suggest more useful item to u by matching 
the sequence S with the mined historical behavior patterns.  
As we said earlier, each of the weighted association rules 
are represented as a set of item-weight pairs. So, we can 
retrieve rule has the most similar left-hand side with S’. If left-
hand side of the each rule is represented as a 
vector ( ) ( )} w,p...,,  w,p{R rkkrii= , then the similarities will be 
computed using (6) [17]. 
 
( ) ( ) ( )
( ) ( ) ( )? ?×
?
=?
?×=
k k
2s
kw 
2r
kw
k
s
k w. 
r
kw
  R,SM
R,SM  RConfidence   RSimilarity
 (6) 
After retrieving a rule with the most Similarity(R) value, 
we recommend active user items with the highest weight in 
right-hand side of the rule. 
III. EXPERIMENTAL RESULTS 
To evaluate the performance of our proposed recommender 
system, we carried out our experiments on The EachMovie 
dataset that have been the most widely used common datasets 
in recommender system researches. The EachMovie dataset has 
rating information on 1,628 movies by 72,916 users during an 
18-month-period. Users rated various numbers of movies by 
rating values to values between 0 and 1. Each vote is 
accompanied by a date and time stamp. We have collected the 
content of each movie from Internet Movie Database (IMDB)1 
using a web crawler. These content includes movie title, 
director, genre, plot summary, cast, award and user comment. 
We have selected a subset of 466,245 includes 1,628 movies 
and 2,880 users with more than 100 rated items. We divided 
the dataset into a 90% for the training set and 10% for the test 
set.  
The quality of recommendation is evaluated by Mean 
Absolute Error (MAE). MAE is a widely applied metric. It can 
be defined as the average absolute difference of predictions 
from the real users’ ratings. In our experiments, we computed 
the MAE on the test set for each user (in (7)) Then averaged 
over the test set (in (8)). A smaller value means a better 
performance [10]. 
     
n
r - ar
  MAE
i
n
1j
ji,ji,
i
i?
=
=
 (7) 
 
m
m
1i i
MAE
   MAE
?
=
=  (8) 
A. Parameter Settings 
There are three major parameters in the proposed 
mechanism: (1) the timeframes size in section I and subsection 
A. (2) The threshold ? used to determine the correlation of user 
interests in different timeframes. (3) The decay rate ? in (5). 
We conduct a series of preliminary experiments to find the 
optimal performance obtained for each parameter when the 
value of other is constant.  
1) Experiment (1): impact of the Timeframe size 
In the first experiment, we change the timeframe size from 
1, 2, and 3 to 4 months. The impact of using different values is 
demonstrated in Figure 2. This parameter value depends on the 
speed of the users interest change. It is found that timeframe 
size dramatically influences the performance of the algorithm. 
It’s necessary to assign different values to this parameter to 
obtain the best performance. When the speed of changes is 
high, the size must be selected smaller. 
2) Experiment (2): impact of ? 
We vary values of ? to evaluate its influence on the 
performance of algorithm. Results are showed in figure 3. As 
                                                          
1  www.imdb.com 
741
we can see from the results, MAE values increase with ?. 
Recall that, in Section II, if the similarity of two interests is less 
than ?, it means a drift occurs. So, when ? increases, more 
interest drifts will determine. It is while that two interests may 
be similar but when the value of ? is larger, they may consider 
distinct. Therefore it seems reasonable that the higher value of 
? causes the higher value of MAE is. 
3) Experiment (3): impact of ? 
To experimentally determine the impact of the decay rate 
on the quality of the prediction, we selectively vary the 
parameter ? to 0.05, 0.02, and 0.01. The higher the value of ? 
in (5), the faster old data decays and the lower the importance 
of the historical information compared to more recent data. Fig. 
4 shows the MAEs of the proposed algorithm in different 
cases. 
B. Overall Performance 
In order to demonstrate the efficiency of our algorithm, 
some experiments have been conducted. We evaluate the 
efficiency of our proposal from two aspects: (1) the impact of 
considering user’s interest evolution, and (2) the impact of 
detecting users’ interest drifting individually. Therefore, we 
compare results with the approach of [10] and the classic 
approach that did not consider other interests of active user in 
prediction. Ma, Li, Ding and Orlowska [10] used collaborative 
filtering with interest-drifting in which users have assumed to 
have similar interest-drifting over time. We re-implement this 
method and compare it with our approach. For second 
approach, we consider a classic weighted association rule 
mining where recommendation is done based on active session 
alone. Also, weights are only user ratings and no forgetting 
function used. Here, we called it C-WARM. The results are 
evaluated based on MAE metric and showed in figure 5. We 
can see that our proposed approach performs 6.80% better than 
[10] and 1.42% better than C-WARM. 
 
 
Figure 2.   The impact of timeframe size 
 
 
Figure 3.   The impact of threshold 
 
Figure 4.   The impact of decay rate 
 
 
Figure 5.   MAE using different algorithms on EachMovie 
 
IV. CONCLUSION AND FUTURE WORK 
In this paper, we developed a novel approach based on web 
mining techniques and interest-drifting which addresses the 
evolving nature of users’ needs in making recommendations. 
Our approach takes into account all related interests of the 
active user to making more accurate predictions. Also, it was 
able to detect user’s interest changes individually and assign 
weights to drifted preferences of users not to all of them to 
improve the existence methods. The proposed algorithm 
consists of five phases of (1) detecting interest changes 
individually, (2) calculating weights, (3) mining behavior 
pattern, (4) updating active user profile and (5) 
recommendation.  
We conducted experiments to evaluate the prediction 
quality on the EachMovie dataset and compared them with the 
approach of [10] and the classic approach that ignore other 
potential interest of user. The results show the proposed 
methodology has the better precision in both individually 
detecting users’ interest changes and address evolving nature of 
user interests. If a system is not aware of all interests of user its 
prediction will be poor. 
As future work, we intend to evaluate our methodology 
using other data set. Since the timeframe size has significant 
impact on the performance of our algorithm, it can be useful to 
employ heuristics methods to adapt its value for each customer. 
Also, we decide to use a time window like [18] to consider 
only recent profile of users instead of considering all their 
profile in making prediction, and apply adaption mechanism to 
adapt the size of window. 
REFERENCES 
[1] M.H. Dunham, Data Mining: Introductory and Advanced Topics, 
Prentice Hall, 2003, pp. 45-46. 
742
[2] H. Liu  and V. Kešelj, “Combined mining of Web server logs and web 
contents for classifying user navigation patterns and predicting users’ 
future requests,” Data & Knowledge Engineering, vol. 61, pp. 304-330, 
2005. 
[3] H. Ishikawa, T. Nakajima, T. Mizuhara, S. Yokoyama, J. Nakayama, M. 
Ohta and K. Katayama, “An intelligent web recommendation system: A 
web usage mining approach,” International Syposium on Methodologies 
for Intelligent Systems, Lyon, France, pp. 342–350, June 2002. 
[4] B. Zhou, S.C. Hui and K. Chang, “An intelligent recommender system 
using sequential web access patterns,” IEEE Conference on Cybernetics 
and Intelligent Systems, Singapore, pp. 1–3, September 2004. 
[5] Z. Zhang and O. Nasraoui, “Mining search engine query logs for social 
filtering-based query recommendation,” Applied Soft Computing, vol. 8, 
pp. 1326–1334, 2008. 
[6] S. Flesca, S. Greco, A. Tagarelli and E. Zumpano, “Mining User 
Preferences, Page Content and Usage to Personalize Website 
Navigation,” World Wide Web J., vol. 8, no. 3, pp. 317–345, 2005.  
[7] I. Koychev and I. Schwab, “Adaptation to drifting user’s interests,” 
ECML 2000 Workshop: Machine Learning in New Information Age, 
Barcelona, Spain, pp. 39–45, May 2000. 
[8] Y. Ding and X. Li, “Time weight collaborative filtering,” CIKM  
Proceedings of the 14th ACM international conference on Information 
and knowledge management, New York, NY, USA, ACM Press, pp. 
485–492,  November 2005.  
[9] K. Sugiyama, K. Hatano, and M. Yoshikawa, “Adaptive web search 
based on user profile constructed without any effort from users,” 
Proceedings of the 13th international conference on World Wide Web, 
New York, NY, USA, pp. 675- 684, Jun 2004. 
[10] S. Ma, X. Li, Y. Ding and M.E. Orlowska, “A Recommender System 
with Interest-Drifting,” Web Information Systems Engineering– WISE, 
Lecture Notes in Computer Science, vol. 4831/2007, pp. 633-642, 2007. 
[11] D. Godoy and A. Amandi, “Interest Drifts in User Profiling: A 
Relevance-Based Approach and Analysis of Scenarios,” The Computer 
Journal Advance, vol. 52, no. 7, pp. 771-788, 2009. 
[12] Y. Li and B.Q. Feng, “Page Interest Estimation Model Considering User 
Interest Drift,” 4th International Conference on Computer Science & 
Education, Shanghai,China, pp. 1893-1896, July 2009. 
[13] Y. Jing, X. Li and S. Zhoung. “Research on Personalized Services for 
Users of Education Resources Net,” Ninth International Conference on 
Hybrid Intelligent Systems Shenyang, LiaoNing, China, Computer 
Society, pp 195-197, August 2009. 
[14] S.H. Min and I. Han, “Detection of the customer time-variant pattern for 
improving recommender systems,” Expert Systems with Applications, 
vol. 28, pp. 189–199, 2005. 
[15] C.D. Manning, P. raghavan and H. Schutze, An Introduction to 
Information Retrieval, Cambridge University Press, 2008, pp. 22-32. 
[16] R. Forsati, M.R. Meybodi and A. Rahbar, “An Efficient Algorithm for 
Web Recommendation Systems,” IEEE/ACS International Conference 
on Computer Systems and Applications, Rabat, Morocco, pp. 579 – 586, 
March 2009. 
[17] N. Zhou, J.X. Wu, S.L. Zhang, H.Q. Chen, and X.R Zhang, “Mining 
Weighted Association Rules with Lucene Index,” Proc. of WiCom’07. 
Shanghai, China, pp. 3697-3700, September 2009. 
[18] CX. Xing, FR. Gao, S.N Zhan and L.Z. Zhou, “A Collaborative Filtering 
Recommendation Algorithms Incorporated with User Interest Change,” 
Journal of Computer Research and Development, vol. 44, no. 2, pp. 296-
301, 2007. 
 
 
 
 
 
743
