Design of Software Security Detection System Based 
on System Call Sequences 
Jingfeng Xue1, Changzhen Hu1, Kunsheng Wang2, Rui Ma1, Zhian Fan1
1School of Software, Beijing Institute of Technology, Beijing, 100081, China 
2China Aerospace Engineering Consultation Center, Beijing 100048, China 
xuejf@bit.edu.cn 
   
Abstract- The sequences of system calls can indicate the running 
behavior feature of application software, so it can be used in 
software security detection. In this paper, by researching and 
analyzing system call sequences in the process of software 
execution, a software security detection system based on system 
call sequences is designed. Basic system call sequences are mined 
by association rules, and then they are transformed to equivalent 
call sequence set to build knowledge base for software security 
detection. The experiment shows detection capability of the 
detection system is better by sufficient training data. 
Key words- Software Security, System Calls, Association Rules, 
Detection System 
I. INTRODUCTION
   With the application of all kinds of software in various fields, 
security problem of software is more and more important. The 
purpose of software security detection is to detect security 
problem in software, and improve security performance of 
software. [1] 
   There are two detection approaches: dynamic detection and 
static detection. In dynamic detection, outside appearance of 
software execution is used to detect security problem. In static 
detection, the code of software and its inner structure are 
concerned more. 
   In dynamic detection, it is necessary to identify whether 
running features of a software, e.g. execution process, 
resource usage, authority variety etc., are uniform with those 
in the normal situation. [2] There are two types of information 
generated in the process of software running: one is the 
published information by operation system or software, e.g. 
system running statistical information, program log, operation 
system log; the other is the information from interface of 
operation system, e.g. system calls, library function calls. [3] 
   It is usually easy to get the published information by reading 
log files or other files. But the information is less and its 
universality is not good. 
   On the contrary, it is complex to get the information from 
interface of operation system because some codes or module 
need to be added to the kernel of operation system. But the 
acquired data are accurate. There are two kinds of research 
methods in this field: analyzing system call sequences or 
library function call sequences. Researchers found that 
analyzing system call sequences to detect software security is 
more available than analyzing library function call sequences. 
[4] 
   In this paper, system call sequences in the process of 
software execution are researched and software security 
detection system (SSDS) based on system call sequences is 
designed. Moreover, we construct a detection knowledge base 
which can help the detection system to achieve detection 
function.
II. SYSTEM STRUCTURE
   Software security detection method in this paper is based on 
system call sequences and need to obtain system call 
sequences in the process of software execution. Only in kernel 
mode of operation system, system call sequences can be 
obtained, so we must modify kernel of operation system. 
Linux is a open platform and its performance is better, so we 
designed software security detection system based on Linux 
2.4. 
   The software security detection system (SSDS) consists of 
Data Collection Unit (DCU), Data Analysis Unit (DAU), 
Response Unit (RU), Management Unit (MU) and Knowledge 
Base (KB). System structure is shown in Figure 1. 
Figure 1. Structure of software security detection system 
A. Data Collection Unit 
   Data Collection Unit is used to obtain information of 
application software calling system calls, so it will run as a 
part of kernel. There are two tables, IDT and sys_call_table, in 
Linux kernel based on X86. IDT is called interrupt vector 
table. IDT records the address of interrupt processing function 
and it is managed by operation system. When an interrupt 
appears, CPU will find corresponding processing function by 
IDT and execute it. In the computer based on X86, abnormal 
97
and nonmaskable interrupt processing function are recorded in 
item 0 – 31 of IDT, maskable interrupt processing function is 
recorded in item 32 – 47, and software interrupt processing 
function is recorded in item 48 – 255. In Linux, only item 
0x80 is entrance of system calls and function system_call is 
put in. This function finds out actual system call processing 
function by another table sys_call_table. For example, when 
function open is called by a program of C Language, actual 
call process is shown in Figure 2. 
Figure 2. Process of application software calling system calls 
   In order to get information of system calls before function is 
processed, Data Collection Unit need to be inserted in IDT or 
sys_call_table. We modify all address of processing functions 
in sys_call_table to the address of data collection function. 
Thus, when a system call is called by application software, 
data collection function will be executed firstly by kernel and 
then original processing functions are executed. So, data 
collection is finished. For example, when function open is 
called by a program of C Language, renewed call process is 
shown in Figure 3. 
Figure 3. Process of application software calling system calls with data 
collection function 
   Data Collection Unit is designed as Linux Kernel Module 
(LKM). When the module is loaded, functions which need to 
be finished includes: backuping table sys_call_table, 
modifying table sys_call_table and renewing all item by 
ssds_collect, adding support /dev/ids. When the module is 
unloaded, functions which need to be finished includes: 
canceling support /dev/ids, restoring table sys_call_table. 
There is a monitoring program table in Data Collection Unit 
which records process number of all program which be 
monitored. 
B. Data Analysis Unit 
   In order to make the software security detection system 
works normally, we need to train it firstly to generate the 
knowledge to knowledge base. In training mode, no detection 
is done by Data Analysis Unit. Data Analysis Unit read system 
call records from /dev/ids directly and write them to data file 
to generate detection knowledge for use. 
   When the software security detection system is used 
practically, the knowledge base is not empty. Data Analysis 
Unit will match system call records from /dev/ids and the 
knowledge in knowledge base. If mismatch degree is greater 
than a threshold, it will send alarm to Response Unit. 
   Data Analysis Unit must read data from device /dev/ids as 
soon as possible because storage space of the kernel is limited 
and Data Collection Unit can only save recent generated call 
records. Data Analysis Unit runs in user space and its storage 
space is relatively large, so reading data takes precedence of 
analyzing data. 
C. Management Unit 
   The software security detection system can finish software 
security detection function independently. Management Unit 
is used to manage and config the system and its management 
function includes: reading configuration file, starting and 
closing the system.  
D. Response Unit 
   The software security detection system can responses 
security events by Response Unit. Possible response includes: 
sending alarm to manager, restarting or closing software 
automatically, recording log, etc. Actually response method is 
configed in advance by manager according to essentiality and 
characteristic of monitored software. For example, when the 
detection system detect out abnormal FTP service software, it 
can restarting or closing the software directly. But for a Web 
or database service software, the system should keep it run 
unceasingly and inform the event to manager to treat with it.
III. CONSTRUCTING KNOWLEDGE BASE 
   In order to construct knowledge base, basic system call 
sequences in program must be found firstly. Basic sequence is 
sub call sequence which appears frequently in the process of 
software execution. [5] 
   For the following codes: 
f1;
if(bar1){ 
  f2; 
  f3; 
}
else { 
  f4; 
  f5; 
}
f6;
   Two system call sequences, ”f1, f2, f3, f6” and ”f1, f4, f5, 
f6”, can be generated. When the code segment is executed 
repeatedly, these two call sequences will appear frequently. 
98
They represent two execution branch of the program, so they 
are basic system call sequences. 
A. Obtaining Basic Sequence by Association Rule 
   There is strong correlation among basic sequences. In order 
to obtain these basic sequences with strong correlation, 
association rules mining can be used. In this paper, we use 
Apriori algorithm to mine basic sequences from call sequences, 
and then construct knowledge base by these basic sequences. 
[5] 
£¤1£'Constructing Call Itemset 
   First, by a sliding window whose size is N, system call 
sequences are decomposed to multiple shorter sequences 
whose length is N and form call sequence set. For example, 
when N is 3, call sequence set {abc¡¢bcd¡¢cde¡¢def} can be 
generated by system call sequence ”abcdef”. We can obtain 
longer basic sequence by connecting two shorter basic 
sequences. Then, we combine call serial number and its 
position serial number for every sequence. Upon that, the 
sequences are transformed to item which can be used in data 
mining and the sequence sets are transformed to itemset. For 
example, call sequence ”abc” can be transformed to item 
£ßa1,b2,c3£ . Thus, the same system call in different position 
corresponds to different item. 
£¤2£'Mining Association Rules by Apriori Algorithm 
   There are 3 steps to mine association rules by Apriori 
algorithm: ¢ Generate all frequent itemsets whose support is 
larger than the minimum support value. ¢ For each frequent 
itemsets, generate all rules whose confidence is larger than the 
minimum confidence value. E.g. for a frequent itemset L and 
its subset S(S  L), if sup(L)/sup(L-S) ¡ the minimum 
confidence, the rule, L-S=>S, is an effective association rule. 
¢ Transform the rule to basic sequence by its position 
information. E.g. the association rule ”a1, b2=>c4” can be 
transformed to basic sequence ”p1=a, p2=b, p4=c”. 
£¤3£'Deleting Redundant and Invalid Sequence Based Axis 
Attribute 
   In call itemset, the 2nd to the Nth of a call sequence are the 
same with the 1st to the (N-1)st of the next call sequence. So 
there are some redundant basic sequences. Moreover, field 
knowledge has not been considered in basic Apriori algorithm, 
so there may be some invalid rules. Therefore, we delete 
redundant and invalid sequence by axis attribute and only 
remain those basic sequences which are relevant with axis 
attribute. 
B. Constructing Knowledge Base by Basic Sequences 
   Call relations can be reflected distinctly by basic call 
sequences. But it is not easy to perform matching operation. 
So we need transform it to corresponding equivalent call 
sequence set. Every item in call sequence set is represented by 
regular expression. [5] 
   Call relations in Figure 4 is equivalent to 3 call sequences as 
follows: 
Figure 4. An example of call relations 
S1=”EN, C1, C2, PN, C3, EN” 
S2=”EN, C1, PN, PN, C3, EN” 
S3=[[S1]*[S2]*]+ 
   There are several nodes and edges which record the relation 
of system calls in Figure 4. Each node represents a system call. 
Pseudo node (PN) is single wildcard and it represents only one 
system call. End node (EN) is multiple wildcard and it 
represents 0 or more system calls. The edges represent 
successive call sequence. We can use serial number of system 
call to represent a node. [5] 
   The equivalent call sequence set represented by regular 
expression is the knowledge of the knowledge base.
IV. DETECTING PROCESS OF SOFTWARE SECURITY
   Firstly, we define mismatch degree as the minimum 
mismatch call number between actual call sequences and 
every sequence in equivalent call sequence set by regular 
expression. [5] 
   For example, there are call sequence set as follows: 
S1=”EN, C1, C2, PN, C3, EN” 
S2=”EN, C1, PN, PN, C3, EN” 
S3=[[S1]*[S2]*]+ 
   Suppose a call sequence, ”C1, C2, C2, C3”, is obtained in 
real running process. It can match either S1 or S2, so the 
mismatch degree is 0. If a call sequence ”C1, C2, C3, C4” is 
obtained. There is 1 mismatch between this sequence and S1 
or S2, so the mismatch degree is 1. In normal situation, call 
sequences generated by software should match equivalent call 
sequence in knowledge base or has a very small mismatch 
degree. If mismatch degree is greater than a threshold, it 
shows software execution is not normal and security problem 
appears. 
   When the software which is detected calls system calls, 
system will be in kernel mode. Current system call number is 
obtained from kernel by Data Collection Unit and is 
transmitted to Data Analysis Unit. Data Analysis Unit 
performs match operation between current system call and call 
sequences in knowledge base and detect their mismatch 
degree. If mismatch degree is greater than certain threshold, it 
will inform Response Unit. After getting abnormal data, 
Response Unit will report to Management Unit by 
management interface and execute corresponding response 
operation.
V. CONCLUSION
   It is a main approach for operation system to serve for user 
by system calls, so there has great advantage to detect 
software security by analyzing system calls. In this paper, we 
design a software security detection system based on system 
99
call sequences. In the system, basic sequences can be mined 
using system call sequences by association rules and can be 
transformed to equivalent call sequence set to construct 
knowledge base, and then software security detection function 
can be implemented. Experiment shows the software security 
detection system has better detection capability with enough 
training data and the veracity of detection result is higher by 
using appropriate mismatch threshold. So, the software 
security detection system is valid. 
ACKNOWLEDGMENT
   This paper is supported by the National High-Tech Research 
and Development Plan of China under Grant 
No.2009AA01Z433. 
REFERENCES
[1]   YS. Chao, QM. Zheng, “Model-based security prediction and analysis of 
software,”  Computer Engineering and Design, vol 29(14), pp.3669-
3672, 2008. 
[2]   Sean Barnum , Gary McGraw. Knowledge for Software Security, IEEE 
Security and Privacy, v.3 n.2, p.74-78, 2005 
[3]   A. Main, P.C. van Oorschot. Software Protection and Application 
Security: Understanding the Battleground. International Course on State 
of the Art and Evolution of Computer Security and Industrial 
Cryptography, Heverlee, Belgium, Springer LNCS, 2003 
[4]   Jimin Li, Zhen Li, Kunlun Li. Detection and Classification of 
NonselfBased on System Call Related to Security, Journal of 
Computers,vol 4(11), p.1117-1124, 2009 
[5]   JF Xue, CZ Hu, KS Wang. Constructing a Knowledge Base for 
software Security Detection Based on Similar Call Graph Proceedings 
of the 2009 International Conference on Computer and Electrical 
Engineering, ICCEE 2009, p 507-510, 2009 
100
