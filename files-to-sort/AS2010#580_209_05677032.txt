Mining Direct and Indirect Association Patterns with Multiple Minimum Supports 
 
Weimin Ouyang, Qinhua Huang 
Modern Education Technology Center 
Shanghai University of Political Science and Law 
Shanghai 200438, China 
 
 
Abstract—Association rules mining is one of the important 
tasks in data mining research. The key of mining association 
rules is to find out frequent itemsets based on the user-
specified minimum support threshold, which implicitly 
assumes that all items in the data have similar frequencies. 
This is often not the case in real-life applications. If the 
frequencies of items vary a great deal, we will encounter the 
dilemma called the rare item problem. In this paper, an 
efficient algorithm to discover association patterns with 
multiple minimum supports is proposed. The algorithm can 
not only discover association patterns forming between 
frequent items, but also discover association rules forming 
between requent items and rare items or among rare items 
only. Moreover, an algorithm for mining direct and indirect 
association patterns with multiple minimum supports is 
designed simultaneously. 
Keywords-association patterns; multiple supports; data 
mining;  
I.  INTRODUCTION 
The association rule is an important topic in the data 
mining and knowledge discovery research field. A large 
number of algorithms have been proposed to improve the 
running time for generating association rules and frequent 
itemsets since the problem was pointed out by R. Agrawal in 
1993 [1][2]. 
With the further research on the mining of frequent 
patterns, it has been recognized that some infrequent patterns 
can provide very useful insight view into the data set, and a 
new kind of knowledge discovery problems called as indirect 
associations has been proposed [3]. Consider a pair of item x 
and y, which are rarely present together in the same 
transaction. If both items are highly dependent on the 
presence of another itemsets M, then the pair of x and y is 
said to be indirectly associated by M called as mediator. 
Since the indirect association patterns discovery problem 
has been proposed, we call traditional association rules as 
direct association patterns for convenience in this paper.  
The key of mining both of direct and indirect association 
patterns is to find out frequent itemsets based on the user-
specified minimum support threshold, which is used to prune 
the search space and to limit the number of rules generated. 
Just like pointed out with Liu [4], using only a single 
minimum support threshold implicitly assumes that all items 
in the data have similar frequencies in the database. This is 
often not the case in real-life applications. In many 
applications, some items appear frequently in the data, while 
others appear rarely. If the frequencies of items vary a great 
deal, we will encounter the dilemma called as the rare item 
problem. If minsup is set too high, we will not find those 
rules that involve rare items in the data. If minsup is set too 
low in order to find rules that involve both frequent and rare 
items, it will cause combinatorial explosion because those 
frequent items will be associated with one another in all 
possible ways and many of them are meaningless. In order to 
deal with the rare item problem, Liu [4] extend the existing 
association rule model to allow user to specify a different 
minimum item support for each item, which is calculated for 
each item based on the percentage of its support. This 
percentage-based approach can improve the performance 
over single minsup based approaches [4]. However, it still 
suffers from both “rule missing” and “rule explosion” 
problems because the minimum item support for each item is 
calculated by its support multiplied with a uniform 
percentage. If minsup for the item is fixed by setting the 
percentage value high, the rare itemsets are missed as the 
minsup for the rare items becomes close to their support, and 
if minsup for the item is fixed by setting the percentage value 
low, the number of frequent itemsets explodes. In other 
words, the association rules model with the percentage-based 
multiple minimum supports has the same rare item problem 
with the existing association rule model with a single 
minimum support.  
In order to resolve this dilemma, we use a monotonous 
decreasing power function such as 
x
1
instead of the 
constant percentage to multiply with the support of each item 
for calculating the minimum item support. By doing so, the 
difference between the minimum item support for each item 
and its support will vary in a satisfying way. For the frequent 
items, the difference is small; for the rare items, the 
difference is large. Thus, the minimum item support for 
frequent item is slightly less than its support, and the 
minimum item support for rare item is much lower than its 
support. The number of frequent itemsets will not explode; 
the rare itemsets will not be missed. 
A mining algorithm proposed in this paper is to discover 
both direct and indirect association patterns with multiple 
minimum supports. The algorithm is different from existing 
indirect association patterns discovery algorithms in two 
aspects. Firstly, we use infrequent itemsets to find indirect 
association patterns. Secondly, the algorithm is designed to 
978-1-4244-5392-4/10/$26.00 ©2010 IEEE
find both direct and indirect association patterns with 
multiple minimum supports. The overall efficiency of our 
algorithm has been improved. 
  The paper is organized as follows. The definitions for 
indirect association pattern and multiple minimum supports 
are given in Section 2. In Section 3, we describe how to find 
both direct and indirect association patterns with multiple 
minimum supports, and Section 4 presents our experimental 
results. The conclusion and future works are made in the last 
section. 
II. PROBLEM DEFINITION 
A.  Definition of indirect association 
Let I = {i1, i2, … ,im} be a set of literals called items. Let 
the database D = { t1, t2, … ,tn } be a set of n transactions, 
where each transaction is a subset of I. A non-empty subset 
of I is called itemset. An itemset containing k items is called 
k-itemste. The support of an itemset X denoted as sup(X) is 
defines as the fraction of all transactions containing X in D. 
An itemset is frequent if its support is greater than a user-
specified threshold minimum support.  
    Definition 1: A pair of items x and y is said to be 
indirectly associated via a mediator sequence M, if the 
following conditions are satisfied: 
(1) sup({x,y})<ts; 
(2) There exists a non-empty set M such that: 
(a) sup({x}?M)>=tf, sup({y}?M)>=tf, 
(b) dep({x},M)>=td, dep({x},M)>=td, where 
dep(A,B) is a measure of the dependence 
between itemsets A and B. 
The thresholds ts, tf and td are called itempair support 
threshold, mediator support threshold, and dependence 
threshold, respectively. We usually set tf >= ts in practice. 
In this paper, we use the denotation x?y(M) to represent 
the indirect association pattern between item x and y via 
mediator M, and use the IS measure [5] as the dependence 
measure for condition 2(b). Given a pair of itemsets A and B, 
its IS measure can be computed as the following equation: 
)()(
),(),(
BPAP
BAPBAIS
×
=  
where P represents the probability that the given itemsets 
appears in the transaction database. 
A typical algorithm for mining indirect association 
patterns is shown as follows.  
Algorithm: INDIRECT for Mining indirect 
associations 
1. Discover all frequent itemsets L1 , L2 ,… , Ln 
using Apriori, Lk (k=1,2, … ,n)where is the 
set of all frequent i-itemsets. 
2. SIA = ?; //set of indirect associations 
3. for k = 2 to n { 
4.    Ck+1 = join(Lk, Lk); 
5.    for each <x, y, M> ? Ck+1 { 
6.       if (sup(x, y)<ts AND dep({x},M)>=td 
AND dep({x},M)>=td) 
7.         SIA = SIA ? {<x, y, M>}; 
8.       } 
9.    }  
 
The algorithm is divided into two major phases: (1)get all 
frequent itemsets using Apriori (step 1); (2) discover all 
indirect associations by candidate generation (step 4) and 
candidate pruning (step 5~8).During the candidate 
generation step, frequent itemset Lk is used to generate 
candidate indirect associations Ck+1 for pass k+1.Each 
candidate in Ck+1 is a triplet <x,y,M>, where x and y are the 
items which are indirectly associated by mediator M. Ck+1 is 
generated joining the frequent itemsets in Lk. During the 
join, a pair of frequent itemsets {x1,x2, … , xk} and { y1,y2, 
… , yk } are joinable if the two itemsets have exactly k-1 
items in common.If so,they generate a candidate indirect 
association <x, y, M>, where x and y are the different 
items,one from each k-itemset, and M is the set of common 
items. For example, two itemsets {a,b,c,d} and {a,b,d,e} can 
be joined together to generate a candidate indirect 
association <c,e,{a,b,d}>. Since the candidate indirect 
associations are generated by joining two frequent itemsets, 
they certainly satisfy the mediator support condition. 
Therefore, in the candidate pruning step,only the itempair 
support condition and mediator dependence condition are 
needed to be checked. 
There are two join steps in the INDIRECT algorithm. 
One is in the first phase for generating the candidate frequent 
itemsets using Apriori. In Apriori, the join step is used to 
generate candidate frequent itemsets for pass k+1 from the 
frequent itemsets in Lk. The other join step is for generating 
indirect associations Ck+1 from Lk. Both the two join steps 
are quite expensive. Qian Wan argued in [4] that the join step 
for generating indirect associations is more expensive than 
the one in Apriori because the items in an indirect itempair x 
and y do not have to be the last item ni each frequent itemset. 
In fact, we can sort all itemsets in lexicographic order just 
like doing in Apriori, then combines the two itemsets that 
have identical k-1 prefix items. If doing so, some frequent 
itemsets may not be used to generate candidate indirect 
association, but the candidate indirect association between 
the same itempair will also be generated, the only difference 
is the mediators of the two candidate indirect association are 
different. For example, two itemsets {a,b,c,d} and {a,b,d,e} 
can not be joined together to generate a candidate indirect 
association <c,e,{a,b,d}> since they do have identical 3 
prefix items. However, two itemsets {a,b,c} and {a,b,e} can 
not be joined together to generate a candidate indirect 
association <c,e,{a,b}> since they do have identical 2 prefix 
items. With the view of intuition, the indirect association 
created by minor mediator is more practical in the real 
applications. Based on this observation, the core operations 
of the two join steps in the INDIRECT algorithm can be the 
same. So, we can discover the indirect associations between 
itempairs while mining the frequent itemsets with Apriori 
algorithm, and put forward a mining algorithm to find both 
direct and indirect associations.  
B.  Definition of multiple minimum supports 
In multiple minimum supports model, every item ij of the 
itemset I={i1,i2,....,im} has been assigned a minimum item 
support based on its support value sup(ij), denoted as 
mis(ij),and LS is denoted as least minimum support. 
Definition 2: the minimum item support of an item ij is 
defined as  
  
otherwise          
LS )m(i if      )(
)( j
??
? >
=
LS
im
imis jj  
)sup(
1)sup()(
j
jj i
iim ?=  
Definition 3: the minimum support for an itemset X is 
the minimum of minimum support of the items contained in 
the itemset, denoted as mis(X). 
Definition 4: An itemset X is said to be frequent if 
)()sup( XmisX ? . 
III. MINING BOTH DIRECT AND INDIRECT ASSOCIATION 
PATTERNS MULTIPLE MINIMUM SUPPORTS 
According to the definitions of direct association and 
indirect association multiple minimum supports, and based 
on the observation about candidate indirect association in last 
section, we put forward a algorithm to discover both direct 
and indirect association patterns multiple minimum supports, 
denoted as MDIAPMS. 
The algorithm generates frequent itemsets by making 
multiple passes over the data set. However, in contrary to 
single minsup approaches which follow “downward closure 
property” (all the subsets of a frequent itemset are frequent), 
multiple minimum support approaches follow “sorted 
closure property” [4]. Let Ck denote the set of candidate k-
itemset and Fk denote the set of frequent k-itemset. Note that 
the items in an itemset are arranged in increasing order of 
their MIS values from left to right.  
Algorithm:MDIAPMS (Mining both direct and indirect 
association patterns with multiple minimum supports) 
 Input:database D: least minimum support: LS; itempair 
support threshold: ts ; mediator support threshold: tf ; 
dependence threshold and td 
   Output:Set of direct association patterns: SDA;Set of 
indirect association patterns: SIA; 
Begin 
(1) FreS = ? ; InFreS = ?; 
(2) C1 = {candidate 1-itemset}; 
(3) For each item c ? C1   do 
)sup(
1)sup()(
c
ccm ?= ; 
(4) If m(c)<LS mis(c) = LS Else mis(c) = m(c); 
(5) F1={ c| c ? C1 ? sup(c)>=mis(c)};  
(6) F1 = sort(F1, MIS); 
(7) FreS = FreS ? F1; S1= ?; 
(8) For (k=2;Fk-1 ? ? ;k++) { 
(9)      Ck = Candiate_Gen(Fk-1); 
(10)      For each transaction t in D do { 
(11)         Tempt = k-itemsets in both t and Ck; 
(12)         For each itemset i in Tempt do 
i.count++; 
(13)         }; 
(14)      Fk = {c| c ? Ck ? sup(c)>= mis(c)}; 
(15)      Sk = Ck ? Fk; 
(16)      for each S ? Sk { 
(17)        x = last_item(S); y = secondlast_item(S 
); M = S – {x,y}; 
(18)        if (sup(x, y)<ts AND dep({x},M)>=td 
AND dep({x},M)>=td) 
(19)         SIA = SIS ? {<x, y, M>}; 
(20)        } 
(21)     FreS = FreS ? Fk;  
(22)     } 
(23)  SDA = Construct(FreS); 
End. 
 
IV. EXPERIMENTAL RESULTS 
To study the performance of our proposed algorithms we 
have done several experiments. The computation 
environments are Pentium 3.0GHz, memory of 2G, operating 
system of Windows XP. The algorithm MDIAPMS and 
INDIRECT are implemented with C++. The synthetic 
experiment data set is generated by Assocgen [2] program of 
IBM Almaden research center. The meanings of used 
parameters are showed in Table 1. 
TABLE I.  PARAMETERS 
Symbol Meaning 
D Number of customers(=size of database) 
T Average number of items per Transaction 
I Average size of Items in maximal potentially 
large sequences 
L Number of maximal potentially large Itemsets 
N Number of items 
 
We set parameters C=10, T=5, I=2.5, L =2500, N 
=10000, total number of customers D=100000, and the 
generated dataset is named as C10T5I25. Figure 1 shows the 
algorithm executing time variance with least support 
decreasing from 1% to 0.2%, where the min_interest is set to 
70%, itempair support threshold ts, mediator support 
threshold tf and dependence threshold and td are set to 5%, 
70% and 80%, respectively. It demonstrates that the 
algorithm increases with the declining of min_supp(or least 
minimum support).  
C10T5S4I25
0
5
10
15
1 0.8 0.6 0.4 0.2
Mininum Support
Ru
n 
ti
me
(s
)
MDIAPMS
INDIRCET
 
Figure 1.  Execution times. 
To examine the scalability of algorithm we increased the 
numbers of customer D from 50,000 to 150000, with LS 
=1%, min_interest =70%. The itempair support threshold ts, 
mediator support threshold tf and dependence threshold and 
td are set to 5%, 70% and 80%, respectively. The results are 
shown in Figure 2. The executing time is increased almost 
linearly with the increasing of dataset size. It can be 
concluded our algorithm has a good scalable performance. 
C10T5S4I15
0
2
4
6
8
10
50 75 100 125 150
Number of Customers
Ru
n 
ti
me
(s
)
MDIAPMS
INDIRCET
 
Figure 2.  Scale-up: Number of customers 
V. CONCLUSION AND FUTURE WORKS 
A mining algorithm to discover both direct and indirect 
association patterns with multiple minimum supports from 
large transaction databases is proposed in this paper. We 
have compared the algorithm with the previously known 
INDIRECT algorithm using synthetic data set. The 
experiments demonstrated that the algorithm is efficient and 
scalable, and outperforms the INDIRECT algorithm. 
In the future, we will study how to find both direct and 
indirect fuzzy association patterns by using fuzzy set theory. 
Incremental algorithm for mining both direct and indirect 
association patterns from evolving transaction databases is 
also an interesting research work. 
REFERENCES 
[1] Agrawal R,Imielinski,and Swami,A. Mining association rules 
between sets of items in large databases. In the Proc. Of the ACM 
SIGMOD int’l Conference on Management of Data,pp.207-
216,Washington D.C.,USA(1993). 
[2] Agrawal R,Srikant R. Fast Algorithms for Mining Association Rules 
In the Proc. of the 20th International Conference on VLDB. Santiago, 
1994. 487~499.  
[3] P.N.Tan and V.Kumar. Indirect Association: Mining Higher Order 
Dependences in Data. Proc. Of the 4th European Conference on 
Principles and Practice of Knowledge Discovery in Databases,pp632-
737,Lyon,France(2000). 
[4] Liu, B., Hsu, W., and Ma, Y. Mining Association Rules with Multiple 
Minimum Supports. SIGKDD Explorations, 1999,pp.337-341. 
[5] Piatetsky-Shapiro G. Discovery,Analysis and Presentation os Strong 
Rules, Knowledge Discovery in Databases,AAAI/MIT,Menlo 
Park,CA,1991,pp.229-248. 
