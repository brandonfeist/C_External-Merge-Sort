Mining Frequent Patterns from Software Defect Repositories for Black-box Testing
Ning Li, Zhanhuai Li and Lijun Zhang
School of Computer Science and Technology
Northwestern Polytechnical University
Xi’an, China
Email: {lining, lizhh, zhanglijun}@nwpu.edu.cn
Abstract—Software defects are usually detected by inspec-
tion, black-box testing or white-box testing. Current software
defect mining work focuses on mining frequent patterns with-
out distinguishing these different kinds of defects, and mining
with respect to defect type can only give limited guidance
on software development due to overly broad classification of
defect type. In this paper, we present four kinds of frequent
patterns from defects detected by black-box testing (called
black-box defect) based on a kind of detailed classification
named ODC-BD (Orthogonal Defect Classification for Black-
box Defect). The frequent patterns include the top 10 conditions
(data or operation) which most easily result in defects or severe
defects, the top 10 defect phenomena which most frequently
occur and have a great impact on users, association rules
between function modules and defect types. We aim to help
project managers, black-box testers and developers improve
the efficiency of software defect detection and analysis using
these frequent patterns. Our study is based on 5023 defect
reports from 56 large industrial projects and 2 open source
projects.
Keywords-association rules; frequent itemsets; software de-
fect; black-box testing; defect classification
I. INTRODUCTION
In software development, managers, developers or testers
often try to find some interesting patterns from defect reports
in order to improve their software quality. It is difficult
to analysis these defects manually for the lager number
of defects. Therefore, frequent pattern mining [1] from
defect repositories has started playing an important role in
software defect detection and analysis. In frequent pattern
mining, frequent itemsets and association rules mining are
two important research topics.
Associated defects are very common in large defect
repositories. The correlation of defects can be divided into
two types: lateral correlation and longitudinal correlation.
We call it lateral correlation if the same type of defect
occurred in a function, may occur in other similar functions.
And longitudinal correlation means if some types of defect
occurred in a function, may affect the other associated
function modules due to the close relationship of these
function modules. To detect and remove the correlation
defects, it is essential to extract the association rules of
function modules and defect types using association rules
mining.
As we known, defects are usually detected by inspection,
black-box testing or white-box testing. In these three ap-
proaches, the black-box testing is used more widely than
inspection and white-box testing in different software devel-
opment activities, thus frequent pattern mining from black-
box defect repositories are vital for software development.
Current software defect mining works haven’t distinguished
these different kinds of defects, but the feature of defects
detected by these approaches is very different.
In this paper, we aim to mining frequent patterns from
black-box defect repositories based on ODC-BD (Orthog-
onal Defect Classification for Black-box Defect) [2]. We
collect 5023 defect reports from 56 large industrial projects
and 2 open source projects. In this paper, we refer to the
defect that detected by black-box testing as the “black-box
defect”.
This paper is organized as follows. In Section II, we give
a brief overview of some existing related frequent pattern
mining work. Section III introduces the background of ODC-
BD and related concepts. In Section IV, we describe our
study about frequent itemsets and association rules mining
from black-box defects, and report the experiment result
that mainly includes four kinds of frequent patterns. Finally
Section V concludes the paper and outlines further work.
II. RELATED WORK
Frequent pattern mining has been a focused theme in
datamining research for over a decade. It was first proposed
by Agrawal et al. for market basket analysis in the form
of association rule mining [3]. Since the first proposal of
this new data mining task and algorithms, there have been
hundreds of follow-up research works [1], [4], [5].
Frequent itemsets mining is a basic issue in frequent
pattern mining. There are three basic frequent itemsets
mining methodologies: Apriori [6], FP-growth [7] and Eclat
[8]. Many other mining methodologies extended from these
three methods. Apriori principle and apriori algorithm was
firstly introduced by Agrawal et al in 1993. Compared with
Apriori, FP-growth method proposed by Han et al. mines
the complete set of frequent itemsets without candidate
generation, thus the cost of space and time was reduced.
Both the Apriori and FP-growth methods mine frequent
patterns from a set of transactions in horizontal data format,
978-1-4244-5874-5/10/$26.00 ©2010 IEEE
Table I
ATTRIBUTES OF ODC-BD
Attribute Description
Function Module Indicates associated function mod-
ule names.
Defect Type Indicates the type of the defect
phenomenon ,operation or data.
Age Indicates the history of the defect.
Quality Characteristics Indicates software quality charac-
teristics which the defect affected.
Property Indicates the defect is bug or just
enhancement.
Processing Priority Indicates which defect reports
should be handled firstly.
Influence Degree Indicates the influence of the defect
on the user.
Zaki proposed Equivalence CLASS Transformation (Eclat)
algorithm by exploring the vertical data format.
In recent years, mining software repositories have become
an important area of frequent pattern mining. Song et
al. mined associations rules using defect data [9]. They
focused on defect type and defect correction effort. They
applied the proposed methods to the NASA SEL defect
data set. In the SEL Data, the defects are divided into
six types: Computational, Data value, Internal interface,
External interface, Initialization and Logic/control structure
defect. They resulted in a total of 60 sets of rules with respect
to defect type, but the rules can only give limited guidance
for software developers due to the overly broad defect types.
None of the above-cited studies contained frequent pattern
mining for black-box defects. To provide more detailed
guidance to detect black-box defects for black-box testers
and assist project managers in allocating testing resources,
we present frequent itemsets and association rules in black-
box defect based on ODC-BD in this paper.
III. BACKGROUND
A. Black-box Defect Classification Scheme: ODC-BD
We mining frequent patterns from black-box defects
which are classified according to a kind of classification
scheme named ODC-BC. ODC-BD is designed for analyz-
ing software black-box defect for black-box tester. Table I
lists all attributes of ODC-BD.
The defect type classification of ODC-BD is composed
of four levels. The top level is composed of five categories:
Function Defect, System Defect, Data Defect, Interface
Defect, Specific Defect. In total, there are 300 detailed defect
types for black-box defect. The detailed values of defect type
are listed in [2]. In this paper, we focus on frequent patterns
related to defect type.
B. Related Concepts and Mining Algorithm
Let I = {i1, i2, ..., ik} be a set of items. A subset of I
is called an itemset or a k-itemset if it contains k items.
Let a database D = {d1, d2, ..., dm} be a set of transactions
in the database. Each transaction in D contains a subset
of the items in I . Frequent itemset A means the support
(supp(A)) is greater than some user-specified minimum
support threshold. And supp(A) is defined as the probability
of transactions in the D which contains A.
An association rule is an expression A ? B, where
A ? I , B ? I , and A ? B = ?. The interestingness of an
association rule is measured by both support and confidence,
which respectively reflect the usefulness and certainty of the
rule. For a certain rule A ? B, the support supp(A ? B)
is defined as the probability of transactions in the D which
contains both A and B (1), and the confidence of this rule
is defined as the conditional probability of transactions in
the D which contains B given has already contained A (2).
supp(A? B) = P (A
?
B) (1)
conf(A? B) = P (B|A) = supp(A? B)
supp(A)
(2)
In our study, we mining frequent itemsets and association
rules using basic Apriori algorithm. The essence of the
Apriori algorithm is: a k-itemsets is frequent only if all
of its sub-itemsets are frequent. This implies that frequent
itemsets can be mined by first scanning the database to find
the frequent 1-itemsets, then using the frequent 1-itemsets
to generate candidate frequent 2-itemsets, and check against
the database to obtain the frequent 2-itemsets. This process
iterates until no more frequent k-itemsets can be generated
for some k. The detailed algorithm is described in [6].
IV. EXPERIMENT
A. Defect Data
We collect 5023 defect reports from industrial projects
and open source projects. The defect data can be divided
into three groups: defects of industrial projects in which we
work as a professional tester, defects of industrial projects in
which we work as a developer and defects of open source
projects. Carrying out the study on these various projects
helps to generalize our conclusions.
We select 3634 black-box defect reports distributed in 56
industrial projects over more than 10 years. The industrial
projects involve many different types: software project de-
velop management, video processing, storage management,
software development environment, job management (mid-
dleware), network monitoring, etc. They are developed by
different language (java, c, c++, c#, asp.net, jsp, vb, etc) and
executed on diverse platform (Windows, Unix, Linux). Some
software has GUI (Graphical User Interface), but some only
has command line user interface.
We also selected 1389 black-box defect reports in last
one year from two large open source projects: the Eclipse
Table II
CLASSIFICATION SAMPLE: DEFECT TYPE
BugNo Conditions Results
443 C113; C197 R212; R226
project1 and the Firefox project2. To remove invalid defect
reports for us, we add “resolution” to bug search condition,
we only filtered defects that their resolution is “FIXED” or
“WONTFIX”. As we known, the bug report of open source
projects can be submitted by anyone, so bug may be detected
by white-box testing (or code level), may be detected by
black-box testing (or non-code level). We remove non black-
box defects manually.
These original bug reports include a succinct summary, a
longer free-text description (which may include conditions
and steps to reproduce it, or information from the error
messages/logs, core dumps) and some other attributes such
as tester, test date, status, etc.
B. Methodology
The objective of the study is to discover software defect
frequent patterns with respect to defect type from historical
software defect repositories.
For this purpose, firstly, we classified these 5023 black-
box defect reports according to the seven attributes of ODC-
BD, including function module, defect type, age, quality
characteristics, property, processing priority and influence
degree. It is noticeable that one defect report can be assigned
several function modules and defect types. The description
of defect usually includes occurred condition (data or oper-
ation) and result(phenomenon). Therefore, we distinguished
whether a defect type is a condition or a result for a certain
defect.
For example, the defect description of Bug-443 is as fol-
lows: Incorrect error message box is showed when importing
dropdown items if import file is empty. And when clicking
the “OK” button of the error message box, the software
instead of the error message box is closed. We classified the
defect type of this bug reports as Table II. The number in
conditions and results is the No. of ODC-BD’s defect type
[2], such as No.C113 is “Empty/0 byte/empty row/empty
column file”, No.C197 is “File import and export”, No.R212
is “Message format and content error”, and No.R226 is
“Page location/jump error”.
Secondly we mining frequent itemsets and association
rules about defect type from classified defect data using
Apriori algorithm. To meet our needs, we firstly mining
single-dimension data of defect type from different per-
spective: condition, result and combination of condition and
result, then mining multi-dimension data with respect to
defect type.
1https://bugs.eclipse.org/bugs/
2https://bugzilla.mozilla.org/
Finally we analyze the results of mining manually. The
detailed result is described in next section.
C. Mining Result - Frequent Items and Association Rules
We mined four kinds of frequent patterns from different
perspective.
1) Top 10 defect types acting as defect condition: The
mining result shows the conditions (data or operation) which
most easily result in defects. It tells testers how to design
the conditions of test case by which defects can be found
more easily. The percent in brackets means the support.
• Nonexistent value/object[8.61%]
• Boundary value [8.44%]
• Specific characters [6.33%]
• Null value [5.62%]
• Large/long/deep value [5.45%]
• Unmatched type/format data [4.39%]
• Same/equal value [3.69%]
• Move/Drag&Drop [3.69%]
• Operation repeatedly [2.99%]
• Concurrent operation [2.46%]
Among these conditions, “Nonexistent value/object”
should be noticed. In order to build the condition, special
operations are often needed. For example, concurrent oper-
ation, or delete the value/object ahead by other ways.
2) Top 10 defect types acting as defect result with a high
influence degree: These defect phenomena let developers
and testers notice these points in development. We exclude
trivial defect types like “Function error in any case” from
original mining results. The percent in brackets means the
support.
• Do not catch/handle exception [8.18%]
• Abnormal graphic interface(no response, can not dis-
play, etc) [7.06%]
• Control status abnormally(enable/disable,edit or not,
selected or not,hidden or not) [4.09%]
• Control abnormally(not work or function error) [3.07%]
• Abort/Crash [2.66%]
• Data content error in reading or writing[2.35%]
• Data/Associated data is not/can not be modified
[2.35%]
• Data/Associated data is not/can not be deleted [1.84%]
• Can not stop/Endless loop [1.74%]
• Data/Associated data is not/can not be added [1.64%]
3) Association rules between defect type: The mined
association rules indicate which kind of conditions most
easily lead to severe defects listed above 2). Compared with
the first frequent pattern, this pattern focused on not only
defect type but also influence degree to users. We mined
more than 1,000 rules, so do not list them all, but instead
describe the typical forms and describe some important
results.
• C72;C169 ? D210[85.2%]
• C90 ? D210[76.4%]
• C179 ? D210;D222[68.5%]
The number in association rules is like as Table II, such as
No.C72 is “Nonexistent value/object”, No.D210 is “Do not
catch/handle exception” and No.D222 is “Abnormal graphic
interface(no response, can not display, etc)”. From mined as-
sociation rules, we know the defects of No.D210 or No.D222
occurs with a high probability if tester testing with the
condition of “Boundary value”, “Nonexistent value/object”,
or “Encoding”.
4) Association Rules between Function Module and De-
fect Type: A black-box defect is certainly associated one
or more than one function modules. The mined association
rules are helpful to remove the correlation defects. As a
function module belongs to a certain project, it is meaningful
to mining association rules only from one project’s defects.
To evaluate our approach, we mining from 253 defects of
one project. There are 8 modules labeled as “A” to “H”.
Among mined association rules, there are two typical rules,
the forms are as follows.
• A? C[82.2%]
• E.C68 ? H.D162[89.4%]
A ? C in above rules shows defects occurred in both
module A and module C with a high probability. We can
get a clue that module A and module C have a close
correlation, thus module C should be emphasized to test
when testing module A. And the second rule indicates
No.D162 occurred in module H with a high probability
when No.C68 occurring in module E. Here No.C68 is
“Boundary value” and No.D162 is “Calculation overflow
error”. The rule tells testers that they should confirm whether
“Calculation overflow error” occurs or not in module H
when testing module E with boundary value.
V. CONCLUSIONS AND FUTURE WORK
In this paper, we presented four kinds of frequent patterns
mining from 5023 black-box defect reports classified by
defect classification named ODC-BD. Our contribution is
described as follows: (1)Present the top 10 black-box defect
types acting as the condition of defect, that means defects
are most likely to occur under these 10 kinds of condition
(data or operation). It will tell testers how to design the
conditions of test case by which defects can be found
more quickly. (2)Present the top 10 defect types acting as
defect phenomena that influence degree is high. It shows
the most frequently occurred defect phenomena which have
a great impact on users. (3)Present frequent association rules
between defect types that indicate which kinds of conditions
most easily lead to severe defects listed in section IV.
Compared with the first frequent pattern, this pattern focused
on not only defect type but also influence degree to users.
(4)Present frequent associations between function modules
and defect types. The association rules will help testers
detect and remove the correlation defects. In particular, it
is very helpful when do regression testing after fixing a
defect. In summary, project managers, black-box testers and
developers can substantially benefit from these four mining
results in allocating testing resources, detecting defect and
analyzing the result of testing. In the future, we will extend
our study with several aspects: try to analyze black-box
defect using cause effect graph based on ODC-BC; predict
black-box defect number and distribution according to defect
type.
ACKNOWLEDGMENT
We thank the whole third party testing team of Co-Think
Corporation for the defect classification result review. This
work is supported by the National Science Foundation of
China No.60970070.
REFERENCES
[1] J. Han, H. Cheng, D. Xin, and X. Yan, “Frequent pattern
mining: current status and future directions,” Data Mining and
Knowledge Discovery, vol. 15, no. 1, pp. 55-86, 2007.
[2] N. Li, Z. Li, and X. Sun, “Classification of Software Defect
Detected by Black-box Testing: An Empirical Study,” unpub-
lished.
[3] R. Agrawal, T. Imieliski, and A. Swami, “Mining association
rules between sets of items in large databases,” Proceedings
of the 1993 ACM SIGMOD international conference on Man-
agement of data, Washington, D.C., United States, 1993, pp.
207-216.
[4] M. Naresh Kumar, and B. Eswara Reddy, “Improved classifi-
cation association rule mining,” 2009 International Conference
on Intelligent Agent and Multi-Agent Systems, IAMA 2009.
[5] H. Zhou, W. Wei, M. K. Mainali, K. Shimada, S. Mabu, and
K. Hirasawa, “Class association rules mining with time series
and its application to traffic load prediction,” Proceedings of
the SICE Annual Conference, 2008. pp. 1187-1192.
[6] R. Agrawal, and R. Srikant, “Fast Algorithms for Mining
Association Rules in Large Databases,” Proceedings of the 20th
International Conference on Very Large Data Bases, 1994, pp.
487-499.
[7] J. Han, J. Pei, and Y. Yin, “Mining frequent patterns without
candidate generation,” Proceedings of the ACM SIGMOD
International Conference on Management of Data, vol. 29, no.
2, pp. 1-12, 2000.
[8] M. J. Zaki, “Scalable algorithms for association mining, IEEE
Transactions on Knowledge and Data Engineering,” vol. 12,
no. 3, pp. 372-390, 2000.
[9] Q. Song, M. Shepperd, M. Cartwright, and C. Mair, “Software
defect association mining and defect correction effort predic-
tion,” IEEE Transactions on Software Engineering, vol. 32, no.
2, pp. 69-82, 2006.
