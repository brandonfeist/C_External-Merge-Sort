Mining Complete Fuzzy Frequent Itemsets by Tree 
Structures 
Tzung-Pei Hong 
Department of Computer Science and 
Information Engineering 
National University of Kaohsiung 
Kaohsiung, Taiwan, R.O.C. 
Chun-Wei Lin 
Department of Computer Science and 
Information Engineering 
National Cheng Kung University 
Tainan, Taiwan, R.O.C. 
Tsung-Ching Lin 
Department of Computer Science and 
Information Engineering 
National University ofKaohsiung 
Kaohsiung, Taiwan, R.O.C. 
m0985507@mail.nuk.edu.tw Department of Computer Science and 
Engineering 
Jerry@jerry.idv.tw 
National Sun Yat-sen University 
Kaohsiung, Taiwan, R.O.C. 
tphong@nuk.edu.tw 
Abstract-In this paper, we attempt to extend the fuzzy FP-tree 
mining process to mine all fuzzy frequent itemsets, instead of only 
the representative linguistic terms, from a set of quantitative 
transactions. A multiple fuzzy-term FP (MFFP) tree with the 
consideration of fuzzy operations is proposed to help the 
execution of the fuzzy mining process. The corresponding MFFP­
growth mining algorithm is also designed to derive all fuzzy 
frequent item sets from the tree structure by fuzzy operations. 
Experimental results also show the performance of the proposed 
approach. 
Keywords-fuzzy data mining, fuzzy set, quantitative value, 
fuzzy region, fuzzy frequent itemset. 
I. INTRODUCTION 
In the past, many algorithms for mining association rules 
from transactions were proposed, and most of them were based 
on the Apriori algorithm [1], which used the level-wise 
approach to generate and test candidate itemsets recursively. 
Han et al. then proposed the frequent-pattern (FP) tree structure 
for efficiently mining association rules without generation of 
candidate itemsets [5]. Their approach compressed a database 
into a tree structure which stored only frequent (also called 
large) items. The construction process was executed tuple by 
tuple, from the first transaction to the last one, to build the FP 
tree. After that, a recursive mining procedure called FP-growth 
was executed to derive frequent patterns from the FP-tree 
structure. 
In these years, the fuzzy set theory [15] has been used more 
and more frequently in intelligent systems because of its 
simplicity and similarity to human reasoning [8]. For data 
mining, Hong et al. proposed a fuzzy mining algorithm for 
managing quantitative data based on the Apriori algorithm [6-
7]. Besides, Papadimitriou and Mavroudi proposed an approach 
based on the FP trees to fmd fuzzy association rules [13]. In 
their approach, only two fuzzy regions were used to construct 
the tree structure, and the fuzzy regions were evaluated in 
individual transactions, instead of in the whole database. Thus, 
a fuzzy region might not be frequent even if the summation of 
its fuzzy values in the whole database was larger than or equal 
978-1-4244-6588-0/10/$25.00 ©201 0 IEEE 
563 
to the mmnnum count, which was the mmnnum support 
threshold multiplied by the number of all the transactions. Lin 
et al. then proposed the fuzzy FP-tree algorithm [11] to 
construct a tree structure and mine fuzzy association rules from 
it. In that approach, each item used only the linguistic term with 
the maximum cardinality in later mining processes. The 
frequent fuzzy itemsets derived in this way were, however, 
incomplete since some frequent fuzzy l-itemsets were not 
used. 
In this paper, we thus attempt to extend the FP-tree mining 
process to mine complete fuzzy frequent itemsets from a set of 
quantitative transactions. The proposed approach is a little 
more complex than the original FP-tree mining in which each 
item has only one representative fuzzy region (term). A 
multiple fuzzy-term FP (MFFP) tree with the consideration of 
fuzzy operations is thus proposed for helping the execution of 
the mining process. The MFFP tree keeps all the fuzzy frequent 
regions derived from a database no matter whether they are 
generated from the same items or not. The corresponding 
MFFP-growth mining algorithm is also designed to derive the 
fuzzy frequent itemsets from the tree structure by fuzzy 
operations. 
II. REVIEW OF RELATED WORKS 
In this section, some related researches are briefly reviewed. 
They are the FP-tree algorithm and mining association rules 
from quantitative data. 
A. The FP-tree Mining Algorithm 
Han et al. proposed the Frequent-Pattern (FP) tree structure 
for efficiently mining association rules without generation of 
candidate itemsets [5]. The FP-tree mining algorithm consists 
of two phases. The frrst phase focuses on constructing the FP­
tree from a database, and the second phase focuses on deriving 
frequent patterns from the FP-tree. Three steps are involved in 
FP-tree construction. The database is first scanned to find all 
items with their counts. The items with their supports equal to 
or larger than a predefined minimum support are selected as 
frequent l-itemsets (items). Next, the frequent items are sorted 
in their descending frequencies. At last, the database is scanned 
again to construct the FP tree according to the sorted order of 
frequent items. The construction process is executed tuple by 
tuple, from the first transaction to the last one. After all 
transactions are processed, the FP tree is completely 
constructed. 
After the FP tree is constructed from a database, a mining 
procedure called FP-growth [5] is executed to find all frequent 
itemsets. The FP-growth does not need to generate candidate 
itemsets for mining, but derives frequent patterns directly from 
the FP tree. A conditional FP tree is generated for each frequent 
item, and from the tree the frequent itemsets with the processed 
item can be recursively derived. 
Several other algorithms based on the FP-tree structure 
have been proposed as well [4, 10]. Some related researches are 
still in progress. 
B. Mining Algorithms for Fuzzy Association Rules 
Several fuzzy mining approaches have thus been proposed 
to find interesting linguistic association rules or sequential 
patterns from transaction data with quantitative values. For 
example, Chan et al. proposed an F-APACS algorithm to mine 
fuzzy association rules [2]. Kuok et al. proposed a fuzzy 
mining approach to handle numerical data in databases and to 
derive fuzzy association rules [9]. At nearly the same time, 
Hong et al. proposed a fuzzy mining algorithm to mine fuzzy 
rules from quantitative transaction data [6-7]. Papadimitriou 
and Mavroudi proposed an approach based on FP-trees to find 
fuzzy association rules [13]. In their approach, each item in the 
transactions was transferred into only two fuzzy regions with 
individual fuzzy values. Only the local fuzzy frequent 1-
itemsets kept in each transaction were used for mining. Besides, 
it did not use any fuzzy operation to combine fuzzy regions 
together, which made the mined fuzzy rules a little hard to 
understand. 
Lin et al. then proposed the fuzzy FP tree to derive the 
fuzzy frequent itemsets from a quantitative dataset [11]. It used 
the fuzzy region with the maximum cardinality among all the 
transformed fuzzy regions of an item to construct a fuzzy FP 
tree. Besides, fuzzy operations were used in forming itemsets 
with more than one fuzzy region. Some other methods for 
finding fuzzy association rules have also been proposed [3, 14], 
and some related researches are still in progress. 
III. THE PROPOSED MFFP-1REE CONSTRUCTION 
ALGORITHM 
The proposed construction algorithm for building an MFFP 
tree from a quantitative database is described in this section. 
A. The Tree Construction Algorithm 
The proposed multiple fuzzy-term FP (MFFP) tree mining 
algorithm integrates the fuzzy-set concepts and the FP-tree-like 
approach to fmd fuzzy frequent itemsets from quantitative 
transaction data. It consists of two sub-algorithms. The first one, 
the MFFP-tree construction algorithm, is stated below. 
The MFFP-tree construction algorithm: 
INPUT: A quantitative database consisting of n transactions, a 
564 
set of membership functions, and a predefined 
minimum support threshold s. 
OUTPUT: A multiple fuzzy-term FP (MFFP) tree. 
STEP 1: Transform the quantitative value vi} of each item ? in 
the i-th transaction into a fuzzy set fij represented as 
(fij]IRj] + fijiRj2 + ... + fijJRjh) using the given 
membership functions, where h is the number of 
fuzzy regions for ?, Rjl is the I-th fuzzy region of ?, 
1 ? I ? h , and fiji is vi}'s fuzzy membership value in 
region Rjl. 
STEP 2: Calculate the scalar cardinality of each fuzzy region 
Rjl in the transaction data as: 
n 
countjl = L.!;j/. 
;=1 
STEP 3: Check whether the value countjl of the fuzzy region 
Rjl is larger than or equal to the predefined minimum 
count n* s. If the count of a fuzzy region Rjl is equal to 
or greater than the minimum count, put the fuzzy 
region in the set of fuzzy frequent regions (L]). That 
is: 
L] = {Rjll countj/?n*s, 1 ?j? m}. 
STEP 4: Build the Header_Table by keeping the fuzzy 
frequent regions in L] in the descending order of 
counts. 
STEP 5: Remove the fuzzy regions of the items not in L] from 
the transactions of the transformed database. 
STEP 6: Sort the remaining fuzzy frequent regions in each 
transaction by their membership values in a 
descending order. 
STEP 7: Initially set the root node of the multiple fuzzy-term 
FP tree as {root}. 
STEP 8: Insert the transactions in the transformed database 
into the MFFP tree tuple by tuple. The following two 
cases may exist. 
Substep 8-1: If a fuzzy region Rjl in a transaction has 
been at the corresponding branch of the 
MFFP tree for the transaction, add the 
membership value of Rjl in the 
transaction to the node of Rjl in the 
branch. 
Substep 8-2: Otherwise, add a node of RjI at the end 
of the corresponding branch, set the 
count of the node as the membership 
value of RjI, and insert a link from the 
node of Rjl in the last branch to the 
current node. If there is not such a 
branch with the node of Rjl, insert a link 
from the entry of RjI in the Header­
Table to the added node. 
In STEP 8, a corresponding branch is the branch generated 
from a transformed transaction according to the descending 
order of the membership values of the fuzzy regions in it. After 
STEP 8, the fmal MFFP tree is constructed. 
B. An Example 
In this section, an example is given to illustrate how to 
construct an MFFP tree from the quantitative transaction data. 
Assume the quantitative transaction database shown in Table I 
is used as the example. It consists of 6 transactions and 5 items, 
denoted A to E. 
TABLE !. SIX QUANTITATIVE TRANSACTIONS IN THE EXAMPLE 
TID Items 
1 (A :5) (C: 10) (D:2) (£:9) 
2 (A:8) (B:2) (C:3) 
3 (B:3) (C:9) 
4 (A:7) (C:9) (D:3) 
5 (A:5) (B:2) (C:5) 
6 (A:3) (C:lO) (D:2) (£:2) 
Assume the fuzzy membership functions are the same for 
all the items and are shown in Figure 1. Thus, three fuzzy 
membership values Low, Middle and High are produced for 
each item in a transaction according to the predefmed 
membership functions. Note that the proposed approach also 
works when the membership functions of the items are not the 
same. 
Low Middle 8'gb 
II Amount 
Figure I. The membership functions used in this example 
The quantitative values of the items in the transactions are 
then represented as fuzzy sets. Take the first item in the first 
transaction as an example. In that transaction, the amount "5" 
of A is converted into the fuzzy set (O.2/A.Low, 0.8/A.Middle) 
using the given membership functions in Figure 1. The scalar 
cardinality of each fuzzy region in the transaction is then 
calculated as the count value. The results are shown in Table II. 
TABLE II. THE COUNTS OF Fuzzy REGIONS 
Item Count Item Count Item Count 
A.Low 1.0 CLow 0.8 E.Low 0.8 
A.Middle 3.4 CMiddle 2.4 E.. Middle 0.6 
A.High 0.6 CHigh 2.8 E.High 0.1 
B.Low 2.2 D.Low 2.2 
B.Middle 0.8 D.Middle 0.8 
B.High 00 D.High 00 
565 
The counts of these fuzzy regions are then checked against 
the minimum count, which is 1.8. The results are shown in 
Table III. 
TABLE II!. THE SET OF Fuzzy FREQUENT REGIONS IN THE EXAMPLE 
Fuzzy frequent regions Count 
A.Middle 3.4 
B.Low 2.2 
C.Middle 2.4 
C.High 2.8 
D.Low 2.2 
The fuzzy frequent regions in Table III are then sorted in 
the descending order of their counts and are put into the 
Header_Table. The fuzzy regions which are not in Table III are 
removed from each transaction. The remaining fuzzy regions in 
each transaction are then sorted according to their membership 
values in a descending order. After this step, the updated 
transactions with only the sorted fuzzy frequent regions (1-
itemsets) are shown in Table IV. 
TABLE IV. THE UPDATED TRANSACTIONS 
I TID 
2 
3 
4 
5 
6 
Fuzzy frequent regions 
0.8 0.8 0.8 0.2 
( A Middle ), ( CHigh ), ( D.Low ), (c. Middl e) 
08 06 0.4 
( B Lo)' ( A Middle ), (c. Middle ) 
(?),(?),( 0.4 ) B.Low C.HIgh c.. Middle 
( 0.8 ),(?),(?),
( 0.4 ) 
A.Mlddle C.High D.Low C.Middle 
( 
0.8 ) (?) ( 0.8 ) 
A.Middle ' B.Low ' C.Middle 
0.8 0.8 0.4 0.2 
( CHigh ), (D. Low ), ( A.Middle ), ( CMiddle ) 
I 
The root of the multiple MFFP tree is initially set as {root}. 
The updated transactions in Table IV are inserted into the 
MFFP tree tuple by tuple. After all the six transactions are 
processed, the resulting Header Table and MFFP tree are 
shown in Figure 2. 
Fu?1.V regiom' 
A.Middlc 3.4 
C.High 2.8 
C.Middlc 
B.Low 
D.Lo", 2.2 
Figure 2. The final MFFP tree constructed in the example 
IV. THE PROPOSED MFFP-GROWTH MINING ALGORITHM 
After the MFFP tree is constructed, the fuzzy frequent 
itemsets with more than one fuzzy region can then be found by 
the proposed multiple MFFP-growth mining approach, which 
is described below. 
A. The Mining Algorithm 
The fuzzy frequent items (fuzzy regions) in Header_Table 
in Figure 2 are processed one by one and bottom-up to form the 
fuzzy frequent itemsets. The fuzzy frequent itemsets can be 
derived from the nodes by the intersection operation (which is 
the minimum function here) in fuzzy sets. The mining 
algorithm is stated as follows: 
The MFFP-growth mining algorithm: 
INPUT: The MFFP tree, its corresponding Header_Table, and 
the predefmed minimum count. 
OUTPUT: The fuzzy frequent Itemsets. 
STEP 1: Process the fuzzy regions (fuzzy frequent items) in 
the Header_Table one-by-one and bottom-up by the 
following steps. Let the currently processed fuzzy 
region be RjI. 
STEP 2: Find all the nodes with the fuzzy region RjI in the 
MFFP tree through the links. 
STEP 3: Extract the nodes in the same path of the currently 
processed node for the fuzzy region RjI to form the 
conditional fuzzy patterns except no two nodes 
belong to the same ?. The minimum operation is 
performed on the path to get the fuzzy values of the 
derived fuzzy itemsets. 
STEP 4: Sum the fuzzy values of the same derived fuzzy 
itemsets together. 
STEP 5: Check whether the summed fuzzy value of each 
derived fuzzy itemset is larger than or equal to the 
minimum count. If yes, output it as a fuzzy frequent 
itemset. 
STEP 6: Recursively do STEPs 3 to 5 to build deeper 
conditional fuzzy patterns and derive the fuzzy 
itemsets which are related to the currently processed 
fuzzy region RjI. 
STEP 7: Repeat STEPs 2 to 6 for another fuzzy region until all 
the fuzzy regions in the Header_Table are processed. 
After STEP 7, all the fuzzy frequent itemsets can be derived 
from the MFFP tree. Below, an example is given to illustrate 
the algorithm. 
B. An Example 
For the constructed MFFP tree in Figure 2, the proposed 
MFFP-growth mining algorithm fmds the fuzzy frequent 
itemsets as follows. 
The fuzzy regions in Header_Table are processed one-by­
one and bottom-up. Take the fuzzy region CMiddle as an 
566 
example to show the next steps. The nodes with the currently 
processed fuzzy region CMiddle in the MFFP tree are then 
found. There are totally five nodes of CMiddle in the example. 
The nodes in the same paths with these five nodes are then 
found to derive the fuzzy itemsets. 
In the first branch, the generated fuzzy itemsets are 
{(A. Middle, CMiddle): 2.4(10.6 = 0.6}, {(D.Low, CMiddle): 
1.4 (1 0.6 = 0.6}, and {(A. Middle, CMiddle, D.Low): 
2.4 (11.4 (10.6 = 0.6}, respectively. The other branches in the 
MFFP tree are processed in the same way. The above steps are 
repeated for another fuzzy region until all the fuzzy regions in 
the Header_Table are processed. The counts of the generated 
fuzzy itemsets are then examined against the updated minimum 
count, which is 1.8. The fmal results of the fuzzy frequent 
itemsets are then shown in Table V. 
TABLE V. THE FINAL DERIVED Fuzzy FREQUENT ITEMSETS 
I 
l-itemset Count 
{A. Middle} 3.4 
{S.Low} 2.2 
{CMiddle} 2.4 
{CHi?h} 2.8 
{D.Low} 2.2 
2-itemset Count 
{A.Middle, CMiddle} 2.0 
{A. Middle, CHigh} 1.8 
{A. Middle, D.Low} 1.8 
{CHigh, D.Low} 2.2 
3-itemsets Count 
{A. Middle, CHigh, D.Low} 1.8 
V. EXPERIMENTAL RESULTS 
The experiments were performed on a real dataset called 
FOODMART from an anonymous chain store [12]. Two and 
three membership functions for each item were tested, 
respectively. Figure 3 shows the execution time for the 
proposed MFFP tree mining algorithm with two and three 
fuzzy regions for each item. The minimum support threshold 
was set at from 21 % to 25%, with 1 % increment each time. 
400 
?350 ... .! 300 
.? 250 
§ 200 
.'" 
:::: 150 
? 
? 100 
50 
'" 
I? 
o 
0.21% 
'" 
""-... 
---
---
-----
0.22% 0.23% 
IVlinllntun SUI)port tlu"e-sllold 
I _2.R.egiono -3.R.egio". I 
--
--.. 
--
0.24% 0.25% 
f 0 0 (\m..? ,'1: 
Figure 3. The comparison of the execution time for two and three fuzzy 
regions 
It is obvious to see from Figure 3 that more execution time 
was required for three regions than for two regions in the five 
different minimum support thresholds. 
14000 
12000 
? 10000 
o ..: 8000 
o 
ii: 6000 
? 4000 
Z 2000 
i'.. 
II-. 
o 
0.21% 
"-
" 
-........ 
? 
--? --
0 .22% 0.23% 0.24% 0.25% 
I'vliullmun ruPP01-t threshohl 
I _2_Regions -3-Regions I fooruu..'"\rt 
Figure 4. The comparison of the tree nodes in the two different numbers of 
fuzzy regions 
Experiments were also made to show the number of tree 
nodes for two and three regions. The results are shown in 
Figure 4. It could be seen from Figure 4 that the tree from 
three regions kept more nodes than that from two regions in 
the five different minimum support thresholds. 
VI. CONCLUSION 
In this paper, the MFFP-tree structure is proposed to 
efficiently and effectively handle the mining from the 
quantitative data. Compared to the previous approach, the 
proposed one considers multiple fuzzy frequent regions for an 
item, thus being able to derive a complete set of fuzzy itemsets 
and association rules. The MFFP-growth mining algorithm is 
also proposed to efficiently mine the fuzzy frequent itemsets 
from the MFFP tree. Experimental results have also shown the 
performance of the proposed algorithm under different 
parameter values. 
REFERENCES 
[I] R. Agrawal and R. Srikant, "Fast algorithms for mining association rules 
in large databases," The 20th International Conference on Very Large 
Data Bases, pp. 487-499,1994. 
[2] K. C. C. Chan and W. H. Au, "Mining fuzzy association rules," The 6th 
International Conference on Information and Knowledge Management, 
pp. 209-215, 1997. 
[3] M. Delgado, N. Marin, D. Sanchez, and M. A. Vila, "Fuzzy association 
rules: General model and applications," IEEE Transactions on Fuzzy 
Systems, vol. II, pp. 214-225,2003. 
[4] G. Grahne and J. Zhu, "Fast algorithms for frequent itemset mining 
using fP-trees," IEEE Transactions on Knowledge and Data Engineering, 
vol. 17, pp. 1347-1362,2005. 
[5] J. Han, J. Pei, Y. Yin, and R. Mao, "Mining frequent patterns without 
candidate generation: A frequent-pattern tree approach," Data Mining 
and Knowledge Discovery, vol. 8, pp. 53-87,2004. 
[6] T. P. Hong and J. B. Chen, "Finding relevant attributes and membership 
functions," Fuzzy Sets and Systems, vol. 103, pp. 389-404,1999. 
[7] T. P. Hong, C. S. Kuo, and S. L. Wang, "A fuzzy aprioritid mining 
algorithm with reduced computational time," Applied Soft Computing, 
vol. 5, pp. 1-10,2004. 
[8] A. Kandel, Fuzzy expert systems, 1992. 
[9] C. M. Kuok, A. Fu, and M. H. Wong, "Mining fuzzy association rules in 
databases," SIGMOD Record, vol. 27, pp. 41-46, 1998. 
567 
[10] Y. C. Li and C. C. Chang, "A new fP-tree algorithm for mining frequent 
itemsets," Lecture notes in computer science, vol. 3309, pp. 266-277, 
2004. 
[II] C. W. Lin, T. P. Hong, and W. H. Lu, "Linguistic data mining with 
fuzzy fP-trees," Expert Systems with Applications, vol. 37, pp. 4560-
4567,2010. 
[12] Microsoft, Example database foodmart of microsoft analysis services. 
Available: http://msdn.microsoft.comJen-
us/library/aa2I 7032(SQL.80).aspx. 
[13] S. Papadimitriou and S. Mavroudi, "The fuzzy frequent pattern tree," 
The 9th WSEAS International Conference on Computers, pp. 1-7,2005. 
[14] W. Shitong, K. F. L. Chung, and S. Hongbin, "Fuzzy taxonomy, 
quantitative database and mining generalized association rules," 
Intelligent Data Analysis, vol. 9, pp. 207-217,2005. 
[15] L. A. Zadeh, "Fuzzy sets," Information and Control, pp. 338-353, 1965. 
