Transitive Association Rule Discovery by Considering Strategic Importance 
Doug Won Choi 
Dep’t of System Management Engr. 
Sungkyunkwan University 
Suwon, Korea 
dougwchoi@paran.com 
Young Jun Hyun 
Quality Management Department 
National Fusion Research Institute 
Daejeon, Korea 
semantic@nfri.re.kr 
 
Abstract The TSAA(transitive support association Apriori) 
algorithm of this paper discovers transitively associated 
relationships as well as the frequent itemsets. It utilizes the join 
item set to find the transitive association rules. Since the join 
item of a transitive association which have low support value 
tends to be removed from the next candidate itemset 
generation, we used two kinds of support values, ‘minimum 
support’ and ‘minimum relative support,’ in finding the 
transitive relations. This way the items carrying a strategic 
importance are given a second chance so that they might be 
used in discovering the transitive association rules. Our 
experiments with a real world database showed that the TSAA 
algorithm was useful in producing transitive itemsets which 
could not have been obtained otherwise. Observation from 
other transaction database indicated that there is a ‘minimum 
relative support level’ at which the number of transitive 
association itemset decreases suddenly. 
 
Keyword- transitive association, Apriori, RSAA, market 
basket analysis 
I.  INTRODUCTION 
Association rule mining is widely used to find interesting 
relationships among the items of a market basket. Apriori 
algorithm is generally used to find Boolean associations [1] 
[7]. RSAA(relative support association Apriori) is a 
modification to find the association rules among the 
infrequent data items [5]. Both Apriori and RSAA 
algorithms make a brute force search of the association rules 
to test if they meet the condition for ‘minimum support’ or 
‘minimum relative support’.  
Oftentimes the important semantic relationships among 
the market basket items are ignored since the associations 
with low support have to be dropped out from further 
considerations by most algorithms. For example, Apriori 
discovers frequent itemsets solely by counting the frequency 
of occurrence of the items in the database. There is no 
semantics associated with it. RSAA tries to find association 
rules with relatively low support [5]. Both algorithms 
assume that each item has equal importance in its value.  
However, in the real world, certain items are more 
valuable than others even though they show up less 
frequently in the market basket. For example, the sale of a 
TV set returns much greater profit than a toaster oven. In 
this regard, a new data mining technique would be useful to 
find the association rules that reflect the semantic aspects or 
strategic importance. This paper presents a new algorithm 
that takes into account the semantic aspects of the 
association. Specifically, this paper considers the transitive 
association rule as a special case of semantic relation.  
  This paper is comprised of four sections. The next section 
reviews the basic concepts of association rule mining and 
discusses recent improvements and variations of the Apriori 
method. Section three discusses the main idea of transitive 
association rule mining technique. TSAA algorithm is 
presented and its sample usage together with a large scale 
field data application is provided. The last section discusses 
some findings, issues for further research, and recent 
progresses about reflecting strategic aspects into the 
association rule mining technique. 
II. ASSOCIATION RULE MINING AND ITS VARIATIONS  
A. Association rule  
Basic definition about association rule is briefly summarized 
here for refreshments of the readers’ memory. Let ?= {i1, i2, 
…, im} be a set of items and D a database of transactions 
where each transaction T is a set of items such that T•?. An 
association rule is an implication of the form A?B, where 
A??, B??, and A?B=?. The rule A ? B holds in the 
transaction set D with support s, where s is the percentage of 
transaction in D that contains both A and B. The rule A?B 
has confidence c in the transaction set D if c is the 
percentage of transaction in D which contains A and it also 
contains B.  
s = Support(A?B) = P(A?B) 
c = Confidence(A?B) = P(B|A) 
 
B. Algorithms for association rule mining 
Association rules can be classified into many types such as 
Boolean, quantitative, single vs. multi-dimensional, and 
single-level vs. multi-level association rules, etc. [2,3,7]. 
‘Market basket analysis’ belongs in the Boolean association 
rule category and Apriori is a typical algorithm of market 
basket analysis. Many variations to the Apriori algorithm 
have been attempted to improve the algorithm performance. 
They include AprioriTid, MSApriori (Multiple Support 
Apriori), MaxOccur (Maximum Occurrence), and RSAA 
978-0-7695-4108-2/10 $26.00 © 2010 IEEE
DOI 10.1109/CIT.2010.292
1654
2010 10th IEEE International Conference on Computer and Information Technology (CIT 2010)
(Relative Support Apriori algorithm) [2,4,7]. However, they 
differ only in minor features such as different ordering of 
the data elements, or placing more importance on scarce 
data items, etc.  
Recent studies on association rule mining address various 
topics such as multiple support values, recurrent cyclic 
association rule, spatial association rule, time limited 
sequential association rule, and intermittent and 
simultaneous sequential pattern [10,12]. Surveys on these 
researches indicate that no transitive association rule has 
been addressed nor explored so far. 
 
1) Apriori  
Since the Apriori algorithm [7] is the very foundational 
work of association rule mining, we assume the readers are 
friendly with the algorithm.  
2) AprioriTid  
AprioriTid uses Apriori-gen function to generate the 
candidate itemsets. It differs from Apriori in that it does not 
need to rescan the database to calculate the support level of 
the candidate itemsets. It scans the database only once to 
determine the 1-frequent itemsets and then uses only those 
frequent itemsets to generate the next stage candidate 
itemsets [12]. 
3) MSApriori  
Some items occur more often than others in the transaction 
database. MSApriori(Multiple Support Apriori) is an 
improved version of Apriori which considers the frequency 
of occurrence of individual item. In fact, this algorithm 
assigns ‘minimum item support (MIS)’ level to each item in 
order to take into account the frequency of occurrence of the 
individual item [8, 9].  
4) MaxOccur (Maximum Occurrence)  
Earlier association rule mining algorithms did not consider 
recurrence issue. MaxOccur defines the association rules 
that consider the recurrent items when generating the k-
candidate itemsets. The algorithm begins with finding the 1-
frequent itemsets. It then examines the frequency of 
recurrent items in the frequent itemset. The process 
continues to generate k-itemsets until it finds the predefined 
‘Maximum Occurrence’ item. The infrequent items that fail 
to meet the support level are removed from further 
processing [12].  
5) RSAA (Relative Support Apriori)  
RSAA considers the relative frequency of occurrence 
[5,6,12] and uses two support values in the mining process. 
The first one (min_sup_1) is the user defined ‘minimum 
support’ which is used to find the frequent itemsets. The 
items that do not meet this value are grouped into infrequent 
itemset. The second value is the ‘relative support 
(min_sup_2)’ which is used to evaluate the infrequent 
itemset and to see if they meet the relative support. 
‘Min_sup_1’ must be greater than ‘min_sup_2.’ RSAA can 
also be applied to where there is a hierarchical relationship 
among the data items 
III. TRANSITIVE ASSOCIATION RULE DISCOVERY  
A. Transitively associated relationship  
Suppose the Apriori algorithm produced the following 2-
candidate itemsets ‘{milk, bread}, {bread, toaster}, and 
{milk, toaster}’ with the respective support values 50%, 
40%, 30%. If we use 40% as the min_support, we get two 
‘2-frequent itemsets’ out of the three ‘2-candidate itemsets,’ 
i.e., {milk, bread} and {bread, toaster}. Here we note that 
the two association rules {milk, bread} and {bread, toaster} 
combined together produce the transitive relation 
<milk•toaster>. A high support is required for the transitive 
relation to hold. However, in this case, the support is only 
30%, and so the {milk, toaster} itemset must be removed 
from further processing.  
This paper is tuned to the development of an algorithm 
that retains the transitively associated itemsets as well as the 
normal frequent itemsets. The purpose is to discover useful, 
and sometimes strategically important, patterns forsaken by 
the Apriori procedure and to utilize the recovered transitive 
associations as a useful knowledge for real world 
applications. As shown in the famous ‘beer and diaper’ 
episode of association rule mining [11], we sometimes 
encounter difficulty in interpreting the semantics of the 
mining results. However, if we retain the transitive 
association rules, it may help us to find the missing links of 
an association. For example, the following two itemsets 
{beer, milk} and {milk, diaper} may render a reasonable 
interpretation of the association between ‘beer and diaper.’ 
Most of the association rule mining algorithms do not 
retain the semantically meaningful rules because they 
usually use the simple ‘support and confidence’ criteria. The 
‘milk?bread?toaster’ relation is a typical example which 
contains semantically meaningful transitive relationship but 
the {milk, toaster} itemset has to be removed from the 
frequent itemset. If we keep the transitively associated 
itemsets as the legitimate course of the association rule 
mining, we will be able to find out the items which have 
strategic importance in marketing and sales analysis. 
B. The TSAA algorithm 
The ‘TSAA (transitive support association Apriori)’ 
algorithm of this paper utilizes the combination of Apriori 
and RSAA algorithms. It uses two minimum support values 
min_support (minimum support) and minRsup (minimum 
relative support). The algorithm begins with the same 
Apriori procedure in finding the 1-frequent itemsets. In the 
next step, we generate the 2-candidate itemsets and compare 
the support values against the min_support. If the itemset 
has a support value greater than the min_support, it is 
grouped into the frequent itemset. If not, it is stored in the 
infrequent itemsets, and we examine whether there is a 
transitive relationship. If there are two or more itemsets that 
lead to a transitive relation, they form the transitive itemsets 
(TRD).  
1655
In the next step, TSAA calculates the ‘relative support 
(Rsup)’ to find any ‘transitively associated itemsets.’ The 
notations and definitions about the TSAA algorithm are as 
follows.  
 
Ck = k-candidate transitive itemsets = { Ck1, Ck2, …, Cki, 
…, Ckm }, 
Ckj : jth k-candidate transitive itemset 
Rsupj : relative support value of the jth transitive 
itemset 
TRDsup(Ckj) : the support value of the jth k-candidate 
transitive itemset 
minRsup: Minimum Relative Support (user defined) 
Ck = { ?1, ?2, …, ?k } where ?i indicates an item  
Rsupj = max{ TRDsup(Ckj)/sup(?1),  
                      TRDsup(Ckj)/sup(?2), ...,  
                      TRDsup(Ckj)/sup(?3), ...,  
                      TRDsup(Ckj)/sup(?k) }  
 
If Rsupj  is greater than minRsup, Ckj: is grouped into the 
k-transitive itemset TRDk. Suppose we have a transaction 
database as shown in Table 1. We apply the TSAA 
algorithm and calculate Rsupj for each of the candidate 
transitive itemset. 
 
Table 1.  Sample transaction database 
TID  Transaction Items 
1 LCD_Monitor, LCD_TV, Perfume, MP3 
2 LCD_TV, Cell-phone, Swimwear, Insurance 
3 Perfume, Bed, LCD_Monitor 
4 Cell_phone, Suitcase, Bed 
5 LCD_Monitor, Swimwear, Sunglass, SunCream 
6 Perfume, Bed, MP3, Cell_phone 
7 Suitcase, Swimwear, Sunglass,MP3, Insurance 
8 Perfume, Suitcase, Sunglass, MP3, Insurance 
9 Cell_phone, Swimwear, Sunglass, SunCream, Perfume 
10 LCD_TV, Insurance 
11 Perfume, Bed, Swimwear, Sunglass 
12 Sunglass, SunCream, Insurance 
13 LCD_Monitor, Suitcase, MP3 
14 Cell_phone, Bed, SunCream 
15 Suitcase, Swimwear, Sunglass,MP3 
16 LCD_TV, Swimwear, Insurance, SunCream 
17 LCD_TV, LCD_Monitor, Sunglass, Bed 
18 Cell-phone, Swimwear, Sunglass, SunCream 
19 LCD_TV, Suitcase, Sunglass, Perfume, Swimwear 
20 LCD_Monitor, Cell_phone, Perfume 
21 Perfume, MP3, Swimwear, SunCream 
22 LCD_Monitor, Swimwear, Sunglass, Insurance, Suitcase 
23 Cell-phone, Suitcase, Bed 
24 MP3, Swimwear, Sunglass, SunCream 
25 LCD_TV, Perfume, Suitcase, Insurance 
Table 2 shows the procedures for calculating the relative 
support Rsupj. If minRsup=0.4, we obtain the transitive 
association itemsets TRD2= {{perfume, swimwear}, 
{swimwear, insurance}, {swimwear, suitcase}, {insurance, 
suitcase}, {insurance, sunglass}}, and in the next step we 
obtain 3-frequent itemset {{swimwear, sunglass, 
suncream}, {swimwear, suitcase, sunglass}, {suitcase, 
sunglass, suncream}} and 3-transitive itemset {{perfume, 
swimwear, insurance}, {suitcase, perfume, swimwear}, 
{sunglass, swimwear, insurance}, {suitcase, sunglass, 
insurance}}. Detailed procedures for computing Rsupj are 
discussed in the TSAA algorithm to appear later in this 
section. 
Table 2.  Relative support (Rsupj) for transitive itemsets 
TRD  Support  Rsupj  
{Perfume, Swimwear}  C21=16  Max{16/32, 16/48}=0.5  
{Swimwear, Insurance}  C22=16  Max{16/48, 16/32}=0.5  
{Swimwear, Suitcase}  C23=16  Max{16/48, 16/36}=0.44  
{Insurance, Suitcase}  C24=16  Max{16/32, 16/36}=0.5  
{Insurance, Sunglass}  C25=16  Max{16/32, 16/48}=0.5  
 
A step by step application of the TSAA algorithm to the 
transaction database of Table 1 is provided in “Fig. 1.” The 
pseudo code for TSAA algorithm is described in “Fig. 2” 
and the variables and notations used in the algorithm are 
defined as follows: 
 
Ck: k-candidate itemset,  
Lk: k-frequent itemset 
k-itemset: an itemset containing k items 
m_supportk: minimum support (%) for k-itemset 
minRsup: minimum relative support (%) 
TRDk: Transitive itemset which contains k elements  
TCk: k- candidate transitive itemset 
 
// Algorithm TSAA // 
Database D is composed of transaction data ? = { t1, t2, …, tn } 
L1 = {large 1-itemsets};  // from Apriori <remark 1> // 
for ( k=2; Lk-1??; k++ ) do   
    Ck = Apriori-gen(Lk-1) ; // candidate items obtained from Lk-1 < 
remark 2> //  
 if (k?3 and TRDk-1??) then TLk = TR_Join(TRDk-1);//< remark 3> // 
if TLk?? write "k-th transitive association itemset created";  
// print out k-transitive association itemsets generated from (k-1)-
candidate itemsets and meet the relative support // 
// at this stage, we don’t need to review the relative support. < 
remark 4> // 
   forall j do Cki.count = 0;   
// initialize frequency count to zero // 
if TLk?? write "k-th transitive association itemset created";  
// print out k-transitive association itemsets generated from (k-1)-
candidate itemsets and meet the relative support // 
// at this stage, we don’t need to review the relative support. < 
remark 4> // 
   forall j do Cki.count = 0;   
// initialize frequency count to zero // 
1656
Not Meet Min
Support(20%)
C1
2- Candidate
Calculate Relative
Support
1- Candidate 1-Frequent
Scan D
Item set Sup 
{LCD_MONITOR} 28 
{LCD_TV} 28 
{Perfume} 32 
{MP3} 28 
{Cellularphone} 32 
{Swimwear} 48 
{Travelerinsurance} 32 
{Bed} 28 
{Suitcase} 36 
{Sunglass} 48 
{Suncream} 36 
Item set Sup 
{Perfume} 32 
{Cellularphone} 32 
{Swimwear} 48 
{Travelerinsurance} 32 
{Suitcase} 36 
{Sunglass} 48 
{Suncream} 36 
Item set Sup
{perfume,cellularphone} 8
{perfume,swimwear} 16
{perfume,travelerinsurance} 4
{perfume,suitcase} 8
{perfume,sunglass} 12
{perfume,suncream} 8
{cellularphone,swimwear} 12
{cellularphone,travelerinsurance} 4
{cellularphone,suitcase} 8
{cellularphone,sunglass} 8
{cellularphone,suncream} 12
{swimwear,travelerinsurance} 16
{swimwear,suitcase} 16
{swimwear,sunglass} 36
{swimwear,suncream} 28
{travelerinsurance,suitcase} 16
{travelerinsurance,sunglass} 16
{travelerinsurance,suncream} 12
{suitcase,sunglass} 20
{suitcase,suncream} 4
{sunglass,suncream} 24
Item set Sup 
{swimwear,sunglass} 36
{swimwear,suncream} 28
{suitcase,sunglass} 20
{sunglass,suncream} 24
Item set Sup
{perfume,cellularphone} 8
{perfume,swimwear} 16
{perfume,travelerinsurance} 4
{perfume,suitcase} 8
{perfume,sunglass} 12
{perfume,suncream} 8
{cellularphone,swimwear} 12
{cellularphone,travelerinsurance} 4
{cellularphone,suitcase} 8
{cellularphone,sunglass} 8
{cellularphone,suncream} 12
{swimwear,travelerinsurance} 16
{swimwear,suitcase} 16
{travelerinsurance,suitcase} 16
{travelerinsurance,sunglass} 16
{travelerinsurance,suncream} 12
{suitcase,suncream} 4
Item set Sup 
{perfume,swimwear} 16
{swimwear,travelerinsurance 16
{swimwear,suitcase} 16
{travelerinsurance,suitcase} 16
{travelerinsurance,sunglass} 16
TRD support Rsupj
{perfume, swimwear} C21 = 16
Max{16/32, 16/48}
= Max{0.5, 0.33} = 0.5
{swimwear, 
ravelerinsurance}
C22 = 16
Max{16/48, 16/32}
= Max{0.33, 0.5} = 0.5
{swimwear, suitcase} C23 = 16
Max{16/48, 16/36}
= Max{0.33, 0.44} = 0.44
{travelerinsurance, 
suitcase}
C24=16
Max{16/32, 16/36}
= Max{0.5, 0.44} = 0.5
{travelerinsurance, 
sunglass}
C25=16
Max{16/32, 16/48}
= Max{0.5, 0.33} = 0.5
Meet Min
Support(30%)
Scan D
L1
C2
Meet Min
Support(20%)
2-FrequentL1
TRD
Satisfy Relative
Support (0.4)
Item set 
{perfume,cellularphone} 
{perfume,swimwear} 
{perfume,travelerinsurance} 
{perfume,suitcase} 
{perfume,sunglass} 
{perfume,suncream} 
{cellularphone,swimwear} 
{cellularphone,travelerinsurance} 
{cellularphone,suitcase} 
{cellularphone,sunglass} 
{cellularphone,suncream} 
{swimwear,travelerinsurance} 
{swimwear,suitcase} 
{swimwear,sunglass} 
{swimwear,suncream} 
{travelerinsurance,suitcase} 
{travelerinsurance,sunglass} 
{travelerinsurance,suncream} 
{suitcase,sunglass} 
{suitcase,suncream} 
{sunglass,suncream} 
Figure 1.  An example of the TSAA algorithm application 
  
    forall candidates Cki ? Ck do 
  forall tr ? ? do 
       if ( Cki is a subset of tr ) 
     then Cki.count ++; // increase support count  <remark 
5> // 
        Lk={Cki?Ck|Cki.count/|?|?m_supportk};  
// k-frequent itemset, |?| is the cardinality of the
transaction database < remark 6> //  
      if Lk?? write "k-th association itemset created"; 
   TCk={Ckj, Ckr(r?j)?Ck|??{Ckj},??{Ckr(r?j)}, {?}??, 
and Ckj.sup<m_supportk, Ckr.sup< m_supportk}; 
      // Candidate set of k-itemsets that meet the scarcity 
condition and transitivity relation. < remark 7> //
   
    TRDk=?; //initialize transitive association itemsets //  
    if (TCk??) then  
     for each Ckj ? TCk  
     // calculate the relative support of each scarce itemset 
1657
in TRDk < remark 8> //  
        Rsupj = max{ TRDsup(Ckj)/sup(?1), 
                          TRDsup(Ckj)/sup(?2),  
                          ... 
                          TRDsup(Ckj)/sup(?k) } 
        if Rsupj?minRsup then // <remark9>// 
           TRDk = TRDk?Ckj   
        end if 
     endfor 
  endif  // (TCk??)  // 
  endfor // ( k=2; Lk-1??; k++ ) // 
Figure 2.  The TSAA algorithm 
Remarks on TSAA algorithm 
Remark 1. Apply the Apriori algorithm and generate 1-
frequent itemset L1 using the transaction database D. 
 
Remark 2. Apply the Apriori-gen procedure [7] on frequent 
itemset Lk-1 and generate k-candidate itemset Ck.  Join 
operation is performed in this process and element size is 
increased by one.   
Ck = { Ck1, Ck2, …, Cki, …, Ckm }, and m represents the 
cardinality of itemsets that satisfy the minimum 
support value. 
For example,  
C2 = { C21, C22, C23 } = {{2,3}, {2,4}, {2,6}}  
Ck = { ?1, ?2, …, ?k }  // k-itemset is composed of k items //  
 And if k=2,  
C21 = { ?1, ?2 } = {2, 3}  ?   ?1 = 2,  ?2 = 3  
C22 = { ?1, ?2 } = {2, 4}  ?   ?1 = 2,  ?2 = 4  
 
Remark 3. Perform join operation on ‘k-candidate transitive 
itemset’ (k?2), and generate ‘(k+1)-transitive association 
itemset (TLk).’ 
Remark 4. Since the ‘(k+1)-transitive association itemsets 
are generated from the join operation of the k-itemsets, 
(k?2), which meet the minRsup condition, checking for 
minRsup condition is redundant and unnecessary.  
Remark 5. Count the number of transaction records that 
contain the ‘k-candidate itemset.’ 
Remark 6. Calculate the support value for each of the ‘k-
candidate itemset,’ and if each itemset meets the minimum 
support, it is added to the ‘k-frequent itemset (Lk).’  
Remark 7. k-itemsets that do not meet the minimum support 
are reviewed for transitive association. If they hold, they are 
added to the ‘k-candidate transitive itemset (TCk).’ 
Remark 8. Calculate the ‘relative support’ for each of the 
itemset in TCk.  
Remark 9. Collect only those itemsets in TCk that meet the 
user defined ‘minimum relative support,’ and form TRDk. 
 
C. Experiment with a field data 
In order to evaluate and verify the functionality of the 
TSAA algorithm, we collected a total of 730 customer 
receipts from a local shopping center (E- mart: a large scale 
discount store in Korea). A data cleaning and transformation 
was performed in the data preparation stage. Table 3 shows 
the list of items described in terms of their categories. 
 
Table 3.  List of items (categories) 
Item ID Item Description 
1 Baby food 
2 Bread 
3 Cooked meal 
4 Noodle 
5 Frozen food 
6 Milk & beverage 
7 Coffee & tea 
8 Confectionery 
9 Canned food 
10 Ham & fish cake 
11 Sauce 
12 Liquor 
13 Stock farm product 
14 Fish 
15 Vegetable 
16 Dried fish 
17 Gimchie 
18 Egg 
19 Rice cake 
20 Fruit 
 
 
Figure 3.  Input data screen 
 
“Fig. 3” is a screen capture of the input data represented in 
Excel spreadsheet. Each row of the table indicates the 
transaction data of a customer. If customer i purchased item 
j, then the cell (i, j) is marked 1, otherwise 0. The TSAA 
algorithm was implemented using the programming feature 
of Microsoft Excel. Considering the support level of 1-
frequent itemsets we used 20% for ‘minimum support’ and 
50% for ‘minimum relative support’ in our experiment. 
Table 4 shows the result of TSAA algorithm application. It 
produced the k-frequent itemsets for k=1..4 exactly the same 
way that we would obtain from the Apriori algorithm. In 
addition, we obtained 11 ‘3-transitive itemsets’ as are shown 
at the bottom of Table 4. 
Observation of the 3-transitive itemsets {2, 6, 10}, {2, 6, 
11}, {2, 6, 12}, {2, 6, 18} in Table 4 reveals the new 
knowledge that item 6 (Milk & beverage) plays the linkage 
role between item 2 (Bread) and other items such as 10, 11, 
12, and 18 which represent ‘Ham & fish cake,’ ‘Sauce,’ 
‘Liquor,’ and ‘Egg’ respectively. This knowledge may 
1658
provide us with some insight concerning the marketing 
strategy and shop floor layout design. Looking at the ‘3-
frequent itemsets’ in Table 4, we notice that items 6, 8, and 
15 are transitive items. However, the list of ‘3-transitive 
itemset’ indicate that items 6, 10, 11, and 12 are also 
transitive items. So we notice that items 10, 11, and 12 
could have been removed from transitivity consideration in 
case we used the Apriori algorithm only. 
 
Table 4.  Result of the TSAA algorithm 
 
 
 
 
Figure 4.  Number of transitive association itemsets at various 
levels of minimum relative support 
 
“Fig. 4” shows the behavior of TSAA algorithm as we 
changed the level of minimum relative support.  This figure 
is obtained from other set of experiment data. However, it 
indicates that, depending on the transaction database D, 
there is a minimum relative support level at which the 
number of transitive association items begins to drop 
sharply.  
Another observation from this study is that when the size 
of transitive association itemset gets larger than 3, there 
comes the chance to have multiple join items. That is, two 
or more join items can appear in the higher-degree transitive 
association itemset. Although it suffices to have transitive 
associations among three items, further development of the 
algorithm would be necessary to derive a useful knowledge 
concerning multi-linkage transitive associations. 
IV. CONCLUSION  
Transitive association rule mining is a novel approach to 
market basket analysis. It addresses the strategic issue that 
mining task is geared to the semantic relationship mining.  
It is possible to modify the TSAA algorithm such that we 
may use different level of minimum support as the size of 
the itemset(k) gets larger. As the itemset size gets larger, it 
will become harder to find itemsets that meet the minimum 
support level. Relaxing the minimum support level to a 
lower value might be a viable option to increase the 
possibility of getting more meaningful transitive association 
rules. Other modification of the algorithm, e.g., combination 
with MIS or Maxoccur is a likely possibility.  
The TSAA algorithm for transitive association mining 
can be applied to marketing campaigns, sales promotion, 
customer relationship management, and in many other areas. 
The join (linkage) items in the transitively associated 
itemsets carry special meaning depending on the situation.  
With a simple Excel programming of the TSAA 
algorithm we were able to obtain the transitive itemsets as 
well as the frequent itemsets. In this paper, the TSAA 
algorithm focused mainly on finding transitive association 
itemsets from the transaction database and a single user-
defined minimum relative support value was used. 
However, the algorithm can be further improved by 
adopting ‘weight adjusted minimum relative support’ in the 
future research. Currently, factors such as ‘profit margin, 
customer satisfaction, and strategic marketing value’ are 
being considered as the candidate to the derivation of the 
‘weight adjusted minimum relative support.’  
REFERENCES 
1. P. Adrians and D. Zantige, Data Mining, Addison Wesley 
(1996)  
2.  R. Agrawal, T. Imielinski and  A. Swami, “Mining Association 
Rules between Sets of Items in Large Database,” Proceedings 
of ACM SIGMOD, vol.22 no.2 (1993) 207  
3. R. Agrawal and R. Srikant, “Fast Algorithms for Mining 
Association Rules,” Proceedings of VLDB conference, vol.20 
(1994) 487  
4. Y. Bastide, G. Stumme and L. Lakhal, “Generating a Condensed 
Representation for Association Rules,” Journal of intelligent 
information systems, vol.24 no.1 (2005) 26-60 
5. D.S.Ha and B.H. Hwang, “Association rule mining technique 
for scarce and semantic items using relative support,” Journal of 
the Korea information science society, Vol.28 (2001) 577-586 
6. B.S. Ha, “Association rule mining technique for scarce and 
semantic data items,” Master’s Thesis, Chunnam University 
(2001) 
7. J. Han and M. Kamber, Data Mining Concepts and Techniques, 
Morgan Kaufmann, 2006  
8. B. Liu, W. Hsu, and Y. Ma, “Mining Association Rules with 
Multiple Minimum Supports,” Proceedings of the ACM 
SIGKDD(KDD-99) (1999) 337-341  
9. B. Liu, Y. Ma, C.K. Wong and P.S. Yu, Scoring the data using 
association rules, Applied intelligence, vol.18 no.2 (2003) 
10. J.S. Park and J.H. Yi, “A study on sequential pattern mining 
algorithm,” Statistics Research,  Vol.11 (2003) 56-73  
11. J.S. Park, W.K. Yu and K.H. Hong, “Association rule mining 
and its applications,” Journal of the Korea information science 
society, Vol.16 (1998) 
12. I.Y. Song, Image data mining with frequent itemsets and scarce 
and semantic items, Master’s Thesis, Seoul Industrial 
University (2004) 
1659
