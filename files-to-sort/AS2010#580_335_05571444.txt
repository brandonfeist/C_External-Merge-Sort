 1
Advanced Version of A riori Algorithm 
 
 
K.R.Suneetha, R. Krishnamoorti 
Bharathidasan Institute of Technology 
krs_mangalore@hotmail.com 
rkrish_26@hotmail.com 
 
 
Abstract 
 
 
 Apriori algorithm is a popular 
classical algorithm of association rule 
mining. This paper discusses the 
limitations of the original Apriori 
algorithm and presents an advanced 
version of Apriori algorithm to increase 
the efficiency of generating association 
rules. Our algorithm uses organized 
transaction selection approach, where in 
the rules are generated by picking up the 
transactions according to the highest 
order first basis and hence avoiding 
generation of un-necessary patterns that 
are not a part of the original database. 
The major advantage of our approach is 
that, the number of database scans is 
massively reduced, to the order of O(n) 
i.e., of the order of number of 
transactions available for frequent 
patterns generation. Hence overcomes 
the time complexity of original Apriori 
algorithm which is of the order O(en) .  
 
1. Introduction 
 
Data mining is the discovery of the 
hidden information found in databases 
and can be viewed as a step in knowledge 
discovery process. Data mining function 
includes clustering, classification, 
prediction and associations [1].  
Association rule is first introduced in 
1993 by R. Agrawal [2] [3], are used to 
identify relationship among a set of items 
in a database. These relationships are not 
based on inherent properties of the 
database themselves, but rather based on 
co-occurrence of the data items.  
 Association rules are used to show 
the relationship between data items and 
are formally defined as follows: Given a 
 P
2010 First International Conference on Integrated Intelligent Computing
978-0-7695-4152-5/10 $26.00 © 2010 IEEE
DOI 10.1109/ICIIC.2010.64
238
 2
set of   items I={I1,I2,.,Im} and a database 
of transaction D={t1,t2,...,tn} where 
ti={Ii1,Ii2,…,Iik} and Iij ? I, an association 
rule is an implication of the form x=>y 
where x,y ? I are set of items called item 
sets and x?y=? , x  is called antecedent 
& y  is consequent. The two important 
basic measures used in association rules 
are support (s) and confidence (?). 
Support (s) of an association rule 
x=>y is the percentage of transaction in 
the database that contain x?y. 
Confidence or strength (?) for an 
association rule x=>y is the ratio of the 
number of transaction that contain x?y to 
the number of transactions that contain x. 
Support(s) is the statistical 
significance of an association rule and the 
confidence of a rule indicates the degree 
of co-relation in the dataset between x 
and y. Apriori is the most established 
well known association rule algorithm 
and used in most commercial products. 
The algorithm generates the association 
rules from a large database using Support 
and Confidence value. Generally smaller 
Support value and larger Confidence 
value are used as thresholds. The original 
Apriori algorithm is explained in the next 
section. 
 
1.1 Apriori algorithm 
 
Input: Minimum Support, Minimum 
Confidence 
Output: Generation of Association rules 
Method: 
01. k = 1. 
02. Fk = {i | i ?I ? ? ({i}) ? N × minsup}. 
03. repeat 
04.  k = k+1. 
05. Ck = apriori-gen(Fk-1);  
       {Generate candidate item sets} 
06. for each transaction t ? T do 
07.Ct=subset(Ck, t); 
{Identify all candidates that belong to t} 
08. for each candidate item set c ? Ct do 
09.  ?(c) =  ?(c) + 1. 
                    {Increment support count} 
10. end for 
11. end for 
12.Fk = {c| c ?Ck ? ?(c)  ? N × minsup}. 
            {Extract the frequent k-itemsets} 
13. until Fk = ? 
14.  Result = U Fk. 
 
Following steps describes the working 
nature of the Apriori algorithm. 
• The algorithm initially makes a single 
pass over the data set to determine the 
support of each item. Upon completion 
of this step the set of all frequent 1- item 
sets, F1, will be known (step 1 and 2). 
• Next, the algorithm will iteratively 
generate new candidate k-item sets using 
the frequent (k-1)-item sets found in the 
previous iteration (step 5). Candidate 
generation is implemented using a 
function called apriori-gen(). 
• To count the support of the 
candidates, the algorithm needs to make 
an additional pass over the data set 
(Steps 6-10).The subset function is used 
to determine all the candidate item sets 
in Ck that are contained in each 
transaction t. 
239
 3
• After counting their supports, the 
algorithm eliminates all candidates’ item 
sets whose support counts are less than 
minimum support (step 12).  
• The algorithm terminates when there 
is no new frequent item sets generated, 
i.e., Fk=? (step 13). 
 
The basic draw back of this algorithm 
is i) generation of huge number of 
candidate sets ii) repeatedly scans the 
database for a large set of candidates by 
pattern matching, hence the original 
algorithm consumes more time and space. 
To overcome the deficiency we modified 
the Apriori and proposed the new 
approach of generating the rules. 
The structure of the paper is as 
follows: section2 covers relative work, 
section3 provides proposed model, 
section4 presents advanced version of 
Apriori algorithm and its details, section5 
shows theoretical analysis of time 
complexity, and section6 concludes the 
paper. 
 
2. Related Work 
 
The FP works [4] [5] on the basis of 
Depth-first search strategy, but it is 
infeasible if the database is huge and 
sparse. The FP-tree grows along with the 
growth of the number of transactions. In 
our work we are interested in getting 
itemsets that are interrelated rather than 
only the frequency.  
Existing Apriori based algorithms are 
focused on the way candidate itemsets are 
generated, usage of optimized data 
structures for storing itemsets, and 
implementation details. Several versions 
of Apriori algorithm are used in various 
research works. We surveyed all these 
versions and are presented below. 
The paper [6] improves the Apriori 
All algorithm by including user-ID 
during every step of candidate set 
generation and of scanning the data base 
to decide whether an item in the 
candidate set generation should be put 
into large set, which will be used to 
generate next candidate set. The 
enhanced version of Apriori algorithm is 
presented in the paper [7], the efficiency 
is improved by scanning the database in 
forward and backward directions. The 
authors Xiang-wei Liu and Pi-Lian[8] 
presented Improved Association Rule 
Mining algorithm. It reduces scanning 
time of candidate sets using hash tree. 
The paper [9] proposed an algorithm 
named IApriori algorithm, which 
optimizes the join procedure of frequent 
itemsets generated to reduce the size of 
the candidate itemsets. The algorithm 
presented in the paper [10] scans the 
database only once to generate a frequent 
itemsets, thereby saving time and 
increases efficiency. These methods even 
though focused on reducing time and 
space, in real time still needs 
improvement. We proposes new 
advanced version of Apriori algorithm to 
further reduce the time and is discussed 
in detail in the following sections.  
240
 4
3. Proposed Work 
 
 
 
The classical Apriori algorithm 
follows Bottom-Up approach, it starts 
from L1 (the single m element set) and 
proceeds till a Lk (k is lengthiest possible 
frequent pattern). At each pass, it 
determines which candidates are frequent 
by counting their occurrences that exceed 
the minimum support threshold(s). Then, 
it checks how often these candidates 
occur together to measure the support. 
Due to combinatory explosion, it leads to 
poor performance when frequent patterns 
sizes are large. In our proposed work the 
bottom-up approach is replaced by 
organized transaction selection approach.  
It starts with maximum element set and 
proceeds lower down the order that is  
from Lm down till L1. The following 
section presents the new advanced 
version of Apriori Algorithm in detail. 
 
4. Advanced Version of Apriori 
Algorithm 
 
Input: Database (D), minimum support   
                                                 (min_sup). 
Output: frequent item sets in L. 
Algorithm steps: 
 
T[array][array]=[Transaction][items] (D) 
k = No..of items in the longest transaction 
( in T[ ] ); 
for ( Ti = Tid  (longest unvisited T[ ] ) 
{ 
  for each Tl of order Ti.length in T[ ] 
    if (Ti = Tl) Ti.count++; 
    for(temp=0; temp< (k- i.length)  
         temp++) 
    for each Tj of order (k-temp) in T[ ] 
      If ( Ti is a subset of Tj ) 
        Ti.count++; 
  if(Ti.count >= min_sup) 
    Add Ti to L(i); 
} 
 
Description for the algorithm: 
• The transactional data base is 
considered as T[ ][ ]. Scan the 
transactional data base to find longest 
transaction with maximum number of 
items as Ttemp.  
• k=Ttemp.length(Number of items in 
Ttemp.)  
Organized transaction 
selection approach (top 
down) to identify frequent 
itemset
Association rule  
generation Transactions   
in Data Base
Figure  1. Block Diagram of proposed work 
241
 5
• For each transaction taken according to 
their order of length from T[][] as Ti, do 
the following steps. 
? For all transactions of length same 
as Ti.length as Tl 
¾  If  Ti == Tl then increment Ti.  
Count by 1 
? For all transactions of order > 
Ti.length; as Tj  
¾  If Ti belongs to Tj increment 
count of Ti by 1.   
? Finally check for the Support count 
validation and add to the 
corresponding Li. 
 
5. Time complexity Analysis 
 
This section provides a comparative 
analysis of time complexities between 
original Apriori algorithm and our new 
Advanced Version of Apriori algorithm. 
 
5.1 Time complexity of Apriori   
algorithm 
 
Worst Case conditions, 
• All transactions have m items, where  
m is number of  items 
• Each count needs for L(i) needs  
[n  mCi] operations, where n is  number 
of transactions 
• At the worst case there can appear 
frequent items of length m. 
 
Total Complexity of time  
? Time taken for generation of frequent 
items + Time taken for rule generation. 
 
Time taken for generation of frequent 
items 
= n  mC1 + nm C2 +  .. n. mCm  
=  n   
??? naseO n )( . 
 
Time for Rule generation of k terms set is 
given by 
 
  =  kC1 + kC2 + ........ + k Cn 
=
???
?
???
???
=
=
==
j
i
i
j
mk
mJk
C
kc 11
  
= O(n) 
Total time ? 
n. ???
?
???
?
+ ???
=
=
=
==
j
i
i
j
mk
mj
k
i
m
m
i
CC
kC
111
 
??? naseO n )( _____ (1) 
i.e., an exponential growth is observed. 
 
5.2 Time complexity of the 
proposed algorithm 
 
Satisfactory worst case conditions, 
• min – sup = 1. 
• k = m, m is number of items. 
?
=
? m
11
 Tj of order j (j < = n) 
242
 6
    i.e., there exists at least one transaction 
for all orders from 1 to m where j is 
transaction ID (J < n) ) 
 
Total Complexity of time ?Time for 
generation of frequent items + Time for 
rule generation.  
 
Time for generation of frequent items 
 = 
???
?
???
?
+???
?
???
?
?+?? ?? ?
==
1)1())1((
01
im
temp
m
i
nmn
 
Here (n-(m-1)) is got by assuming 
except (m-1) items all item are of order i 
for each ith  iteration.               
The     is for each 
(temp) iteration, there can exist at the 
max (n-1) higher order elements 
considering the current order elements 
considering the current one to be of the 
least order. 
And final validation for support count is 
indicated as 1. 
= 
??
???
?
+?+? ?? ?
==
im
temp
m
i
nmn
01
2)1()(
 
 = O(n)  as n ?? . 
 
Time for Rule generation of m terms 
sets = O(n)(same as in Apriori algorithm)          
 
 Total time ? 
 O(n) ______  (2) 
 
5.3 Comparative result 
 
From equation (1) we observe that 
original Apriori algorithm has an 
exponential time complexity of order 
O(en). 
From equation (2) we have a linear 
time complexity for our new Advanced 
version of Apriori algorithm i.e., of the 
order O(n). 
Hence proposed algorithm works 
efficiently compared to classical Apriori 
algorithm with a linear growth of timings 
with respect to number of transactions. 
 
6. Experimental Results 
 
NASA server web log file of 195MB 
data is used for experimental purpose. 
After preprocessing, the data base size is 
reduced to 36MB due to the elimination 
unnecessary data sets. From this 
preprocessed data 1891715 records were 
considered and from which, we obtained 
26938 unique users of 38714 sessions as 
a training data set. 
The experiments were run on 
Pentium® dual CPU working at 
1.73GHz, with 2GB of RAM. The 
observation is carried out under WAMP 
server.  
243
 7
The performances of both Apriori and 
proposed advanced version of Apriori are 
observed with respect to Execution time 
measured under number of PHP 
instruction norms.  
The following Tables 1.and Table 2. 
shows experimental values of number of 
transactions and execution time for 
Original Apriori and proposed Advanced 
Apriori algorithms respectively. 
 
Table 1.  Original Apriori 
  
Number of 
Transactions 
Execution 
Time(Sec) 
15 7.3
20 12.91
25 17.18
30 22.25
35 38
40 110.22
45 378
 
Table 2. Proposed Algorithm 
 
Number of 
Transactions 
Execution
Time(µsec) 
15 241
20 326
25 411
30 496
35 581
40 666
45 751
50 836
 
Graphs are plotted (Figure 2. and 
Figure 3.) for the above two tables.  
 
Original Apriori
0
50
100
150
200
250
300
350
400
0 10 20 30 40 50
No. of Transaction
Ec
e
c
u
tio
n
 
Ti
m
e
 (S
e
c
)
 
      
Figure  2. Original Apriori 
 
Advanced Apriori
0
100
200
300
400
500
600
700
800
900
0 20 40 60
No. of Transactions
Ex
e
c
u
tio
n
 
Ti
m
e
 
(µ 
Se
c
)
 
 
Figure 3. Proposed Algorithm 
 
The graph shows the proposed 
method has improvement over original 
Apriori algorithm.  
 
7. Conclusions 
 
In this paper, the advanced version of 
Apriori algorithm is proposed to 
overcome the deficiency of the basic 
244
 8
Apriori algorithm. The basic Apriori 
algorithm follows Bottom-Up approach 
where as the proposed method follows 
organized transaction selection approach. 
It avoids the generation of combinations 
of items which inturn reduces the number 
of database scans. The result shows 
improvement in execution time.  
  
8. References 
 
[1] Jiawei   Han   and   Micheline   Kamber, 
Data Mining Concepts and Techniques, 
Morgan  Kaufmann Publishers,  2001.  
 
[2] R. Agrawal, T. Imielinski, and A. 
Swami, “Mining Association Rules between 
sets of Items in Large Database”, Proceedings 
of the 1993 ACM SIGMOD International 
Conference on Management of Data, Vol.22, 
Issue 2, 1993, pp.207-216. 
 
[3] R. Agrawal and R. Srikant, “Fast 
Algorithms for Mining Association Rules”, 
Proceedings of the 20th International 
Conference on Very Large Data Bases, 1994, 
pp. 487-499. 
 
[4] Jiawei Han, Jian Pei, Yiwen Yin and 
Runying Mao, “Mining Frequent Pattern 
without Candidate Generation: A Frequent-
Pattern Tree Approach”, Data Mining and 
Knowledge Discovery, Vol-8, 2004, pp.53-87. 
 
[5] Jiawei Han, Jian Pei, “Mining Frequent 
Patterns by Pattern-Growth :Methodology and 
Implications”, SIGKDD Explorations, 
Volume 2, Issue 2, 2006, pp.30-36. 
 
[6] WANG Tong and HE Pi-Lian, “Web 
Log Mining by Improved Apriori All 
Algorithm”, Transaction on Engineering, 
Computing and Technology, V4, February 
2005 ISSN 1305-5313. pp. 97-100. 
 
[7] Wei   Zhang, Zhang Wei, Dongme Sun 
Shaohua Teng, and Haibin Zhu, “An 
Algorithm to Improve Effectiveness of 
Apriori”, Proceedings of sixth International 
Conference on Cognitive Informatics, 2007 
IEEE, pp.385-390. 
 
[8]  Xiang-Wei Liu and Pi-Lian He, “The 
Research of Improved Association Rules 
Mining Apriori Algorithm”, Proceedings of 
the third International Conference on Machine 
Learning and Cybernetics, Shanghai, 26-29 
August 2004.pp. 1577-1579. 
 
9] Yiwu Xie, Yutong Li, Chunli Wang, 
Mingyu Lu, “The Optimization and 
Improvement of the Apriori Algorithm”, 
International Symposium on Intelligent 
Information Technology Application 
Workshops, 2008 IEEE, pp.1101-1103. 
 
[10] Zhao Hong, Gang yang, Lei Wang and 
Ying liu, “An Implementation of Improved 
Apriori Algorithm”, Proceedings of 8th 
International Conference on Machine 
Learning and Cybernetics, 2009 IEEE, pp. 
1565-1569.            
 
 
            
245
