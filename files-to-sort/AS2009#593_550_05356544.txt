Secure Two and Multi-party Association Rule Mining
Saeed Samet and Ali Miri
Abstract—Association rule mining provides useful knowledge
from raw data in different applications such as health, in-
surance, marketing and business systems. However, many real
world applications are distributed among two or more parties,
each of which wants to keep its sensitive information private,
while they collaboratively gaining some knowledge from their
data. Therefore, secure and distributed solutions are needed
that do not have a central or third party accessing the parties’
original data. In this paper, we present a new protocol for
privacy-preserving association rule mining to overcome the
security ?aws in existing solutions, with better performance,
when data is vertically partitioned among two or more parties.
Two sub-protocols for secure binary dot product and cardinality
of set intersection for binary vectors are also designed which
are used in the main protocols as building blocks.
Index Terms—Data mining; Association rules; Mining meth-
ods and algorithms; Security and privacy protection; Dis-
tributed data structures.
I. INTRODUCTION
Privacy-preserving data mining is an emerging challenge in
computer science because of the importance of security and
privacy of individuals when data is distributed among two
or more parties, each of which is not willing, and is often
prohibited, to reveal its private and sensitive information to
the others. Therefore, standard algorithms for data mining
have to be replaced with secure protocols. Many secure
protocols have been proposed so far for data mining and
machine learning techniques such as [8], [3], [19], [16], [10]
for decision tree classi?cation, [21], [23] in Na?¨ve Bayesian
Classi?cation, [7], [15], [6], [12] for clustering, [4], [13], [11]
for Neural Networks, and [20] for Bayesian Networks.
One of the other popular and useful techniques in data
mining is the association rule mining, in which associations
and/or correlations among items in a large dataset are discov-
ered. This technique has a wide variety of applications such
as in health and medical research, business and marketing,
homeland security, etc. There are some privacy-preserving
protocols for this technique proposed by [14], [17], [22]. In
this paper, we introduce new protocols for privacy-preserving
association rule mining when data is heterogeneously dis-
tributed among two or more parties. We also provide a review
of existing work, highlighting some of their potential security
problems, and a comparison to our proposed protocols. In
Section II, the association rule is brie?y reviewed. In Section
III, we ?rst explain why we need two building blocks, Secure
Binary Dot Product and Cardinality of Set Intersection, and
then we present our sub-protocols and main protocols for a
privacy-preserving association rule. Correctness, complexity
Saeed Samet and Ali Miri are with the School of Information Tech-
nology and Engineering (SITE), University of Ottawa, Ottawa, Canada
(email: {saeed.samet,ali.miri}@uottawa.ca).
and security analysis are also discussed in this section.
In Section IV, experimental results and comparisons with
previous work are shown. Section V is dedicated to related
work and some of its potential security problems. Finally,
conclusions and future work are described in Section VI.
II. ASSOCIATION RULE MINING
Association rule mining has been widely used since its
introduction by Agrawal and Imielinski [1] to help discover
patterns and associations in datasets. A short de?nition of
this technique follows.
Suppose X and Y are two sets of items. Given a database
S of tuples, a tuple t will satisfy rule X ? Y if t contains X
and also contains Y . The percentage of tuples satisfying X
and Y to the set of all possible tuples is called the Support
of X ? Y , and the ratio of the support of X ? Y to the
support of X is called the con?dence of X ? Y . Thus,
formally we have:
SupportX?Y =
?
S
CountX,Y
|S|
Con?denceX?Y =
SupportX?Y
SupportX
Normally there are two support and con?dence thresholds
in every application, to which support and con?dence of
rules are compared. The association rule is usually applied
on binary data, and non-binary data can be easily converted
to binary data using discretization. The major steps of the
standard algorithm for the association rule is shown in
algorithm 1 [1]. Function apriori-gen generates the set of
Algorithm 1 Association Rule Mining Procedure
1: L1 = {large 1-itemsets}
2: for (k=2; Lk?1 = ?; k++) do
3: Ck = apriori-gen(Lk?1)
4: for all candidates c ? Ck do
5: Compute c.count
6: end for
7: Lk = {c ? Ck|c.count ? min.support}
8: end for
9: return L =
?
k
Lk
candidate itemsets Ck using its argument Lk?1. Details are
discussed in [1], [2].
III. NEW PROTOCOLS FOR PRIVACY-PRESERVING
ASSOCIATION RULE MINING
In this section, we introduce two new, and secure, protocols
for Secure Binary Dot Product (SBDP) and Cardinality of
Proceedings of the 2009 IEEE Symposium on Computational Intelligence  
in Security and Defense Applications (CISDA 2009) 
©2009 Crown Copyright
TABLE I
RAW BINARY DATA OF THREE VECTORS V1 , V2 AND V3 .
V1 V2 V3
1 1 1
0 1 1
1 0 1
1 0 0
1 1 1
0 1 1
Set Intersection (CSI) when we are dealing with two and
more than two parties, respectively. However, we ?rst explain
why we need these sub-protocols for vertically partitioned
data. As we saw in the procedure for computing the support
and con?dence of each rule, because each attribute belongs
to one party, values of each attribute can be considered as
a vector. Now, suppose P1 and P2 have binary vectors V1
and V2 respectively. If they want to compute the number of
rows that have value ”1” in both vectors, they have to run a
SBDP together. In the same way, with three or more parties,
CSI must be jointly computed. To illustrate the concept, let’s
consider the values in Table I as an example. In this table we
can see that |
3?
Vi
i=1
| = 2. Here, set intersection means the set
of row numbers that have value ”1” in all vectors. In these
protocols, we assume that parties are semi-honest, i.e. they
follow the protocols but may keep intermediate information
to infer others’ data.
A. Secure Binary Dot Product (SBDP)
Suppose P1 and P2 each of which has a binary vector, V1
and V2, respectively, want to jointly and securely compute the
dot product of their vectors. They will perform the following
steps:
1) P1 converts its vector, V1, to the summation of two
non-binary vectors, U11 and U12.
2) P2 does the same and constructs two non-binary vec-
tors, U21 and U22 from V2.
V1 = U11 + U12 V2 = U21 + U22
3) Now, the scalar product of the binary vectors V1 and
V2 is transformed to four scalar product of non-binary
vectors.
V1 · V2 = (U11 · U21) + (U11 · U22) +
(U12 · U21) + (U12 · U22)
Each dot product can be securely computed using a
Secure Dot Product (SDP) protocol. One of the best
techniques, for security and ef?ciency, is presented by
Goethals et al. [5]. Suppose X = (x1, x2, · · · , xN ) and
Y = (y1, y2, · · · , yN ). P1 creates a pair of public and
private keys using a homomorphic encryption, such as
Pallier [9], and sends the public key to P2. P1 sends
Ci = e(xi)(1 ? i ? N) to P2. P2 computes W =
N?
i=1
Cyii , generates its private share S2 and sends W
? =
W ?e(?S2) to P1. P1 computes its private share S1 =
d(W ?) = (X · Y ) ? S2. This procedure is applied for
all SDPs between P1 and P2.
4) Now each party has four private shares such that the
summation of these numbers is the dot product of V1
and V2.
Note that if we apply the SDP protocol directly on binary
vectors, such as in [18], privacy of the parties is no longer
preserved. P2 has the public key, and therefore by encrypting
”1” and comparing it with the received encrypted items from
P1, P2 is able to reveal the private vector of P1.
B. Cardinality of Set Intersection (CSI) among three or more
parties
When we are dealing with more than two parties, SBDP
is not applicable and to ?nd the support or con?dence of a
rule, we have to compute the CSI of the vectors involved.
However, we cannot simply apply secure protocols for this
problem on binary vectors because of security ?aws discussed
before. We now present a new and secure protocol for
computing the CSI for more than two parties with binary
vectors. Suppose P1, · · · , Pn, (n ? 3), each of which has a
binary vector, want to jointly and securely compute CSI of
their vectors. This means they have to count the number of
the rows whose values in all vectors are ”1”. They will take
the following steps:
1) P1, by using a random number generator, converts its
vector, V1, to the summation of n vectors such that:
V1 = V1,1 + V1,2 + · · ·+ V1,n (1)
2) P1 generates public and private keys (e, d) for an
additive homomorphic encryption and publishes the
public key, e, to the other parties.
3) P1 encrypts V1,2, V1,3, · · · , V1,n using the public key
and sends e(V1,i) to Pi, 2 ? i ? n.
4) P2 computes e(V2) and sends V ?2 = e(V2) ? e(V1,2) to
P3.
5) Pi, 3 ? i ? n ? 1, computes e(Vi) and sends V ?i =
e(Vi) ? e(V1,i) ? V ?i?1 to Pi+1.
6) Pn generates a random vector Un, encrypts this vector,
e(Un), computes V ?n = e(Vn) ? e(V1,n) ? V ?n?1 ? e(Un)
and sends it to P1.
7) P1 decrypts V ?n, and sets U1 = V1,1 + d(V
?
n).
8) P1 and Pn jointly generate a random permutation, ?,
and create U ?1 = ?(U1) and U
?
n = ?(Un) respectively.
Then they divide these vectors to n ? 2 parts and
send parts U ?1,k and U
?
n,k, 2 ? k ? n ? 1 to the
corresponding party (P2, · · · , Pn?1).
9) Each party Pk, 2 ? k ? n? 1, computes U ?1,k ?U ?n,k,
and counts the rows with the value n. The summation
of these counters is the ?nal result for the CSI of the
n parties.
Note that this protocol can be also applied to two parties if we
have a trusted third party to receive the ?nal permuted vectors
and compute the counts. To make the protocol more clear,
we give a small example. Suppose the number of parties is
n = 4, each vector’s dimension is N = 6, and following are
the vectors owned by the parties:
P1 : V1 = (1, 0, 1, 1, 0, 1)
P2 : V2 = (1, 1, 0, 1, 1, 1)
P3 : V3 = (1, 0, 1, 1, 1, 1)
P4 : V4 = (1, 0, 1, 0, 0, 1).
Let’s assume that:
V1 = V1,1 + V1,2 + V1,3 + V1,4
where:
P1 : V1,1 = (5,?9, 0, 12,?1, 6)
V1,2 = (?3, 4, 5,?18, 0, 1)
V1,3 = (1,?6,?3, 5,?7,?9)
V1,4 = (?2, 11,?1, 2, 8, 3).
Now, P1 sends following encrypted vectors to the other
parties:
P1 : e(V1,2) ?? P2
e(V1,3) ?? P3
e(V1,4) ?? P4.
P2 computes V ?2 as follows and sends to P3:
P2 : V ?2 = e(V2) ? e(V1,2)
= e(1, 1, 0, 1, 1, 1)
? e(?3, 4, 5,?18, 0, 1)
= e(?2, 5, 5,?17, 1, 2) ?? P3.
P3 computes V ?3 as follows and sends to P4:
P3 : V ?3 = e(V3) ? e(V1,3) ? V ?2
= e(1, 0, 1, 1, 1, 1)
? e(1,?6,?3, 5,?7,?9)
? e(?2, 5, 5,?17, 1, 2)
= e(0,?1, 3,?11,?5,?6) ?? P4.
P4 generates U4, computes V ?4 and sends it to P1:
P4 : U4 = (10,?3, 0, 6, 1,?5)
V ?4 = e(V4) ? e(V1,4) ? V ?3 ? e(U4)
= e(1, 0, 1, 0, 0, 1)
? e(?2, 11,?1, 2, 8, 3)
? e(0,?1, 3,?11,?5,?6)
? e(10,?3, 0, 6, 1,?5)
= e(9, 7, 3,?3, 4,?7) ?? P1.
P1 decrypts V ?4 , and computes U1 and U
?
1:
P1 : U1 = d(V ?4) + V1,1
= (9, 7, 3,?3, 4,?7)
+ (5,?9, 0, 12,?1, 6)
= (14,?2, 3, 9, 3,?1)
U ?1 = ?(U1)
= ?(14,?2, 3, 9, 3,?1)
= (3, 3,?1, 14, 9,?2).
P4 calculates U ?4:
P4 : U ?4 = ?(U4)
= ?(10,?3, 0, 6, 1,?5)
= (1, 0,?5, 10, 6,?3).
P1 and P4 divide each of U ?1 and U
?
4, respectively, to two
parts and send to P2 and (P3 as follows:
P1 : U ?1,2 = (3, 3,?1) ?? P2
U ?1,3 = (14, 9,?2) ?? P3.
P4 : U ?4,2 = (1, 0,?5) ?? P2
U ?4,3 = (10, 6,?3) ?? P3.
P2 and P3 compute C2 and C3, respectively:
P2 : U ?1,2 ? U ?4,2 = (2, 3, 4) =? C2 = 1
P3 : U ?1,3 ? U ?4,3 = (4, 3, 1) =? C3 = 1.
Therefore, the CSI of these vectors is C = C2 + C3 = 2.
These two sub-protocols, SBDP and CSI, help us to
securely run the procedure for association rule mining.
Whenever we want to count the number of records that satisfy
a rule, ?rst each party speci?es its attributes involved in that
rule. Then, if those attributes belong to two parties, SBDP is
used to compute the number of records satisfying the rule.
Otherwise CSI will be used for this computation. To compute
the support of a rule, that number is divided by the number
of all records, which is public. Computing the con?dence of
a rule, say X ? Y , is also straightforward because it is the
division of the support of that rule by the support of the left
side of the rule, i.e. X .
Correctness of the Algorithm We denote the cardinality
of the set intersection for n vectors, Vi, . . . , Vn, as |
n?
Vi
i=1
|.
If we apply a permutation on all the vectors, the result
does not change and it is just applied in our protocol to
preserve the privacy of the parties’ inputs. Therefore, to show
the correctness of the algorithm we ignore the permutation.
According to the algorithm:
U1 = V1,1 + d(V ?n)
= V1,1 + d(e(Vn) ? e(V1,n) ? V ?n?1 ? e(Un))
= V1,1 + d(e(Vn) ? e(V1,n) ? e(Vn?1) ?
e(V1,n?1) ? V ?n?2 ? e(Un))
...
= V1,1 + d(e(Vn) ? e(Vn?1) ? . . . ? e(V2) ?
e(V1,n) ? e(V1,n?1) ? . . . ? e(V1,2) ? e(Un))
= V1,1 + d(e((Vn + Vn?1 + . . . + V2) +
(V1,n + V1,n?1 + . . . + V1,2) + Un))
= V1,1 + (Vn + Vn?1 + . . . + V2) +
(V1,n + V1,n?1 + . . . + V1,2) + Un
= (V1,1 + V1,2 + . . . + V1,n) +
(V2 + . . . + Vn) + Un
= V1 + V2 + . . . + Vn + Un
? V1 + V2 + . . . + Vn = U1 ? Un
Each party k, 2 ? k ? n ? 1, computes some elements of
U1 ? Un. Thus, each row in which the result is n means
that the values in that row for all vectors are 1. Therefore,
the number of ns in U1 ? Un is the ?nal result for the CSI,
which shows correctness of the algorithm.
Security Analysis
• None of the Pis, (2 ? i ? n), knows the private
key of the encryption system, and therefore cannot
decrypt e(V1,i) received from P1. Furthermore, V1,is
are randomly generated by P1 and even by colluding,
P2, P3, · · · , Pn are not able to reveal those vectors,
except by guessing.
• Pi, (3 ? i ? n), receives
n?1?
i=2
e(Vi) ? e(V1,i) from Pi?1.
However, by the above reason, is not able to decrypt
the received value to ?gure out other parties’ private
information.
• Un is randomly generated by Pn, and also V ?n?1 is the
production of all private vectors belong to the other par-
ties. Thus, even after decrypting e(Un)?Vn?V1,n?V ?n?1,
P1 cannot know Un and Vi, (2 ? i ? n).
• Random permutation is known only to P1 and Pn,
and each party P2, · · · , Pn?1 only receives a partial
permuted vector. Therefore, private information of P1
and Pn is not revealed to the other parties.
Complexity Analysis Table II shows the complexity of the
algorithm. The communication cost of the whole protocol
is (n ? 3)N compared with 2nN in [22], in which N
is the number of items in each vector (or the number of
database records), and n is the number of the parties involved.
Also, for computational costs, we have one cryptographic key
pair generation, (2n ? 2)N encryption and one decryption
compared with two key pair generations at,nN + (n ? 1)
encryption and one decryption in [22].
TABLE II
COMPLEXITY OF THE PROPOSED ALGORITHM.
Step Communication cost Computational cost
1 — n random vector generations
2 n? 1 keys Public and private keys generation
3 n? 1 vectors n? 1 vector encryptions
4 One vector One vector encryption,
one component-wise vector multiplication
5 n? 3 vectors n? 3 vector encryptions,
one component-wise vector multiplication
6 One vector One random vector generation,
one vector encryption,
one component-wise vector multiplication
7 — One vector decryption,
addition of two vectors
8 n? 2 vectors A random permutation generation,
two vector permutations
9 n numbers n? 2 vector subtractions and additions
IV. EXPERIMENTAL RESULTS
To show the applicability of the proposed protocol, we
have implemented them with different number of parties
and encryption key lengths, and have compared the results
with previous work in the literature. The Java programming
language and the Remote Method Invocation package (RMI)
have been used in this implementation. Hardware speci?ca-
tions for this experiment are as follows:
• Operating System: Windows XP
• CPU: 1.83 GHZ
• RAM: 1 GB
The implementation has been tested with key lengths of 512,
1024, and 2048 bits, for two, three, ?ve, and ten parties.
Table III shows the cost of encryption for different numbers
of items to be encrypted, and Tables IV, and V show the
performance estimations of the protocol for different key
bit lengths and comparison with the previous work, which
has been tested only with key bit length of 512, assuming
100k of transactions with different numbers of attributes.
The worst case, in which all the attributes are frequent 1-
itemsets, is assumed in this experiment. The execution time
for our protocol represents total time taken by all the parties
involved.
TABLE III
TOTAL COST OF THE ENCRYPTION (IN SECONDS).
Number of Key size
items encrypted 512 1024 2048
1k 1.6 7.8 35.9
10k 15.97 77.91 352.53
100k 159.93 779.95 3394.76
V. RELATED WORK
Privacy-preserving data mining has two main approaches,
randomization and Secure Multi-party Computation (SMC).
These approaches can be applied to data mining techniques
such as classi?cation, clustering, support vector machines
TABLE IV
EXTRA TOTAL COST (IN HOURS) TO ACHIEVE PRIVACY IN WORST-CASE
SCENARIO WITH KEY BIT LENGTH OF 512 AND 100K TRANSACTIONS.
US:OUR PROTOCOL, VC:VAIDYA & CLIFTON’S PROTOCOL [17]
Number of Number of Parties
attributes 2 3 5 10
10 (US) 1.29 2.21 3.90 8.43
10 (VC) 2.59 3.89 6.49 12.97
50 (US) 6.61 11.10 19.90 42.17
50 (VC) 13 19.5 32.5 65
TABLE V
WORST-CASE EXTRA TOTAL COST (IN HOURS) TO ACHIEVE PRIVACY
WITH KEY BIT LENGTH OF 1024 AND 100K TRANSACTIONS.
Number of Number of Parties
attributes 2 3 5 10
10 6.45 10.82 19.40 41.16
50 32.45 54.15 97.40 205.78
and association rules. In this paper we focus on privacy-
preserving association rule mining using the second ap-
proach, i.e. Secure Multi-party Computation, when data is
vertically partitioned among two or more parties.
Vaidya and Clifton [14] proposed a protocol for privacy-
preserving association rule mining when data is vertically
partitioned between two parties. By considering boolean data,
they use a secure dot product (SDP) to compute the support
and con?dence of each rule. They use an algebraic solution
for SDP by placing values in equations which are masked
with random values. However, as indicated in their paper, it
has security problems with boolean values.
Vaidya and Clifton [17] also present a protocol for the
CSI in the two and multi-party cases which can be used
in vertically partitioned data. They use commutative one-
way hash functions, through which parties transform their
private sets and compute the intersection of these sets. In this
protocol, each party ?rst converts its binary vector to a non-
binary one by keeping the order of ones in the original vector.
For instance, if a party has a vector V = (1, 0, 0, 1, 1, 0, 1),
it will be transformed to V ? = (1, 4, 5, 7). Although the
protocol is not dealing with binary vectors any more, at the
end of the protocol each party knows the number of 1’s in
the private vectors belonging to the other parties.
Zhan et al. [22] introduced two algorithms in the two
and multi-party cases for privacy-preserving association rule
mining when data is vertically partitioned among the parties.
They used additive homomorphic encryption as the main
building block. In the two-party case, one party, say P1,
after generating encryption and decryption keys, selects a
random vector R and a random number X and sends
e(A1i +Ri ?X) to P2, in which A1i and Ri are the i-th item
of P1’s vectors, A1, and R, respectively. P2 then computes
n?
i=1
e(A1i+Ri?X)?A2i and sends it to P1. P1, by decrypting
this number and computing mod X of the decrypted value,
obtains the result of the dot product. The main problem in
this protocol is that the ?rst party, by knowing R and X ,
after decrypting the number received from P2 and before
computing mod X of the result can ?gure out P2’s private
vector with high probability. We give a simple example to
show the security problem of the protocol.
Suppose A1 = (1, 0, 0, 1, 1, 1) and A2 = (1, 0, 1, 0, 0, 1)
respectively belong to P1 and P2, and also that P1 selects
R = (5,?3, 2, 1, 4, 6) and X = 11. Therefore, P1 sends
(e(56), e(?33), e(22), e(12), e(45), e(67)) to P2. P2 com-
putes e(56) ? e(22) ? e(67) (because the other components
of A2 are zero) and sends it back to P1. Now, P1 ?rst
decrypts this number and obtains 145 and then computes
(145 mod 11) which is 2. Next, P1, by using these two
numbers, is able to arrange different possible combinations
for A2 and to decrease them to the ones that satisfy the result.
In this example, (1, 0, 1, 0, 0, 1) is the only vector satisfying
the ?nal result. Thus the number of possible vectors for A2
decreases to 1, and P1 can exactly obtain P2’s private vector.
The main reason for information leakage and security
problems in [22] is that it works directly with binary values
which restricts the possible values of the second party’s
vector. Also, the information received by the parties is not
balanced, i.e. the ?rst party receives more information than
the second party which helps the former to reduce the privacy
of the latter. Our protocol is completely balanced both parties
having the same amount of intermediate information through
the protocol. We also work with non-binary vectors after the
?rst step, and therefore the possible values are not restricted
to 0 and 1.
For the multi-party case in [22], the public key and the
private key, e and d, as well as the integer number X
are known to all parties except one (Pn). Therefore, the
possibility of Pn knowing these values is very high. Although
it is assumed that parties involved in the protocol are semi-
honest, by conspiring between Pn and only one party among
P1 to Pn?1 , e, d, and X are transferred to Pn and the other
parties’ private vectors will be revealed to Pn. However, in
our protocol for the multi-party case, only two parties P1,
and Pn need to be trusted to not transfer private key, d (note
that d is only known to P1) and permutation ?, to the other
parties. None of the other parties is able to help a party breach
the protocol’s security.
VI. FUTURE WORK AND CONCLUSIONS
In this paper, two secure and ef?cient protocols have
been presented for privacy-preserving association rule mining
in the two and multi-party cases when data is vertically
partitioned among the parties. These protocols use two new
sub-protocols, that use additive homomorphic encryption, for
secure binary dot product and cardinality of set intersec-
tion. We have also reviewed the existing protocols in this
area and have pointed out some of their potential security
problems. The comparison of these work to ours shows that
our proposed protocols can avoid these possible security
shortcoming, while achieving a better communication and
computational performance. One possible future direction is
to apply our new sub-protocols as building blocks in other
privacy-preserving data mining techniques such as sequential
pattern mining, support vector machines, classi?cation, and
clustering, especially when using binary data where preserv-
ing privacy is more dif?cult because the attribute values are
restricted to 0 and 1.
VII. ACKNOWLEDGMENTS
This work was partially supported by a grant from Ontario
Centres of Excellence (OCE).
REFERENCES
[1] Rakesh Agrawal, Tomasz Imielinski, and Arun N. Swami. Mining
Association Rules Between Sets of Items in Large Databases. In
Proceedings of the ACM SIGMOD International Conference on Man-
agement of Data, pages 207–216, Washington, DC, USA, 1993.
[2] Rakesh Agrawal and Ramakrishnan Srikant. Fast Algorithms for
Mining Association Rules in Large Databases. In Proceedings of the
20th International Conference on Very Large Data Bases (VLDB94),
pages 487–499, Santiago de Chile, Chile, 1994.
[3] Rakesh Agrawal and Ramakrishnan Srikant. Privacy-Preserving Data
Mining. In Proceedings of the ACM Special Interest Group on
Management of Data Conference (SIGMOD), pages 439–450, Dallas,
TX, USA, 2000.
[4] M. Barni, C. Orlandi, and A. Piva. A Privacy-Preserving Proto-
col for Neural-Network-Based Computation. In Proceeding of the
8th Workshop on Multimedia and Security, pages 146–151, Geneva,
Switzerland, 2006.
[5] Bart Goethals, Sven Laur, Helger Lipmaa, and Taneli Mielika¨inen.
On Private Scalar Product Computation for Privacy-Preserving Data
Mining. In Proceedings of the 7th Annual International Conference in
Information Security and Cryptology (ICISC), pages 104–120, Seoul,
Korea, 2004.
[6] Geetha Jagannathan and Rebecca N. Wright. Privacy-Preserving
Distributed k-Means Clustering over Arbitrarily Partitioned Data. In
Proceeding of the eleventh ACM SIGKDD international conference on
Knowledge discovery in data mining (KDD), pages 593–599, Chicago,
IL, USA, 2005.
[7] Somesh Jha, Louis Kruger, and Patrick McDaniel. Privacy Preserving
Clustering. In Proceedings of the 10th European Symposium On
Research In Computer Security (ESORICS), pages 397–417, Milan,
Italy, 2005.
[8] Yehuda Lindell and Benny Pinkas. Privacy Preserving Data Mining. In
Proceedings of the 20th Annual International Cryptology Conference
(CRYPTO), pages 36–54, Santa Barbara, CA, USA, 2000.
[9] Pascal Paillier. Public-Key Cryptosystems Based on Composite Degree
Residuosity Classes. In Proceedings of the International Conference
on the Theory and Application of Cryptographic Techniques (EURO-
CRYPT), pages 223–238, Prague, Czech Republic, 1999.
[10] Saeed Samet and Ali Miri. Privacy Preserving ID3 Using Gini
Index over Horizontally Partitioned Data. In Proceeding of The
6th ACS/IEEE International Conference on Computer Systems and
Applications (AICCSA), pages 645–651, Doha, Qatar, 2008.
[11] Saeed Samet and Ali Miri. Privacy-Preserving Protocols for Perceptron
Learning Algorithm in Neural Networks. In Proceeding of The 4th
IEEE International Conference on Intelligent Systems (IS), pages 10–
65–10–70, Varna, Bulgaria, 2008.
[12] Saeed Samet, Ali Miri, and Luis Orozco-Barbosa. Privacy Preserving
k-Means Clustering in Multi-Party Environment. In Proceedings of the
International Conference on Security and Cryptography (SECRYPT),
pages 381–385, Barcelona, Spain, 2007.
[13] Jimmy Secretan, Michael Georgiopoulos, and Jose Castro. A Privacy
Preserving Probabilistic Neural Network for Horizontally Partitioned
Databases. In Proceedings of the International Joint Conference on
Neural Networks (IJCNN), pages 1554–1559, Orlando, FL, USA, 2007.
[14] Jaideep Vaidya and Chris Clifton. Privacy Preserving Association Rule
Mining in Vertically Partitioned Data. In Proceedings of the Eighth
ACM SIGKDD International Conference on Knowledge Discovery and
Data Mining, pages 639–644, Edmonton, Alberta, Canada, 2002.
[15] Jaideep Vaidya and Chris Clifton. Privacy-Preserving k-Means Clus-
tering over Vertically Partitioned Data. In Proceeding of the eleventh
ACM SIGKDD international conference on Knowledge discovery in
data mining (KDD), pages 206–215, Washington, DC, USA, 2003.
[16] Jaideep Vaidya and Chris Clifton. Privacy-Preserving Decision Trees
over Vertically Partitioned Data. In Proceedings of the 19th Annual
IFIP WG 11.3 Working Conference on Data and Applications Security
(DBSec), pages 139–152, Storrs, CT, USA, 2005.
[17] Jaideep Vaidya and Chris Clifton. Secure Set Intersection Cardinality
with Application to Association Rule Mining. Journal of Computer
Security, 13(4):593–622, 2005.
[18] Rebecca N. Wright and Zhiqiang Yang. Privacy-preserving Bayesian
Network Structure Computation on Distributed Heterogeneous Data. In
Proceedings of the 10th ACM SIGKDD International Conference on
Knowledge Discovery and Data Mining (KDD2004), pages 713–718,
Seattle, USA, 2004.
[19] Ming-Jun Xiao, Liu-Sheng Huang, Yong-Long Luo, and Hong Shen.
Privacy Preserving ID3 Algorithm over Horizontally Partitioned Data.
In Proceedings of the Sixth International Conference on Parallel
and Distributed Computing, Applications and Technologies (PDCAT),
pages 239–243, Dalian, China, 2005.
[20] Zhiqiang Yang and Rebecca N. Wright. Privacy-Preserving Compu-
tation of Bayesian Networks on Vertically Partitioned Data. IEEE
Transactions on Knowledge and Data Engineering, 18(9):1253–1264,
2006.
[21] Justin Zhan and Stan Matwin. Privacy Preserving Na?¨ve Bayesian
Classi?cation over Vertically Partitioned Data. In Proceedings of the
IEEE Workshop on Foundation of Semantic Oriented Data and Web
Mining (ICDM), 2005.
[22] Justin Zhan, Stan Matwin, and LiWu Chang. Privacy-Preserving
Collaborative Association Rule Mining. In Proceedings of the 19th
Annual IFIP WG 11.3 Working Conference on Data and Applications
Security (DBSec), pages 153–165, Storrs, CT, USA, 2005.
[23] Justin Zhan, Stan Matwin, and LiWu Chang. Privacy-Preserving
Naive Bayesian Classi?cation over Horizontally Partitioned Data. In
Data Mining: Foundations and Practice, volume 118, pages 529–538.
Springer Berlin / Heidelberg, 2008.
