The Java Implementation of Apriori algorithm Based on Agile Design Principles 
YongLi 
College of Computer Science and Technology 
Xinjiang Normal University, Urumqi, China 
E-mail: liyong@live.com 
Abstract-Association rules model is widely used in data 
mining and the apriori is the most famous association rule 
mining algorithm. Based on the classic Apriori association 
rules algorithm, this paper gives the UML class design 
diagram based on the agile design principles and selects the 
popular OOP language Java to achieve. In practical 
applications, it can be used in a variety of data application. 
Key words-A priori algorithm; UML; Java Implementation; 
Agile Design Principles 
I . INTRODUCTION 
Data Mining, also known as knowledge discovery, is 
the main research of database and artificial intelligence, and 
association rule mining is an important data mining 
research model. Association rule mining can find the 
meaningful inter-mining and unexpected association from a 
large number of items. These association rule can provide 
valuable information on a variety of decision-making, 
although the association rules is accompanied by the rapid 
development of the retail industry, but it is not only in 
commercial applications, but also in computer hardware, 
speech synthesis , network security and other fields. 
Various existing association rule mining algorithm can 
be divided into search algorithms, hierarchical algorithms, 
data set partition algorithm, and the sampling algorithm. 
Apriori is the most famous association rule mining 
algorithm, which is proposed by R. Agrawal and so on. 
This paper gives the UML class design diagram by the 
design principles of agile, and selects the popular OOP 
language Java to achieve. In practical applications, it can be 
used in a variety of data application by object-oriented 
language achieved. 
II. THE MODEL OF ASSOCIATION RULES 
Set I = (ih i2 . . .  im) is the set of all projects, D is the 
transaction database; transaction T is a project subset (T ? 
I). Each transaction has a unique transaction identifier-Tid. 
Set A is a key set which is consisted of a collection by the 
project. Transaction T include A items set, if and only if A 
? T. If the item set A contains k items, claimed it as "item 
set k". The total number of the percentage of item set A 
occurs in the transaction database D is called item set 
support. If the item set support given by the user more than 
the minimum support threshold, we say the set is the 
978-1-4244-5540-9/10/$26.00 ©2010 IEEE 
329 
frequent item sets [1]. 
Association rule is the logical implication type of the 
form X => Y, XCI, YCI, and X n Y = 0. If s% 
transactions contain X U Y in transaction database D, we 
claims that association rule X => V's support is s%. If the 
degree of support for item set X denoted support (X), then 
the rules of trust is support (X U Y) / support (X). As: 
support (X => Y) = P (X U Y); confidence (X => Y) = P 
(Y / X). 
Association rule is the rule of support and trust meet 
the threshold given by the user. Discovery of association 
rules need to implement the following two steps: (1) 
Identify all the frequent item sets; (2) Generated the trust 
rule by the frequent item sets to meet the minimum 
threshold. 
III. THE THOUGHT APRIORI ALGORITHM 
Apriori algorithm has great influence in the field of 
mining. It was derived from algorithms using a priori nature 
of frequent item sets (Prior) knowledge. Apriori association 
rules algorithm includes two steps: First, through iteration, 
retrieve a transaction database of all frequent item sets, 
which support is not less than the threshold set by the user 
item set; the second step is using of frequent item sets to 
construct confidence to meet the minimum rules for the 
user. A potential frequent item sets followed the principle 
of "a subset of frequent item must be frequent item" and " 
the superset of non-frequent item sets must be 
non-frequent." Specific steps are[2,3]: 
(1) Through a single trip to scan the database D to 
calculate the support of a set of individual, finds the set of 
Ll that is from the frequent item. 
(2) Connection Step: In order to generate the Lk set 
that is from frequent k item sets, set collection Ck of 
potential frequent k item sets is generated. The set of 
potential frequent item sets is obtained by the JOIN 
operation. If (p, q E Lk-1), P = (Ph P2, P3, ... , Pk-2, Pk-l), q = 
(qh q2, q3, _ . _ , qk-2, qk-l), and When (1:Si<k-1), Pi = qi; 
when(i=k-1), Pi-l:;fqi-h then P U Q = (Ph P2, P3, . _ . ,  Pk-2, Pk-h 
qk-l) is the Ck elements of potential frequent k item sets. 
The Ck elements of potential frequent k item sets may 
become the collection of item sets that compose of the 
frequent k item sets. 
(3) Pruning step: Since Ck is a superset of Lk, there 
may be some elements are not frequent. When Ck is a huge 
amount of computation, in order to reduce the size of Ck, 
Apriori comply with the following property: any 
non-frequent (k-l) is not a subset of frequent item sets. So 
when one of the potential k item set (k-l) is not a subset of 
the members of the Lk-h then the potential frequent item 
sets can be frequent and can be removed from the Ck. This 
is the Apriori pruning thought. 
(4) Through the single scan database D, calculating the 
support of various item sets in Ck. 
(5) Removed the set that is not meet the minimum support 
from Ck, generated the Lk set that is from the frequent k 
item sets. 
Through the iterative loop, repeat the above steps 2-5 
until no new frequent item sets generated in the collection 
date, Apriori algorithm is obtained to meet the minimum 
support of all frequent item sets. 
IV. THE IMPLEMENTATION BASED ON AGILE PRINCIPLES 
Apriori association rules algorithm is two steps: first, 
through iteration, retrieve a transaction database of all 
frequent item sets, which support is not less than the 
threshold set by the user item set; the second step, use of 
frequent item sets to construct confidence to meet the 
minimum rules for the user[ 4]. 
A The principles of agile design 
In the design process of optimization of the Apriori 
algorithm, we should fully take into account the principles 
of agile design[5,6]: (1) OCP (unified and open principles); 
(2) LSP (Liskov substitution principle); (3) SRP (single 
responsibility principle); (4) ISP (Interface Isolation 
principles). The results of the design were shown in Figure 
1. 
«interface» 
,--. Apriorilnterface 
A,.,M. inlm' 
6"""<0' 
confidenceForRuieO 
+gellerateAssociatiollS 
prulleRuiesO 
r "I 
Apriori ItelllSet 
-minSup:Double +ltems 
-minCon:Double -count:int 
-upperMinSuPP011:Double - +t()t?lTI': ';nt 
-lowerMinSupp011:Double +collfidellceForRuieO 
-val?ation:Double -colltailledByO 
+allRules:Vector -soltitembyStlPpoltO 
+instances:lnstance +mergeAllItemSetsO 
-genera teRuiesO -selvp Ions V 
+pruneltemSetsO +generateAssociationsO 
+findLargeltemSetsO -pnUleRuiesO 
+findAllRulesO -subtractO 
+SUPPOltO 
Figure 1. The results of the design 
330 
B According to the principles of agile design (1): Design 
of an abstract class "Associator class" 
It is designed for the parent class of all the association 
rules mining algorithms. There are many association rule 
algorithms, such as Apriori, AorioriTid, FP-Growth and so 
on. All of these algorithms are the subclass of Associator 
class. It has three main methods: 
(l)Void generateAssociations(Instances data); I*create 
the main method of association rules, association rules 
parameters to generate the initial data set of all the records 
set *1; 
(2)Void forName(String associatorName,String[] 
options); 1* abstract class Associator used to obtain a 
subclass objects, parameters for the child class object to 
generate the required string parameter array *1; 
(3)Void makeCopies(Associator model,int num); I*get 
the current number of copies Associator instance, num 
indicated that the number of copies *1. 
C According to the principles of agile design (2), (3): 
Design of the Apriori class 
Apriori class inherits Associator class and implements 
the Aprior algorithm. The introduction of the beginning of 
Apriori association mining algorithm, the user can set the 
number of rules you want to generate. First of all, according 
to a given minimum support for mining association rules, if 
the number of rules generated is less than the given number 
will be given a minimum support to reduce the amount each 
time, and a new round of excavation, until the resulting 
number of association rules is not less than the number 
specified by the user or until the limit has been reduced to a 
minimum[7 ,8,9]. 
The following are the key members of the Apriori class: 
Double minSup, minCon; II Minimum support, 
minimum confidence 
Double upperMinSupport; IIUpper limit of minimum 
support 
Double 10werMinSupport; I I The lower limit of 
minimum support 
Double variation; IIMinimum support changes in the 
value of each iteration 
Vector allRules; liThe resulting set of association 
rules, stored in the vector 
Instance instances; liThe set of association rules of 
data items by user 
The following are the key methods of the Apriori class: 
setOptions(String[] options); IISet all the parameter 
values 
generateAssociations(Instances instances); IISatisfy 
the minimum support to generate all the frequent item 
sets, and then from these to generate the association 
rules to meet the minimum confidence. 
findLargeItemSets(Instances instances); IIGenerate 
minimum support of the frequent itemsets 
findAllRules(Vector rules); IIGenerate all 
association rules 
D According to the principles of agile design (1), (4): 
designed "AprioriInteiface" interface and "ItemSet" class 
The "AprioriInterface" interfaces, "ItemSet" class 
used to store the item sets generated in the association rules 
mining process, as well as connects item sets and pruning 
operations, and generate the corresponding frequency set. 
The following are the key members: 
int[] Items; IIUsing an integer array to represent 
Item sets 
int count; liThe number of transactions of the items 
set to change 
int totalTransactions; liThe total number of 
transactions 
The following are the key methods: 
confidenceForRule(ItemSet precondition, ltemSet 
consequence); IIGet the confidence of association rules 
containedBy(Instance instance); IICheck the instance 
in the current item sets 
sortitembySupport(Vector attributes); II Rank the 
item set according the size 
deleteItemSets(Vector itemSets, int minsup); 
IIRemove all items that does not meet the minimum 
support set 
generateRules( double mincon, Vector hashtables, int 
numItemsInset); IIGenerate the association rules that 
meet the minimum confidence 
mergeAllItemSets(Vector itemSets, int size, int 
totalTrans ); IICombined K-1 item sets and generated 
the K item set 
pruneltemSets(Vector toPrune, Hashtable kMinsOne); 
IIPruning on the K item set by checking the frequent items 
ofK-1 item set. 
pruneRules(Vector rules, double mincon); 
IIAccording to the minimum support pruning association 
rules 
supportO; IIOutput the support of item set 
moreComplexRules(Vector rules, int numltemsInset, 
int numltemInConsequence, double minCon, Vector 
hashtables); IIAccording to a given minimum confidence, 
331 
the length of association rules and the length of 
association rules generated the associate rules that its 
length is more than 1. 
V.CONCLUSION 
Apriori algorithm is the most typical solution in 
association rules algorithm. In this paper, we researches the 
basic model of association rules and Apriori algorithm, 
gives the UML design class diagram by the design 
principles of agile and selects the popular OOP language 
Java to achieve. Finally, using Eclipse to achieve the 
algorithm, and achieved satisfactory results. 
This paper is supported by Science Foundation for The 
Excellent Youth Scholars of Xinjiang Normal University. 
REFERENCE 
[I] Pen Hui-ling. An Algorithm of Classification Rules Mining Based on 
Association Rules Mining [J]. Control 
&Automation ,2006.11-3: 198-200 
[2] Yang Jian-bin. Improvement and Realization of Association Rule 
Mining Algorithm in Data Mining [J]. Control 
&Automation ,2006.7-3:195-197 
[3] Wang Zhuo-bang. Based on web services of data mining system's 
key technology and research [J] The Master thesis of Suzhou 
University. 2006.5 
[4] Li Xiang-yang. Predicting Prosodic Parameters for Speech Synthesis 
with Improved Apriori Algorithm [J] Journal of Guilin University of 
Electric Technology, 2005. 
[5] Wang Wei. Research on predicting prosodic parameters for Chinese 
synthesis by data mining approach [1]. Chinese Journal of 
Acoustics,2003.1 
[6] Robert C.Martin,Micah Martin.Agile Principles,Patterns,and 
Practices in C#. People's Post and Telecommunication Publishing 
House. 2008.1 
[7] Ontobroker.http://ontobroker.aifb.uni-karlsruhe.de 
[8] Alexander Maedche. Ontology Learning for the Semantic 
Web[M].Normel:Kluwer Acedemic Publishers,2008 
[9] Eduardo Mena,Arantza.Ontology-Based Query Processing for Global 
Information Systems[M].Norwel1:Kluwer Academic Publishers.2008 
