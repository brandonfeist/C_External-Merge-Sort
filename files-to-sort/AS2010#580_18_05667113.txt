Mining Frequent Development Patterns of roles in 
Open Source Software 
 
Lin Yuan1,2, Huaimin Wang1, Gang Yin1, Dianxi Shi1, Xiang Li1, Bixin Liu
1. School of Computer 
3 
National University of Defense Technology 
Changsha Hunan, China 
Email: jack.nudt@gmail.com  
2. School of Electronic Technology 
Information Engineering University 
Zhengzhou Henan,China 
Email: fkefss@gmail.com 
3. Institute of Electronic System 
Engineering of China,  
Beijing, China 
 
 
 
Abstract—Participants of a software project have a significant 
impact on whether the project could achieve success, and the 
relevant information can reflect some trustworthy properties of 
software. By studying a large number of OSS projects in 
SourceForge, the role configuration of these projects is 
analyzed, and some latent frequent patterns are discovered in 
this paper. It prepares the ground for quantification and 
utilization of the 
1.  INTRODUCTION  
software trustworthiness evidence from the roles 
information. 
Keywords : trusted software; trustworthiness evidence; 
association rules; metrics; 
Since the software appeared, how to assess the quality of 
software objectively and efficiently and prevent huge losses 
caused by software problems has been one of the core issues in 
software engineering. With the development of the Internet and 
appearance of trusted software conception, trustworthy 
evaluation technology of software has become an urgent 
problem in the field of software trustworthy research. Software 
trustworthy assessment is a complex, multi-angle, multi-level 
issue, which is influenced by the software application, domain, 
environment, and many factors outside software itself, and the 
process of evaluating the trustworthiness of software is very 
sophisticated and tedious.   
With the rapid development of open source software (OSS), 
OSS attracts more and more attention of researchers. OSS 
provides free and vast software resources ranging from low-
quality individual efforts to high-quality enterprise solutions. In 
their whole life cycle, OSS produced a very large amount of 
data with various types. These data may provide some new 
ideas for software trustworthy assessment, yet up to now they 
still have not been made full use of
In the OSS software repository, some information about 
participants of project development can reflect some 
trustworthy properties of software authentically and effectively 
[
 in the field of software 
trustworthy assessment. 
1][2]. So, if we can quantify and make use of the information 
about participants of software reasonably, it should be able to 
improve the limitation of some metrics in software trustworthy 
assessment to some extent. Therefore, this would be very 
significant for producing an objective, accurate and easy-to-use 
assessment mechanism of software trustworthy in the future. 
On the basis of previous work, by mining a large amount of 
OSS projects in SourceForge, we will continue analyzing the 
information about the roles that participants acted as in OSS 
projects with association rules and making an intensive study 
of role configuration of OSS. 
The rest of the paper is structured as follows. Some 
conceptions and definitions are described in Section 2.  
Previous and related work are concluded in Section 3. The 
famous Apriori algorithm and our computation model are 
introduced in Section 4. In section 5, the results analyzed by 
Apriori algorithm are presented and the frequent patterns of 
roles in OSS projects are discussed. Section 8 concludes and 
mentions of the future work. 
2. RELATED CONCEPTIONS 
2.1. TRUSTED SOFTWARE 
Since the early 70s in the 20th century, the conception of 
trusted system was presented for the first time by Anderson. 
After that, the trustworthiness of information system is always 
concerned by the academia and industry. 
Trusted software usually refers to the software whose 
behavior and results are always consistent with peoples’ 
expectation and would be able to provide continuous service 
even if it was interfered [3]. As appearance of the trusted 
software conception, the quality of software is no longer 
limited to traditional software properties, such as the reliability, 
maintainability, availability, security and so on, and it attempts 
to understand the essence of software quality to a deeper extent. 
2.2. SOFTWARE TRUSTWORTHINESS EVIDENCE 
Software trustworthiness evidence is the evidence which 
could be validated and can be used to affirm
4
 the facts of 
software quality. It must satisfy the following three conditions 
[ ]. 
1. Objectivity: Evidence is objective facts and independent of 
peoples’ will. T
2. Relevance: Evidence is real relevance to the trustworthy 
properties to be proved. 
his is the essential feature of evidence. 
2010 Symposia and Workshops on Ubiquitous, Autonomic and Trusted Computing
978-0-7695-4272-0/10 $26.00 © 2010 IEEE
DOI 10.1109/UIC-ATC.2010.113
444
3. Availability: Evidence could be collected, reviewed, 
judged, accessed and inspected in accordance with 
established procedure. 
2.3. EVALUATION MODELS OF OPEN SOURCE SOFTWARE 
Different approaches have been presented to evaluate OSS 
projects. The Open Source Maturity Model developed by 
Bernard Golden of Navicasoft [5] and the CapGemini Open 
Source Maturity Model [6] aim to offer a methodology for 
assessing and evaluating the suitability of open source software. 
The Center for Open Source Investigation at Carnegie Mellon 
West, and Intel Corporation have developed the Business 
Readiness Rating model (BRR) [7], which lets IT managers 
quickly make informed and educated decisions about open 
source software. Atos Origin Corporation conceived and 
formalized the method for Qualification and Selection of Open 
Source software (QSOS) [8]. 
TABLE I.   ASSESSMENT CATEGORIES OF OPENBRR 
These models adopt almost similar evaluation process: 
scoring and weighting all of the related metrics and properties 
of OSS projects, comparing and selecting the project which is 
considered the most suitable. The assessment categories of 
BRR are listed in Table ?. 
Index Assessment 
Category 
Descr iption 
1 Functionality  How well will the software meet the average 
user’s requirements?  
2 Usability  How good is the UI? How easy to use is the 
software for end-users? 
How easy is the software to install, configure, 
deploy, and maintain? 
3 Quality  Of what quality are the design, the code, and the 
tests? How complete and error-free are they?  
4 Security  How well does the software handle security 
issues? How secure is it? 
5 Performance  How well does the software perform? 
6 Scalability  How well does the software scale to a large 
environment? 
7 Architecture How well is the software architected? How 
modular, portable, flexible, extensible, open, and 
easy to integrate is it? 
8 Support  How well is the software component supported? 
9 Documentation  Of what quality is any documentation for the 
software? 
10 Adoption  How well is the component adopted by 
community, market, and industry? 
11 Community  How active and lively is the community for the 
software? 
12 professionalism  What is the level of the professionalism of the 
development process and of the project 
organization as a whole? 
I
3. RELATED WORK 
n the process of evaluating OSS projects, many metrics in 
these models are not only hard to obtain, but also difficult to 
score even after they had been obtained, such as end-user UI 
experience, quality of professional support, number of books in 
Amazon, leading team, training, documentations, and so on. 
Therefore it is very important to find some evidence in 
software repository, which would be obtained easily and 
quantified convincingly. 
SourceForge is the largest OSS development web site in the 
world. By June 2009, more than 230,000 software projects 
have been registered by more than 2 million users. It provides 
large amounts of real data covering the entire software life 
cycle for academic research.  
In SourceForge, the recommendation and rank of projects 
are determined by activity scores. It means the rank of project 
is actually one kind of quantization of project’s recent activity, 
in generally, we are able to consider that the projects with 
higher ranks indicate that they have enjoyed higher popularity 
and won more widespread applications. So the rank can reflect 
the some facets of projects quality. 
There are 7 kinds of projects statuses in SourceForge, 
which are planning, pre_alpha, alpla, beta, production/stable, 
mature, and inactive.  
During OSS software development, roles are used to 
distinguish different development tasks. After combining the 
roles which actually undertaking the same activities,  28 kinds 
of roles were found in all SourceForge projects, which are 
listed in Table ?
TABLE II.  THE ROLES IN SOURCEFORGE 
. 
Index Role Name Index Role Name 
1 Advisor/Mentor/Consultant 2 Cross Platform Development 
3 All-Hands Person 4 Project Manager 
5 Analysis/Design 6 Requirements Engineering 
7 Build Engineer 8 Researcher 
9 Content Management 10 Sr. Customer Support Manager 
11 Database Administrator 12 Support Manager 
13 Developer 14 Support Technician 
15 Director of Operations 16 Tester 
17 Distributor/Promoter 18 Translator (I18N/L10N) 
19 Doc Writer 20 Systems Programmer/Analyst 
21 Editorial/Content Writer 22 Unix Admin 
23 Graphic/Other Designer 24 UI Designer 
25 Packager(.rpm, .deb, etc) 26 VP of Media Operations 
27 Web Designer 28 No specific role 
By analyzing the OSS projects in SourceForge[1], it can be 
concluded that the maximum
In the further work[
 number of roles in one project is 
13, and the number of projects with number of roles more than 
8 is very small, so only those projects with no more than 7 
roles are considered in this paper. It has been proved that there 
is strong relationship between the number of roles in projects 
and the rank of projects. The projects with higher rank would 
be inclined to have more roles. In other words, it means that the 
projects with higher rank would be organized better and the 
work of these projects would be divided and assigned better. 
2], in order to retrieve the role structure 
model that can provide better support (e.g. helping projects to 
get higher rank) for the development of OSS projects, the 
absolute centralities and relative centralities of each role in 
different rank intervals are calculated by social network 
analysis. And for the purpose of characterizing the role 
structure of OSS projects in SourecForge rationally, the relative 
centralities of some major roles were compared and the role 
structure of OSS projects is constructed. 
445
The previous work mentioned above prepared the ground 
for quantification and utilization of the 
4. MINING FREQUENT PATTERNS OF ROLES 
software 
trustworthiness evidence based on role information. 
In the field of data mining, association rule mining is a 
popular and well researched method. Association rule mining 
could discover interesting associations and/or correlation 
relationships among large set of data items. Association rules 
show attributes value conditions that occur frequently together 
in a given dataset. A typical and widely-used example of 
association rule mining is “market basket analysis”. An 
example of such an association rule is the statement that 90% 
of transactions that purchase bread and butter also purchase 
milk. 
4.1. FORMAL MODEL OF MINING ASSOCIATION RULES 
Given a set of transactions D, the problem of mining 
association rules is to generate all association rules that have 
support and confidence greater than the user-specified 
minimum support (minsupport) and minimum confidence 
( minconfidence ) respectively.  
The formal model of mining association rules [9] is given 
as follows. 
/HW ? = I1, I2, ..., Im be a set of binary attributes, called 
items. Let T be a database of transactions. Each transaction t is 
represented as a binary vector, with t[k] = 1 if t bought the item 
Ik, and t[k] = 0 otherwise. There is one tuple in the database for 
each transaction. Let X be a set of items in ?. So a transaction t 
satisfies X if for all items Ik
An association rule is defined as the form X ? I
 in X, t[k] = 1. 
j, where X 
is a set of items in ?, and Ij
The rule X ? I
 is a single item in ? that is not 
present in X.  
j is satisfied in the set of transactions T with 
the confidence factor 0 ? c ? 1 iff at least c% of transactions 
in T that satisfy X also satisfy Ij. The notation X ? Ij | c is 
used to specify that the rule X ? Ij
4.2. APRIORI ALGORITHM 
 has a confidence factor of c. 
The minconfidence is a threshold of confidence factor defined 
by user. 
The support for a rule is defined to be the fraction of 
transactions in T that satisfy the union of items in the 
consequent and antecedent of the rule. The minsupport is 
defined as a threshold, which is used to generate all rules which 
were concerned about. Those combinations in concerned rules 
which meet the threshold are called large itemsets, and all the 
other combinations that do not meet the threshold are called 
small itemsets. 
Another motivation for support constraints comes from the 
fact that we are usually interested only in the rules with the 
support above some minimum threshold. If the support is not 
large enough, it means that the rule is not worth consideration 
or that it is simply less preferred. 
Apriori[10] is the best-known algorithm to mine association 
rules and frequent itemsets in transaction database. It uses a 
breadth-first search strategy to counting the support of itemsets 
and uses a candidate generation function which exploits the 
downward closure property of support. 
The Apriori algorithm is described as follows: 
 L1
 for ( k = 2; L
 = {large 1-itemsets}; 
k-1 ?  ? ; k++ ) do begin 
   Ck = apriori-gen(Lk-1 ); // New 
candidates 
   forall transactions t  D do begin 
    Ct = subset(Ck,t); // Candidates 
contained in t 
    forall candidates c  Ct do 
     c.count++; 
   end 
   Lk = {c  Ck | c.count  minsup } 
 end 
 Answer = k Lk
? D: transactions database; each database record is a 
<TID, item> pair, where TID is the identifier of the 
corresponding transaction. 
; 
The notations used in the algorithms are explained below: 
? Lk 
? C
: Set of large k-itemsets (those with minimum 
support). Each member of this set has two fields: i) 
itemset and ii) support count. 
k
? ?????: Set of candidate k-itemsets when the TIDs of the 
generating transactions are kept associated with the 
candidates. 
: Set of candidate k-itemsets (potentially large 
itemsets). Each member of this set has two fields: i) 
itemset and ii) support count. 
The first pass of the algorithm simply counts item 
occurrences to determine the large 1-itemsets. A subsequent 
pass, say pass k, consists of two phases. First, the large itemsets 
Lk-1 found in the (k-1)th pass are used to generate the candidate 
itemsets Ck. Next, the database is scanned and the support of 
candidates in Ck is counted. For fast counting, we need to 
efficiently determine the candidates in Ck
 
 that are contained in 
a given transaction t. 
The mining process is described in Fig.1.
Figure 1.  Process of mining association rules with Apriori 
446
4.3. MINING FREQUENT PATTERNS IN OSS WITH APRIORI 
4.3.1.  Data selection 
In our studies, the selection of data source relies on two 
factors: project status and its rank. We selected the projects 
which are beta, production/stable, or mature status, and before 
10000 in rank list. There are total 7,779 projects meeting both 
conditions in SourceForge in Jun 2009. As we are only 
concerned about the difference of role structure in different 
rank intervals, and in order to observe the difference clearly, 
then we choose 2 rank extent, [1,3000] and [7000,10000], for 
mining the frequent patterns. 
We collected all related data of projects satisfied above 
conditions, which include all participants in target projects and 
roles information about what each participant acted as in every 
project.  
4.3.2. Data Structure 
For analyzing the relationship among roles and revealing 
the frequent patterns in OSS projects, the data structure is built 
as follows. 
The information about roles of projects is defined as a 
matrix?and it can be described as Tn×m . 
Tn×m =
?
?
?
t1,1 t1,2 t1,3 ? t1,m
t2,1 t2,2 t2,3 ? t2,m
t3,1 t3,2 t3,3 ? t3,m
? ? ? ? ?
tn,1 tn,2 tn,3 ? tn,m?
?
?
 
Where ti,j can be calculated as follows? 
ti,j =  ?
1;     if there is at least one  rj  in developers of project pi;
0;      otherwise;                                                                           
 
The variables n, m represent the total numbers of projects 
selected and role types respectively.  
The set of target projects is denoted by P = {p1,p2,…,pn}, 
and the same to roles by R = {r1,r2,…,rn
In order to find all the frequent patterns of roles in target 
OSS projects, association rules are set as R? ?  I, where the 
R? ? R . During the mining process, the problem of mining 
frequent patterns could be transformed into the form as follows. 
}. The sets P and R 
are taken as the transaction database and items respectively. 
For all target projects to be analyzed, the new specific item 
i which is always set as 1 is added into transaction database. In 
the association rules R? ?  I, only those rules in which the 
consequent satisfy I =  [i] is considered. As a consequence of 
this method, the minconfidence can be neglected and we can 
only focus on the minsupport of association rules. This allows 
us to pay major attention to the combination of antecedents. In 
other words, we can concentrate on the question of role 
configuration itself.  
In practice, if we expect to explore the projects before 3000 
in rank list, we only need to set the item i of these projects as 1, 
and set i of others projects as 0. This method could greatly 
reduce the workload of analysis and conduce to mining the 
frequent patterns of roles in a large number of OSS projects. 
5. EXPERIMENT AND RESULTS 
The number of participants within an OSS project would 
determine the configuration of roles greatly, so projects with 
different number of participants may have different frequent 
patterns of roles. Consequently, all of the target projects are 
divided into 5 groups based on the number of participants, 
which are described in Table ?
TABLE III.  GROUPS DIVIDED BY THE NUMBER OF PARITCIPANTS 
. 
index Number of developers 
G1 2-4 
G2 5-10 
G3 11-20 
G4 21-30 
G5 ?31 
5.1. DISTRIBUTION OF FREQUENT PATTERNS OF ROLES 
Each group is analyzed respectively in two different rank 
extent by Apriori algorithm with the minsupport = 5%, and the 
conclusion is given in Table ?
TABLE IV.  STATISTIC OF FREQUENT PATTERNS WITH MINSUPPORT 5% 
. 
Group_id Rank range Number of 
projects 
Number of frequent patterns 
1* 2 3 4 5 6 
G1 [1,3000] 591 3 2 0 0 0 0 
[7000,10000] 1094 3 2 0 0 0 0 
G2 [1,3000] 470 10 10 2 0 0 0 
[7000,10000] 443 5 5 0 0 0 0 
G3 [1,3000] 287 11 27 7 0 0 0 
[7000,10000] 339 11 18 7 0 0 0 
G4 [1,3000] 95 15 46 44 12 0 0 
[7000,10000] 76 11 24 15 1 0 0 
G5 [1,3000] 117 20 86 143 103 29 2 
[7000,10000] 58 17 51 48 14 0 0 
*  The number represents the quantity of  antecedent in association rules 
5.2. RESULT ANALYSIS  
There are some reasons in the statistical perspective to 
believe that the projects with higher rank would be more 
trustworthy than others, so we only inspect the frequent 
patterns of roles appearing in rank [1,3000]. Limited by the 
paper length, we take the G5, in which the data about roles is 
the most reasonable, as example, and the support of frequent 
patterns in top5 is listed in Table ?
1. To the role configuration, only the support of 
ProjectManager & Developer is beyond 70%, and the 
support of the rest patterns is not high. The highest support 
in the case of 3 roles is about 35%, in case of 4 roles is 
about15%, and 5 is even lower than 5%. 
. 
Based on the mining result, several observations can be 
discovered and be discussion: 
2. In the G1 group, there is no obvious difference of role 
configuration between the rank extent [1, 3000] and [7000, 
10000]. There are only 3 kinds of frequent patterns of roles 
with support more than 30%, which are ProjectManager 
447
(35.36%,36.02%) , Developer (92.72%,93.42%), and 
ProjectManager & Developer (30.46%,30.35%). The 
reason may be that in these projects the number of total 
participants is no more than 4. And so it can be concluded 
that in this kind of projects the labor division is not clearly, 
most kinds of development are undertook by few 
developers or project managers. 
3. Except G1 and the case with only 1 role, the number of 
frequent patterns in rank extent [1,3000] is obvious greater 
than in the extent [7000,10000]. The phenomenon shows 
that the projects with higher rank usually own more kinds 
of roles, and it may be judged that these projects generally 
were well organized. Such as in G2, the support of frequent 
patterns with TranslatorI18NL10N, DocWriter, Tester, 
WebDesigner in rank extent [1,3000] is higher than the 
extent [7000,10000]. There is similar 
Except G1, it can be believed that the frequent patterns in 
rank extent [1,3000] could reflect the most reasonable role 
configuration in OSS projects. 
phenomenon in other 
groups. 
TABLE V.  FREQUENT PATTERNS OF G5 IN TOP5 
6.  CONCLUSION AND FUTURE WORK 
Some information related to participators and role structure 
of projects can reflect some properties of OSS projects and be 
obtained from software repository automatically, so they could 
be taken as a kind of evidence in software trustworthy 
assessment. Through a large number of OSS projects in 
SourcForge, some interesting frequent patterns of roles are 
discovered by association rules. Based on the work in this 
paper, it can be believed that the data about roles and 
participators from software repository can be used to improve 
or even replace some metrics in the existing evaluation models, 
and will help evaluate OSS projects efficiently and 
automatically. This work is part of the research on evaluation 
of OSS projects by using the roles, tasks and contributions of 
projects participators, and can be regarded as a further step of 
previous work. 
ACKNOWLEDGEMENT 
This work was partially funded by National High-Tech 
Research and Development Plan of China under Grant 
(2007AA010301), National Natural Science Foundation of 
China under Grant (No.60903043), and the ?Core electronic 
devices, high-end general chip and fundamental software? 
Major Project(2009ZX01043-001-04). 
REFERENCES 
[1] Lin Yuan, Huaimin Wang, Gang Yin, et al. Trustworthy Evaluation 
Technology of Software Based on Roles. Journal of Beijing University 
of Technology, Vol.36, No.5, 611--615(2010). 
[2] Lin Yuan, Huaimin Wang, Gang Yin, et al. Mining Roles of Open 
Source Software. In 2nd International Conference on Software 
Engineering and Data Mining, IEEE Press?Chengdu(2010). 
[3] LIU Ke, SHAN Zhi-guang, WANG Ji, et al. Basic research of 
trustworthy software” survey of the grand research plan. China Science 
Fund, 2008(3): 145-151.  
[4] TRUSTIE-STC, Software Trustworthiness Evidence Framework 
Specification (V2.0), http://www.trustie.net/download/ STEFS-2.0.pdf. 
[5] Golden's OSMM, http://www.navicasoft.com/pages/ 
[6] CapGemini's OSMM. http://www.seriouslyopen.org/nuke/html 
[7] OpenBrr. Business Readiness Rating for Open Source. (2005-1-
10)[2009-10-20], http://www.openbrr.org/BRR2005.pdf. 
[8] Atos Origin. Method for Qualification and Selection of Open Source 
software (V1.6). http://www.qsos.org/ download/qsos-1.6-en.pdf. 
[9] R. Agrawal, C. Faloutsos, and A. Swami. Efficient similarity search in 
sequence databases. In Proc. of the Fourth International Conference on 
Foundations of Data Organization and Algorithms, Chicago, October 
1993.  
[10] Agrawal, R. and Srikant, R. 1994. Fast algorithms for mining association 
rules. In Proc. of the 20th VLDB Conference, pp.487-499. 
Number  
of roles 
Frequent patterns of role configur ation Suppor t 
2 ProjectManager & Developer 70.085% 
Tester & Developer 41.026% 
Tester & ProjectManager 35.043%  
DocWriter & Developer 33.333% 
AllHandsPerson & Developer 31.624% 
3 Tester & ProjectManager & Developer 35.043% 
DocWriter & ProjectManager & 
Developer 27.350% 
AllHandsPerson & ProjectManager & 
Developer 24.786% 
Nospecificrole & ProjectManager & 
Developer 23.932% 
TranslatorITLT & ProjectManager & 
Developer 23.077% 
4 Nospecificrole & Tester & 
ProjectManager & Developer 15.385% 
AllHandsPerson & Tester & 
ProjectManager & Developer 15.385% 
DocWriter & Tester & ProjectManager & 
Developer 15.385% 
Nospecificrole & DocWriter & 
ProjectManager &Developer 13.675% 
WebDesigner & Tester & ProjectManager 
& Developer 12.821% 
5 Nospecificrole & AllHandsPerson & 
Tester & ProjectManager & Developer 8.547% 
Nospecificrole & DocWriter & Tester & 
ProjectManager & Developer 8.547% 
PorterCrossPlatformDevel & 
WebDesigner & Nospecificrole & 
ProjectManager & Developer 6.838% 
PorterCrossPlatformDevel & 
WebDesigner & DocWriter & 
ProjectManager & Developer 6.838% 
448
