Incremental FP_Growth Mining Algorithm Based on Web Information Extraction 
Chen Hong-ye   Jin Guo-ying 
School Information and Electronic Engineering 
Zhejiang University of Science and Technology 
Hangzhou, China 
Email: anchenhy@163.com 
 
Abstract—This paper studies the incremental updating 
problem of frequent itemsets when the transaction database 
and the minimum support change in the Web information 
extraction. An algorithm of incremental FP_Growth mining 
based on frequent pattern tree is proposed and used to extract 
the transaction data in the second-hand IT trading site and 
generate association rules. Analysis and test show that the 
algorithm is efficient and feasible. 
Key words: Web information extraction; frequent itemsets; 
incremental FP_Growth mining algorithm; association rules 
I. INTRODUCTION  
Web Information Extraction (WebIE), a type of 
information extraction[1] sourcing from the Web, studies 
how to extract the implied information points on the half-
structured Web pages spreading on the Internet, and express 
in a more structured, semantically clearer form. A mass of 
data sources are available for data mining, and a variety of 
data mining research can be done based on the different 
characteristics of data. Among the mining methods, the 
association rules mining can find the association relationship 
hidden in the data and have already become a commonly 
used method in the association knowledge discovery. For 
example, the Apriori algorithm[2] Agrawal, etc. proposed can 
mining association rules, but generates a large number of 
candidate item sets during getting association rules. In order 
to avoid generating the candidate item sets, Han, et al. 
proposed the FP_Growth algorithm[3] which generates 
frequent itemsets based on FP_tree. FP_Growth algorithm 
adopts the recursive strategy of pattern growth, and its 
mining is a process of divide-and-conquer, but the 
bottleneck of the algorithm’s efficiency is mainly on the 
scanning sorted frequent items in turn to construct FP_tree. 
When a database is very large, to construct the FP _tree 
based on memory is not realistic. 
And releasing the Web data is with the characteristics of 
increment and mass, sustaining data releasing will bring a 
large amount of data in a short time; at the same time, in 
order to find the rules users are interested, it is necessary to 
adjust two thresholds of the minimum support and the least 
credibility until the interested and understandable rules are 
found. To face this dynamical interaction, the association 
rules mining algorithm must adapt to the characteristics of 
Web information, and has the capability of incremental 
mining. Researchers have developed the updated methods of 
frequent itemsets from different aspects, such as, FUP 
algorithm[4] solves the updating problem of frequent itemsets 
when the content of the database increases, IUA algorithm 
solves continually updating problem of frequent itemsets 
when the minimum support changes. This paper mainly 
explains how to update FP_tree timely when a large number 
of incremental data arrives in Web information extraction, 
and to achieve the frequent patterns and association rules 
through improving the FP-Growth algorithm.  
II. DESCRIPTION OF  THE  PROBLEM 
Assuming I = {i1,i2,…,im} is a collection including m 
different items, a given transaction database D, which 
contains a number of transactions recorded as | D |. The 
itemsets X? I, support number in D refers to the transaction 
number of X contained in D, recorded as X.count; the 
support degree in D refers to the percentage of X included in 
D, recorded as X.sup. The relationship between X.count and 
X.sup is: X.count= X.sup×|D|. 
Define 1 If the itemsets X? I, which support degree or 
support number is not less than a given minimum support 
threshold s, or a minimum number of support threshold ? by 
user, that is, X.sup ? s or X.count ? ?, said frequent itemsets 
in D, otherwise non-frequent itemsets. 
Under the dynamical data environment, as new data sets 
?D arrive, if frequent itemsets X? I  is also frequent item in 
?D, then X must be frequent item in D?D; if X is a non-
frequent in ?D, then not sure to be frequent item or non-
frequent item in D?D; Similarly, the non-frequent item in 
D which must be non-frequent in D?D if it is non-frequent 
in ?D, if it is frequent item in ?D, then not sure to be 
frequent item or non-frequent item in D?D. In order to 
update FP_tree effectively, we can measure the change trend 
of transaction items with the concept of marginal growth and 
the potentially frequent under dynamical data environment. 
Define 2 If the growth rate of X item is rX=X.count?D / 
X.count?D , the growth rate of the database D is rD=| D|/ 
|?D|. Then the marginal growth rate is  
DXmar rrX /sup_ =
                                  (1) 
Define 3 For a given marginal growth rate threshold ?, if 
Xmar_sup??, an item X is considered as potentially frequent. 
Therefore, if an item X in the current database D is 
frequent and meet Xmar_sup >1, X must be frequent in the 
D?D. To update table Header of FP_tree not only depend 
on the minimum support threshold also depend on the 
marginal minimum frequency, Table Header’s projects 
include frequent items and potential frequent items.  
2009 Second International Conference on Information and Computing Science
978-0-7695-3634-7/09 $25.00 © 2009 IEEE
DOI 10.1109/ICIC.2009.30
91
In this way, the problem of incremental FP_Growth 
mining algorithm based on Web information extraction is 
described as follows: Assumption a frequent pattern tree FT 
was constructed based on data sets D by FP_Growth 
algorithm, in the time interval ?t, additional data sets ?D, 
for a given minimum support s and the minimum marginal 
frequency ?, how to update FT the same as the FT_tree 
generated based the whole data sets D?D.  
III.   INCREMENTAL FP_GROWTH MINING ALGORITHM  
Known: database D and minimum support s, call 
FP_Growth algorithm through the course of the following: 
(algorithm is mature, not in detail) 
 (1) Scanning D to get the frequency of every item, 
according to the minimum support, a frequent itemsets can 
be found; 
 (2) Re-scanning D for each transaction of all frequent 
items and inserting them into the FP_tree in table Header 
order;  
At this point, we can draw an FP_tree: FT. 
The crux of algorithm is how to merger FT and FT? 
based ?D to generate new FT', the same effect as the 
FT_tree generated based D?D. 
Algorithm: Incremental FP_Growth for Mining Association 
Input: FT, new increasing data sets ?D, minimum support 
s’, minimum marginal growth rate ? 
Output: frequent patterns and association rules  
{   
Scan data sets ?D to statistic the frequency of each 
transaction in table Header; 
Calculate the marginal frequency of each transaction in 
table Header;  
Reorder the transactions of the table Header;  
Delete the transaction of non-frequency and non-potential 
frequent in table Header; 
If (the order of transaction of table header has been 
changed) { 
Call FP_Growth and generate a new FP_tree: FT?; 
  While (FT.child! =???) { 
?????????????     depth-first traversal FT and generate a frequent 
itemsets: FIS; 
           For (i=1; i<=|FIS|; i++) { 
Resort the FIS’ item according to the 
transaction order of table Header;  
// use the frequent item sets from FT grow FT?  
Insert each item into the FT?’s current node as 
a child node; 
Update the node frequency of FT?;   
FT? connected to the table Header;  
temp = itemsets’ frequency – the node’s 
frequency in FT; 
If (temp = =0)  
 //delete the node which frequency is zero from FT 
 remove the node and its sub-tree; 
       } 
 Call FP_Growth (FT?);  
//generate frequency patterns and association rules 
} 
Else  // Reorder the transactions of the table Header; 
{Resort the FIS’ item according to the transaction order of 
table Header; 
Insert each item into the FT’s current node as a child 
node;  
FT connected to the table Header; 
Call FP_Growth (FT?? 
//extract all frequency itemsets from FT 
} 
} 
From the algorithm, FT completely disappear when FT? 
stop growth and the obtained FT' is equivalence to FP_tree 
from all the sample collection. 
IV. PERFORMANCE ANALYSIS AND APPLICATION  
Among the association rule mining algorithms, 
FP_Growth algorithm is high efficient because it avoid 
Apriori algorithm’ flaws of multi-scan Database, but it can 
not be directly used for dynamical data environment, 
because we cannot simply use the incremental data to update 
FP_tree directly. So we can only use FP_Growth algorithm 
to scan the updated database again to produce a new 
FP_tree. In this paper, the incremental FP_Growth algorithm 
just scans the increasing data to update the FP_tree. It is very 
appropriate to deal with the large and up-to-date Web 
information extraction problem. 
In order to further verify the superiority of the 
incremental FP_Growth algorithm, this paper have achieved 
the FP-Growth algorithm and incremental FP-Growth 
algorithm using VC++6.0 and the SQL Server database by 
the computer with memory 512 MB, processor Pentium 422. 
4 GHz and Windows XP operating system. An example 
analysis base on Web information extraction has been 
completed, which data is from Zoll second-hand IT trading 
platform (http://flea.zol.com.cn). A wrapper[5] which carries 
out information extraction from the Web page collect 
regularly the consumers’ transaction information about the 
second-hand products(about 500 new increasing data every 
day), which properties include category, model, 
manufacturer, prices, date and so on. Store them into a local 
database, and then through the incremental FP-Growth 
algorithm to update the FP-tree, extract the frequent patterns 
and generate association rules. From these rules, consumer’ 
preference for the purchase of IT products are found.  
In the experiment, we collect the interested properties set 
A = {category, brand, model, price, trading_volume}. Price 
and trading volume is for discrete:  
Price (Hundred Yuan): 1 below, 1-5 ,5-10 ,10-20, 20-30, 
30-40, 40-50, 50 and above  
Trading volume (number): 50, 50-100, 100-500, 500-
1000, 1000 and above 
Execution time of algorithm is as shown in table 1; 
Purchase preference of major IT products (such as mobile 
phone) is as shown in table 2 (min_supp=0.1). 
            }
92
TABLE I.  EXECUTION TIME OF ALGORITHM 
Records / article 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 
FP_Growth/ ms 819 1429 2023 2444 3054 3648 4326 4944 5866 7319 
Incremental FP_Growth/ms 813 1023 1035 1149 1256 1427 1588 1732 1801 2190 
Efficiency Enhance(%) 0.7 28.4 48.8 52.3 58.9 60.9 63.3 65 69.3 70 
TABLE II.  PURCHASE PREFERENCE OF MOBILE PHONE  
From Table 1, it can be seen that execution time of 
incremental FP_Growth algorithm makes a little time 
increase. Because frequent pattern tree is generated only 
based on incremental data, with the rapid increase of the 
database the superiority of the algorithm’s efficiency will be 
reflected. Table 2 can be seen that the recognition of Nokia's 
brand is highest among mobile phone products, followed by 
SonyEricsion and Dopod. 
V. CONCLUSIONS  
Mining frequent itemsets is the core of mining 
association, FP_Growth algorithm is an effective method for 
mining frequent itemsets. But in the Web information 
extraction under the dynamical data environment, 
transaction database updates frequently and dynamically so 
that it is difficult to achieve the timely update of frequent 
pattern tree. To that end, this paper proposes an incremental 
FP_Growth mining algorithm, that is, only scanning the new 
increasing data each can update FP_tree in a timely manner. 
Experiment and application show that the algorithm is 
effective in reducing the generation time of PT_Tree to raise 
the efficiency of the mining. 
REFERENCES 
[1] Li Jianbo, Li Xiaohua, et.al. Study of Semi-Structured Information 
Extraction Process Based - on XML[J], Journal of Information, No. 8 
, 2006.pp. 49-51 
[2] Agrawal R, Srikant R, Fast Algorithms for Mining Association 
Rules[C]//Proc. Of the 20th Int’l Conf. on Very Large Data Bases. 
Santiago, Chile: Morgan Kaufman, 1994 
[3] Han Jiawei. Mining Frequent Patters Without Candidate 
Generation[C]//Proc. Of the 2000 ACM SIGMOD Conference on 
Management of Data. Dallas. TX, USA:[s. n.], 2000 
[4] Cheung D W. Maintenance of Discovered Association Rules in 
Large Databases: An Incremental Updating Technique[C]//Proc. Of 
the 12th International Conference on Data Engineering. New Orleans 
Louisiana, USA:[s. n.], 1996 
[5] Kushmerick N?Wrapper Induction for Information Extracti0n?Ph
?D Dissertation?Department of Computer Science?University of 
Washington?USA?1997 
 
Association rules support?%? 
credibility
?%? 
brand:Nokia ? trading_volume?500-1000 2.479 38.672 
brand:Nokia ? trading_volume?100-500 0.437 2.403 
brand:SonyEricsion ?Deal?500-1000 1.884 28.619 
brand:Dopod ? trading_volume?500-1000 1.662 10.274 
brand:Dopod? trading_volume?100-500 0.498 5.316 
Brand:Motorola? trading_volume?100-500 1.446 23.413 
Brand:Motorola? trading_volume?50-100 2.994 4.487 
93
