Favorable Support Threshold Recommendation for Multidimensional 
Association Mining Using User Preference Ontology  
 
 
1 Chin-Ang Wu Wen-Yang Lin  Chang-Long Jiang Chuan-Chun Wu 
Dept. of Information 
Management, I-Shou 
University, Taiwan 
cwu@csu.edu.tw 
Dept. of Comp. Sci. 
and Info. Eng.,  
National University of 
Kaohsiung, Taiwan 
wylin@nuk.edu.tw 
Dept. of Elec. Eng., 
National University of 
Kaohsiung, Taiwan 
m0955107@mail.nuk.
edu.tw 
Dept. of Information 
Management, I-Shou 
University, Taiwan 
miswucc@isu.edu.tw 
    
 
                                                           
1
 Chin-Ang Wu is also a lecturer in Cheng Shiu University, Niaosong Township, Kaohsiung County 833.hsiung County 
Abstract 
 
The classical algorithms for mining association rule 
require the user to specify a support threshold to 
determine if an itemset is frequent or not. 
Unfortunately, the setting of support threshold is 
subjective without clear standard and has great 
influence on the mining results. In this paper we 
propose an intelligent minimum support suggestion 
framework with the help of the user preference 
ontology. The user preference ontology maintains the 
frequently used mining queries extracted from the 
mining log. The system finds the most similar queries 
to the user’s mining intension, aggregates them and 
obtains the favorable support range for the user to 
refer. In this paper we describe briefly the construction 
of the user preference ontology and focus on the 
methodology for query similarity comparison. 
 
1. Introduction 
 
The Apriori algorithm for mining frequent itemset 
of association rules is first introduced by Agrawal and 
Srikant [2]. It is an influential algorithm that is based 
on the property that non-empty subsets of the frequent 
itemsets are also frequent. Whether an itemset is 
frequent depends on the user-specified minimum 
support. In general, an association mining finds the 
frequent itemsets that satisfy the minimum support first, 
then the association rules are derived based on the 
frequent itemsets that satisfy the minimum confidence. 
Suppose that A and B are sets of items and A ? B = ?. 
An association rule has the form A ? B with support 
and confidence. The support is the possibility of the 
transactions that contain the itemset A?B, which is 
P(A?B). The confidence is the possibility of the 
transactions that contain A also contain B, which is 
P(B|A).  
The challenge is that the settings of minimum 
support and minimum confidence have no clear-cut 
standard. Different minimum support settings will 
discover different numbers of frequent itemsets, hence 
influence the rules mined. If the minimum support is 
set too low, numerous frequent itemsets will be 
discovered, thus also numerous rules are generated and 
leave the users challenges in order to recognize the real 
useful knowledge. If minimum support is set too high, 
very few frequent itemsets can be found, thus some 
useful knowledge might be left out. Thus reasonable 
settings of minimum support and minimum confidence 
are important in order to find useful knowledge. Users 
try the settings of minimum support and minimum 
confidence to and fro to converge on a favorable set 
when they are satisfied. Fayyad et al. [3] described data 
mining as a repetitive sequence of searching processes, 
which implies that the efficiency of mining process 
depends much on the proper setting of a mining query 
which includes the settings of the minimum support 
and confidence.  
When the association rule mining is first introduced, 
it implied typically on the retailer’s basket data, that is, 
it focuses on the purchase analysis which discovers the 
associations among solely the product dimension. 
Later in [5][6][11], multidimensional association 
mining from data cube or multi-dimensional data 
warehouse has been proposed. Multiple dimensions are 
allowed and the users can specify more precisely the 
target data for mining via setting the data granularity 
with optional filtering condition. Thus the query for a 
multidimensional association mining is robotic that the 
rules mined tend to be closer to what the user wants. 
Yet, it is a challenge for an inexperienced user to 
formulate an effective query, especially on the settings 
of reasonable thresholds. 
In this paper, we propose an intelligent suggestion 
framework of the minimum support with the help of 
the user preference ontology when the user is 
formulating a query for multidimensional association 
mining. The user preference ontology maintains the 
frequently used queries extracted from the mining log. 
It presents assorted users mining experiences hence 
benefits the users, especially inexperienced ones, by 
providing them with useful information. Through 
computing the similarity between the user-specified 
query and the queries in the user preference ontology, 
the system finds the most similar queries to the user’s 
mining intension. Support thresholds from those 
queries are being computed and the favorable 
minimum support can be derived and provided to the 
user. Originally the setting of the support threshold in 
the association rule mining is subject to the individual 
user’s subjectivity. In this way, the user’s subjectivity 
shall include extra knowledge of abundant other users’ 
experiences. The try-and-error process can be 
improved while formulating a mining query. The 
mining results are more effective and easier to be 
closer to the user’s need. 
The rest of this paper is organized as follows. 
Section 2 introduces the multidimensional association 
mining. Section 3 presents the architecture of the user 
preference ontology. Section 4 describes the proposed 
intelligent suggestion framework. Section 5 
summarizes related work and section 6 provides the 
conclusions and future work. 
 
2. Multidimensional association mining 
 
A multidimensional association rule is an 
association rule that involves one or more dimensions 
(attributes). The mining meta-pattern of a 
multidimensional association mining query is defined 
as follows: 
MP: ?tG, tM, [wc], ms, mc? 
where tG, tM, wc, ms and mc are components of a query, 
described below: 
tG: the set of transaction ID (data granularity), 
tM: the set of interested mining attributes,  
wc: the optional “where” condition(s), 
ms: the minimum support and  
mc: the minimum confidence.  
Following is an example query of a multidimensional 
association mining:  
tM: ProdName, Age 
tG: CustID, Date 
wc: Country=”Japan” 
ms: 65% 
mc: 86% 
It shows the user’s mining intension that he/she 
wants to learn the associations between customers of 
different age levels and daily purchase of products in 
Japan with minimum support 65% and minimum 
confidence 86%. The target mining data set is as shown 
in Table 1. The transaction IDs tG = {CustID, Date} 
and the interested mining attributes tM = {Age, 
ProdName}. 
Table 1. The target mining data set 
tid tG tM 
 CustID Date Age *ProdName 
1 C001 2009-02-01 20-30 B, E 
2 C002 2009-02-03 40-50 A, B, C,E 
3 C002 2009-02-10 40-50 A,C,D 
4 C003 2009-02-05 30-40 B,C,E 
5 C004 2009-02-09 40-50 B,E 
6 C004 2009-02-15 40-50 A, E 
*A: IBM60GB   B: IBM TP  C: RAM 512MB  
D: Ink Cartridge   E: Hard Disk 
 
A multidimensional association mining is initiated 
by the user’s formulation of a query. The action of the 
mining engine is triggered when it receives the 
submission of the user defined query.  When the user 
receives the mining results, he or she determines 
subjectively whether the results are acceptable. If it is 
negative, the mining query will be adjusted and the 
process will be re-run again until the user achieves the 
acceptable results. 
 
3. The user preference ontology 
 
In the proposed framework, we assume that for 
each successful mining process by assorted users 
especially by the experienced users, the mining query 
is recorded in the mining log. The mining log is too 
tedious to be utilized in the mechanism we are 
proposing. It will increase the calculation cost while 
trying to retrieve queries from the user preference 
ontology that are similar to the user specified one. 
Thus distillation for representative queries from the 
mining log is necessary. The user preference ontology 
contains the representatives of frequently used queries 
in the mining log. The query distillation process 
involves the following steps as shown in Figure 1:  
1. Find the query patterns of the meta rule format “tG 
? tM”, which indicates that the tG and tM tend to be 
used together under certain threshold. 
2. Cluster the close related query patterns in step 1 and 
derive a surrogate query patterns; 
3. Find the “where” attribute patterns of the meta rule 
format “tG, tM ? wca”, from the mining log with the 
surrogate query patterns in step 2. This indicates 
that the surrogate query patterns and the attributes 
of the “where” condition (wca) are likely to be used 
together, under certain threshold.  
4. Cluster the “where” conditions in the mining log 
that have the “where” attribute patterns in step 3 
and derive a surrogate “where” conditions; 
5. Generate the surrogate queries by combining the 
surrogate query patterns and the surrogate “where” 
condition (wc);  
6. Calculate the minimum support and minimum 
confidence for the surrogate queries by averaging 
the original queries that are related to the surrogate 
queries. 
 
Figure 1. The distillation process 
 
The rules discovered by a surrogate query will 
include the rules that are discovered by the queries 
covered by the surrogate query. The surrogate queries 
are structured and stored in the user preference 
ontology as shown in Figure 2. The attribute index 
provides fast access to tG and tM by connecting the 
attribute to the corresponding tG and tM. A surrogate 
query is presented as a path in the user preference 
ontology. The user preference ontology is structured 
with hierarchies in tG ? tM ? wc. It collects surrogate 
queries that are relatively used often before. The user 
preference ontology will be re-built automatically 
while the mining log is growing over a certain 
threshold. 
 
4. The intelligent recommendation of 
minimum support 
 
This section presents the intelligent suggestion 
mechanism for minimum support. First we will 
introduce the mining system framework and second, 
the details of the mechanism for the minimum support 
suggestion will be provided.  
 
 
Figure 2. The user preference ontology 
 
4.1. The intelligent suggestion framework 
 
The intelligent suggestion framework with the user 
preference ontology is shown in Figure 3. A 
multidimensional association mining of data 
warehouse starts from the query formulation by a user. 
The mining engine runs the query the user has defined 
and the resulting rules are sent back to the users. The 
successful queries are maintained in the mining log.  
The user preference ontology is generated from the 
mining log by performing the distillation process as 
described in the previous section. The minimum 
support suggestion module is responsible for providing 
a favorable minimum support range to the user 
interactively while a user is formulating a query. It 
computes the similarities between the user specified 
query and the surrogate queries in the user preference 
ontology and recommends a reasonable support range 
to the users.  
 
Figure 3. The intelligent suggestion framework 
for minimum support 
 
4.2. Minimum support suggestion  
 
Minimum Support 
Suggestion 
Query 
Formulation 
Data Cube
Data 
Mart
Data 
Mart 
Data 
Warehouse
…
User
… 
Mining Engine 
… 
… 
User Preference 
Ontology 
... 
Mining Log
Distillation  
… … 
CustID 
Date, 
Gender, 
Education
ProdName, 
Salesman 
… 
60%,90%
CustID Date ProdName Gender 
attribute index 
Educationr 
… 
CustID 
Category, 
City=”Taipei”
60%,85% 45%,80% 
ProdName, 
Education 
… … (tG) 
(tM) 
(wc)
(ms,mc)
User Preference 
Ontology 
Mining Log 
… 
Surrogate query Support & confidence 
calculation 
Query pattern “where” attribute 
pattern
Surrogate query 
pattern 
Surrogate “where” 
condition 
“where” condition 
… 
Our strategy for suggesting a reasonable range of 
minimum support is taking the experience value from 
the user preference ontology, which contains the 
experienced users’ intelligence. The similarity 
checking of two queries is essential in order to obtain 
the favorable minimum support range from the user 
preference ontology. Specifically, the tG, tM and/or wc, 
formulated by a user, will be checked against the 
queries in the user preference ontology for similarity. 
The matching degree of tG, tM and wc are computed in 
different ways respectively and aggregated thereafter 
to obtain the degree of query similarity. Then the range 
of minimum support to suggest to the users is derived 
from the top N queries that are similar to the tG, tM 
and/or wc of the user formulated query. The 
computational details are described in the following.  
 
4.2.1. Matching transaction ID (tG). Let Ga be the tG 
formulated by users and Gb be the tG from the user 
preference ontology, respectively. Suppose Ga = {ga1, 
ga2, …, gai} and Gb = {gb1, gb2, …, gbj}. dist(gax) and 
dist(gbw) denote the domain cardinality of attribute gax 
and gbw, respectively, where 1 ? x ? i, 1 ? w ? j. The 
computation of the matching weight, TG, of each gax 
and gbw in Ga and Gb is defined as follows: 
TG(gax, gbw) =  
??
??
?
otherwise
gdistgdist
gdistgdist
iprelationsh alhierarchic no have g ,g If
bwax
bwax
bwax
))(),(max(
))(),(min(
0
 
The similarity of Ga and Gb, matchG(Ga, Gb), is 
computed as follows: 
matchG(Ga, Gb)  = 
ba
i
x
j
w
bwaxG
GG
ggT
×
??
= =1 1
),(
 
For example, let 
Ga = {Cust_ID, Date} 
Gb = {Cust_ID, Month}, 
Date and Month has hierarchical relationship,  
dist(Cust_ID) = 450,  
dist(Date) = 365 and 
dist(Month)=12. 
Thus, matchG({Cust_ID, Date}, {Cust_ID, Month}) is 
computed as follows: 
22
)12,365max(
)12,365min(00
)450,450max(
)450,450min(
×
+++
  
4.2.2. Matching interested mining attributes (tM). 
Let Ma and Mb be the tM formulated by a user and tM 
from the user preference ontology, respectively. 
Suppose Ma = {ma1, ma2,…, mai} and Mb = {mb1, 
mb2, …mbj}. The similarity of Ma and Mb is defined as 
follows: 
matchM (Ma, Mb)= 
ba
ba
MM
MM
?
?  
For example, let 
Ma = {ProdName, Education} and 
Mb = {ProdName, City, Age}. 
Then matchM({ProdName, Education}, {ProdName, 
City, Age}) is: 
4
1
},,{},{
},,{},{
=
?
?
AgeCityodNamePrEducationodNamePr
AgeCityodNamePrEducationodNamePr  
4.2.3. Matching “where” condition (wc). The format 
of a “where” condition is  
Where: (conditional expression) [, (conditional 
expression)]…[, (conditional expression)]. 
The format of a conditional expression is  
(Attribute Name)  Op (Value), 
where Op ? {?, ?, =, ?} is the relational operator. 
For example,  
Where: Country = ”Italy”, Sex = ”Female”. 
It confines the data to Italian female. From the content 
of the “where” condition, two similarity matches have 
to be considered. First is the attribute matching and 
second is the value matching.  
(1) Attribute matching. The attribute match of a 
“where” condition is computed in the same way as the 
matching of the interested mining attribute. Suppose 
WAa is the set of attribute(s) in the wc formulated by 
users and WAb is the set of attribute(s) in the wc from 
the user preference ontology respectively. Suppose 
WAa = {waa1, waa2,…, waai} and WAb = {wab1, wab2, …, 
wabj}. The similarity of WAa and WAb is defined as 
follows: 
matchWA (WAa, WAb)= 
ba
ba
WAWA
WAWA
?
?  
(2) Value matching. Let Wa be the wc formulated by 
the user and Wb be the wc from the user preference 
ontology. Suppose Wa = {wca1, wca2,…, wcai} and Wb = 
{wcb1, wcb2,…, wcbj}, where wcax = waax Opax vax and 
wcbz = wabz Opbz vbz, 1 ? x ? i, 1 ? z ? j. waax is the 
attribute,  Opax is the relational operator while vax and 
vbz denote the “value” of the conditional expression.  
To compute V, the matching degree of the “values” in 
conditional expressions, we consider the following 
cases:  
case 1: wcax = wcbz, V = 1; 
case 2: waax ? wabz, V = 0;  
case 3: waax = wabz and (Opax ? Opbz or vax ? vbz), V 
= CV; 
The computation of CV, the complex conditional 
“value”, is defined as follows: 
CV(wcax, wcbz) = 
??
??
?
?
??
A
AA
?
??
0
)( axwadist  
dist(waax) denotes the counts of distinct values within 
waax. The numerator is the overlapping degree of the 
“values” in the conditional expressions between wcax 
and wcbz.  
),max( bzbzaxax vOpvOp=?  
),min( bzbzaxax vOpvOp=A  
The values of ? and ? depend on the relational 
operators. The sequence of relational operators are not 
important, thus their cardinalities are as shown in 
Table 2. Table 2 shows all cases of ? and ? while 
waax = wabz..  
Table 2. All cases of ? and ? 
Op1 Op2 ? ? 
? ? min(vle , v<le) 0 
? ? dist(waax) max(vge ,v ge) 
= = 0 0 
? ? dist(waax) - 2 0 
= ? 0 0 
? = 1   if veq > v ge  0   if veq < v ge  
0 
? ? vge -1  if vne > vge  vge       if vne < vge  
v ge  
? = 1   if veq < vle 0   if veq > vle 
0 
? ? vle        if vne > vle vle -1   if vne< vle 
0 
? ? vle - v ge    if vle>vge 0       otherwise 0 
subscript notation of v: ? le, ? ge, = eq, ? ne 
 
v with an notation in the subscript denotes the 
“value” of a conditional expression that has the 
corresponding operator.  
The matching degree of the conditional “values” is 
defined as follows: 
matchW (Wa, Wb) = 
),(
),(
1 1
bzaxWA
i
x
j
z
bzax
wawamatch
wcwcV??
= =  
For example, let 
Wa= Age < 60-70, 
Wb= Age > 20-30, Salary > 50000, 
Suppose Age has 10 distinct range values. Then,  
matchW (Wa, Wb) = 
5.0
04.0 +  
 
4.2.4. Aggregating query similarity and suggesting 
the minimum support range. Let Qa, Qb be the user 
defined query and the queries in the user preference 
ontolog respectively. Suppose the tG, tM and wc of Qa 
and Qb are as follows: 
Qa = <tG: Ga, tM : Ma , wc: Wa>  
Qb = <tG: Gb, tM : Mb , wc: Wb> 
The overall query similarity between Qa, Qb is defined 
as follows: 
QSimilarity(Qa, Qb) = matchG(Ga, Gb) × matchM(Ma, 
Mb) × matchW(Wa, Wb) 
Through the similarity comparison of these queries, 
the top N similar queries from the user preference 
ontology are obtained. The final range of minimum 
support to be offered to the user is computed by the 
following steps: 
1. Sort supports of the top N queries;  
2. Average the smaller half of the N queries as the 
lower bound; 
3. Average the bigger half of the N queries as the 
upper bound;  
4. Validate the lower bound with the smallest possible 
value which is 1/n, where n is the count of the 
transactions after grouping. If the lower bound is 
beyond the smallest possible value, the smallest 
possible value becomes the lower bound; 
5. Validate the upper bound with the largest possible 
value which is the maximum frequency among all 
the one-itemsets. If the upper bound is beyond the 
maximum possible support, the maximum possible 
support becomes the upper bound. 
The result will be the favorable range of minimum 
support that is closer to the user’s mining intention. 
The system provides the information to the user 
interactively while he or she is formulating a query. 
This helps the user adjust the support threshold toward 
obtaining better mining results. The support threshold 
setting is not all subjective since it also refers to the 
knowledge of assorted users mining experiences in the 
user preference ontology. The efficiency of try-and-
error process can be improved while the user is 
formulating a mining query. The mining results are 
more effective and easier to get closer to the user’s 
need.  
 
4. Related work 
 
Many studies have been devoted to association rule 
mining [4] since it was first introduced by Agrawal et 
al. [1]. In their proposal, the user-specified minimum 
support was required to recognize the patterns as 
interesting. Many other researches on the 
interestingness measure are conducted. The major 
purpose is to provide the users with a better 
measurement for obtaining really useful knowledge. In 
[7] and [9], varieties of measures have been provided 
and discussed. Lenca et al. [7] collected many 
measures with their properties and using a multi-
criteria aid to suggest good measures that are suitable 
to the user specified requirements. On providing the 
users with a better measurement, Zhang et al. [10] 
provided a polynomial strategy to map the user-
specified fuzzy support threshold to an actual 
minimum support. Liu et al. [8] proposed a fuzzy 
matching technique incorporated with a set of user-
specified patterns (user feedback) to help the user 
identify those interesting ones. Our approach for 
providing a user with a favorable support threshold is 
through extra knowledge reside in the user preference 
ontology, which collects the information from previous 
user’s mining experience.  
 
5. Conclusions 
 
To provide the user with a robotic support threshold 
setting for the Apriori algorithm used in 
multidimensional association mining, we propose in 
this paper an intelligent minimum support suggesting 
system framework that integrated with the user 
preference ontology. We describe the construction and 
utilization of the user preference ontology which 
maintains the frequently used queries in the mining log. 
The methodology for query similarity comparison is 
presented in details. By using this methodology, the 
system finds the most similar queries in the user 
preference ontology to the user-specified query, 
aggregates them and obtains the favorable support 
range for the user to refer. With our proposed method, 
the setting of support threshold for Apriori algorithm is 
not all subjective but also includes extra knowledge 
from other users’ experiences. This improves the 
efficiency of user’s query formulation process and the 
result rules or the mining tend to be closer to user’s 
requirement.  
 
References 
 
[1] R. Agrawal, T. Imielinski, and A. Swami, “Mining 
association rules between sets of items in large 
databases,” in Proceedings of the ACM-SIGMOD 
International Conference on Management of Data, pp. 
207-216, 1993.  
[2] R. Agrawal and R. Srikant, “Fast algorithm for mining 
association rules”, in Proceedings of International 
Conference of Very Large Databases, pp. 487-499, 
1994. 
[3] U. Fayyad, P.S. Gregory, and S. Padhraic, “The KDD 
process for extracting useful knowledge from volumes 
of data,” Communications of the ACM, Vol. 39, No. 11, 
pp. 27–34, 1996. 
[4] J. Han and M. Kamber, Data Mining: Concepts and 
Techniques, Morgan Kaufmann, 2001. 
[5] J. Han, L.V.S. Lakshmanan, and R.T. Ng, “Constraint-
based, multi-dimensional data mining,” IEEE 
Computer, Vol. 32, No. 8, pp. 46-50, 1999. 
[6] M. Kamber, J. Han, and J.Y. Chiang, “Metarule-guided 
mining of multidimensional association rules using 
data cubes,” in Proceedings of SIGKDD Conference on 
Knowledge Discovery and Data Mining, pp. 207-210, 
1997. 
[7] P. Lenca, P. Meyer, B. Vaillant, S. Lallich, “On 
selecting interestingness measures for association rules: 
User oriented description and multiple criteria decision 
aid”, European Journal of Operational Research, Vol. 
184, No. 2, pp. 610-626, 2008. 
[8] B. Liu, W. Hsu, L.F. Mun, and H.Y. Lee, “Finding 
interesting patterns using user expectations,” IEEE 
Trans. Knowledge and Data Engineering, Vol. 11, No. 
9, pp. 817-831, 1999. 
[9] P. Tan, V. Kumar, and J. Srivastava, “Selecting the 
right interestingness measure for association patterns”, 
in Proceedings of ACM SIGKDD Conference on 
Knowledge Discovery and Data Mining, pp. 32–41, 
2002. 
[10] S. Zhang, X. Wu, C. Zhang, and J. Lu, “Computing the 
minimum-support for mining frequent patterns,” 
Knowledge and Information Systems, Vol. 15, No. 2, 
pp. 233-257, 2008. 
[11] H. Zhu, On-line Analytical Mining of Association 
Rules, Master Thesis, SIMON FRASER University, 
1998. 
