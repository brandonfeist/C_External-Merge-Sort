                                 978-1-4244-5934-6/10/$26.00 ©2010 IEEE                                 2275
2010 Seventh International Conference on Fuzzy Systems and Knowledge Discovery (FSKD 2010)                       
Mining Global Frequent Subtrees* 
 
Chuanshen Zhao, Baoxian Jia, Yuhua Liu 
School of Computer Science 
Liaocheng University 
Liaocheng, China 
 
Lixia Chen 
Science and Technology Department of Dongchangfu 
Liaocheng, China 
 
 
Abstract—Discovering global frequent subtrees from ordered 
labeled trees in distribute environment is an attractive research 
problem in data mining. In this paper, a new algorithm 
FAMDFS(Fast Algorithm for Mining Global Frequent Subtree) 
was proposed. This algorithm transfer local projected branch 
frequent nodes, can decrease network traffic, improve the 
efficiency of the algorithm. Theoretical analysis and experimental 
results show that FAMDFS algorithm is efficient and effective.  
Keywords-global frequent subtree; projected branch; induced 
subtree; tree mining 
I.  INTRODUCTION  
As the development of network and application of WWW, 
the size of Internet data increase rapidly, and has been the 
hugest distribute data source. How to discovery the knowledge 
if data in Internet to utilize the huge data resource of Internet 
has been attract much interest. But most data structure of 
Internet data is semi-structured data, such as XML, HTML, 
Web log etc, mining these data with tree structure use frequent 
itemset method can mining frequent itemset but will ignore the 
structure information of data[1, 2]. Therefore, tree mining 
algorithm can solve this problem, so research of tree mining is 
an important task for data mining. 
In distribute environment, mining global frequent itemset 
have got many progresses, and how to decrease the cost of 
network transformation is the main aim of global frequent 
itemset mining algorithm. There is many algorithm for mining 
global frequent itemset, such as PDM, CD, FDM, DDDM, 
FPM[3-7], but there has not research for mining global frequent 
subtrees in distribute environment. According to the algorithm 
for mining frequent subtrees and mining global frequent 
itemset, we can get a simple method for mining global frequent 
subtrees(GFS), and the main idea of this method is: First 
generate local candidate frequent subtrees at each site, then test 
if each candidate frequent subtree were global frequent subtree, 
if it were ,add it to global frequent subtrees set. But because of 
huge memory use and high network traffic, this method is not 
so efficient. 
In this paper, we propose a fast algorithm for mining global 
frequent subtree — FAMDFS, this algorithm generate local 
projected branch at each site first, then generate global 
projected branch through transfer local projected node, and 
compute global projected branch frequent node, at last get the 
global frequent subtrees from global projected branch frequent 
node. This algorithm uses the strategy of dividing mining task 
into many sub-task, so can utilize the parallel computation in 
distribute environment to decrease the network traffic and 
improve efficiency of mining global frequent subtrees. 
II. BASIC CONCEPTS AND PROBLEM DEFINITION 
A. Tree and Subtree 
The definition of tree, subtree, labeled ordered tree, 
frequent subtree, matching and occurrence have been defined 
in previous papers, and in this paper we adopt the definitions 
in ref. [7]. 
For example, pattern tree T is subtree of data tree D in 
Figure 1. 
A
B
E
C D
G
E
F
G
H
A
DC
Pattern Tree T
Data Tree D
1
2 3
4
5
6
7
8
9
10
 
Figure 1.  Subtree Example. 
B. Global Frequent Subtree and Local Frequent Subtree 
Let TDB be a database of ordered labeled tree. every tuple 
of database recorded by (TID, Ti), Ti is a labeled ordered tree, 
and TID is ID of Ti in TDB. Every tree on labeled set L in 
database TDB called data tree. We denote by ? the class of all 
labeled ordered trees on L, every labeled ordered tree T? is 
called pattern tree. 
In the model of this paper, distribute multi-database is 
divided horizontally. There are n site called S1, S2, …, Sn, 
corresponding each local database called TDB1, TDB2, …, 
TDBn? ?n
i
iTDBTDB
1=
= , D and Di denote number of tuple 
in TDB and TDBi respectively. To a pattern tree T, T.count and 
T.counti denote as the number of tuple which include T. 
Defination 1. if T.sup(T.count/D) and T.supi(T.counti/D) is 
support of T in TDB and TDBi, then T.sup is global support of 
T, T.supi is local support of T at site Si. 
*Supported by the National Natural Science Foundation of China 
(60874075) 
                                                                                                                                          2276
Defination 2. if T.sup?minisup(minimum support thresh-
old), then T is an global frequent subtrees; if T.supi?minisup, 
then T is local frequent subtrees at site Si. 
Throughout of this paper, a global frequent subtree of size k 
called global frequent k-subtree, the node included by global 
frequent 1-subtree called global frequent node. a local frequent 
subtree of size k called local frequent k-subtree, the node 
included by local l frequent 1-subtree called global frequent 
node. GFST(TDB) denoted as set of global frequent subtrees 
mining from TDB. 
C. Problem Defination 
Lemma 1. If T is a local frequent subtree at site Si, then all 
non-empty subtrees of T are local frequent subtree at site Si. 
Proof: Suppose T' is non-empty subtree of T, according to 
property of anti-monotony for subtree, T'.counti?T.counti, then 
T'.supi?T.supi. T' is local frequent subtree at site Si. 
Lemma 2. If pattern tree T is not a local frequent subtree, 
then all supertrees of T can not be local frequent subtree. 
Property 1. If Pattern tree T is a global frequent tree, then 
there is a site Si(1?i?n) at which T and all non-empty subtree 
of T are local frequent subtrees. 
Proof: Suppose n sites be regarded as n pigeonhole, and 
the occurrence times of pattern tree T in TDB is number of 
pigeon, then T.count?(D1+D2+…+Dn)×minisup. According 
to pigeonhole principle, there are at least one site at which 
T.counti?Di×minisup, so T is a local frequent subtree at site 
Si, according to lemma 1, all non-empty subtree of T are local 
frequent subtrees at site Si. 
In summary, the task of mining global frequent subtrees can 
be described as: Given n local database TDB1, TDB2, …, TDBn 
at site S1, S2, …, Sn. Global database ?n
i
iTDBTDB
1=
= , 
Mining all global frequent subtrees from TDB. 
III. ALGORITHM FOR MINING GLOBAL FREQUENT SUBTREES 
A. Main Idea of Algorithm 
We propose a fast algorithm for mining frequent embedded 
subtrees in single machine environment (FTPB)[8], How to 
decrease the network traffic through projected node is main 
research direction of this paper. 
For a pattern tree T, if it’s node vT?RMB(T), then set of 
projected branch of vT in TDB denoted as PBTDB(vT), called 
global frequent projected branch; It’s projected branch in TDBi 
denoted as PBTDB(vT)i, called local frequent branch. The set of 
all global frequent subtrees denoted as FST. To give minimum 
support threshold minisup, the task of mining global frequent 
subtree can be divided into two steps:  
? Generate set of projected branch PBTDB(vT) i  at each 
site. 
? Mining global frequent subtrees from PBTDB(vT) i. 
The process of first step has been studied in ref.[8], this 
paper study the method how to mining global frequent subtrees 
from PBTDB(vT) i. 
Theorem 1. If L(PBTDB(vT)) is the set of frequent subtree 
got through the method of join the new rightmost node at node 
vT(vT?RMB(T)), L(T) is the set of frequent subtrees got from 
rightmost expansion on frequent subtrees T, then 
L(T)=
)(TRMBvT ?
?  L(PBTDB(VT)). 
Proof: Because L(T) is the set of frequent subtrees got from 
rightmost expansion on frequent subtrees T. The rightmost 
expansion of T is generator a new tree through the method of 
join a new rightmost node on the node of rightmost branch, so 
L(T)=
)(TRMBvT ?
?  L(PBTDB(VT)). 
According to theorem q, to current frequent subtree T, all 
successor frequent subtree can be got from join a global 
projected node on each node of rightmost branch of T, this 
method can generator frequent subtree directly. 
Theorem 2. To node vT?RMB(T) on pattern tree T, it’s set 
of projected branch in TDB denoted as PBTDB(vT), it’s set of 
projected branch in TDBi at site Si denoted as PBTDB(vT)i. then 
PBTDB(vT)=?n
i 1=
 PBTDB(vT)i, where n is the number of sites. 
Proof: It is easy to prove according to the relation of global 
database and local databases ?n
i
iTDBTDB
1=
= . 
Lemma 3. Given a frequent subtree T, if F(PBTDB(vT)) is 
the set of global projected branch frequent nodes of vT(vT?
RMB(T))in TDB, F(PBTDB(vT)i)is the set of local projected 
branch frequent nodes of vT(vT ? RMB(T))in TDBi. then 
F(PBTDB(vT)) ?
)(TRMBvT ?
?  F(PBTDB(vT)i). 
According to lemma 3, to the node vT on the rightmost 
branch of current frequent subtree T, it’s global projected 
frequent node can be get by the method of union all local 
projected frequent node. 
Lemma 4. Given a frequent subtree T , PBTDB(vT) the set of 
global projected branch frequent nodes of vT(vT?RMB(T)) in 
TDB, label l?PBTDB(vT), if l isn’t a global frequent label, and 
T' is a pattern tree which was got through joint l to vT, T' can’t 
be a global frequent subtree. 
According to lemma 4, there is a set of label in witch each 
label is an element of global frequent and included by set of 
local projected, the set also is the set of label in which each 
label can give a rightmost expansion on T to generator a new 
global frequent subtree directly. 
B. FAMDFS Algorightm 
To sum up the above arguments, we can get the main idea 
of mining global frequent subtrees: Firstly, scan each local 
                                                                                                                                          2277
database to get all local frequent single node subtrees, transfer 
all frequent single node subtrees to one site, get all global 
frequent single node subtrees. Secondly, scan each local 
database to get local projected branch frequent nodes of current 
frequent subtrees, transfer to one site and compute the global 
projected branch frequent nodes, then generator new global 
frequent subtree thorough the method of join the global 
projected branch frequent nodes to the nodes on the rightmost 
branch of current subtrees. Repeat above steps until there are 
no global projected branch frequent nodes for all projected 
nodes, all global frequent subtrees have been found. 
Similar to algorithm FDM[5], we adopt polling site to 
optimize the network traffic, this method make the cost of 
network traffic is O(n) in distribute multiple database 
environment with n sites. According to the above main idea of 
algorithm, FAMDFS Algorithm described as follows. 
Algorithm 1 FAMDFS Algorithm 
Input: (1) Local database TDBi at site Si, i=1,2, …, n; 
      (2) Minimum support threshold minisup ? and 
Minimum support threshold of each site Si, are minisup?
i=1,2, …, n; 
Output: The set of global frequent subtrees GFS(TDB). 
Method: 
//step 1      collect the set of Global frequent subtrees with 
one node. 
For i=1 to n do 
{  
scan the local database TDBi once; 
  Collect the set of local frequent labels Li and their supports 
} 
Collect the set of Global frequent labels L from all Li; 
//step 2 generate projected branch of pattern tree T. 
For each l in L do 
{ form the 1-pattern tree T use l;     
  T.count=l.count;     
output 1-pattern tree T and T.count/N; //output 
singlenode pattern tree and its support 
  for i=1 to n do 
  {  generate PBTDB(vT)i; 
  } 
  For j=1 to n do 
    compute PBTDB(T)i; 
  GPB-Expand(minisup, T); 
} 
 
//Given projected branch DB?minimum support threshold 
minisup?Pattern tree T?mining all global frequent subtree 
which are successor of T. 
GPB-Expand(minisup, T); 
{ for i =1 to n do 
  { for each tree D in TDBi do 
   { if T is a sub tree of D then 
{ for each node vT in RMB(T) do 
 { if vT.Mark then continue; 
  For each label l in PBD(vT)i do 
  { if l in L then  
     record every occurrence of node label of l and l.count in 
PBD(vT)i into NO(vT)i; 
  } 
  for j=1 to n do 
    if polling-site(NO(vT)i)=Sj then 
     Generate NO(vT)ij; 
  for j=1 to n do 
   send NO(vT)ij to site Sj; 
  NO(vT)=? 
for j=1 to n do 
  { Receive NO(vT)ij; 
   NO(vT)= NO(vT)?NO(vT)ij; 
  } 
  for each occurrence label l in NO(vT) do 
  { if l.count/N?minisup then  
   {  T '=add l to T as the child of vT;  //Generate new 
frequent subtree. 
     T '.count=l.count; 
Output T '  and T '.count/N;  //output T ' and 
support of T '. 
for k=1 to n do 
       form the projected branch PBTDB(T '); 
GPB-Expand(minisup, T '); 
     Inc(vT.flCount); 
   } 
   if vT.flCount = =0 then vT.Mark =True; //Mark the nodes in 
PBTDB(vT) which haven’t projected branch. 
  } 
 }  
} 
   } 
  } 
} 
IV. EXPERIMENTS 
To evaluate the effectiveness and efficiency of FAMDFS, 
we conducted a set of experiments. All the experiments are 
performed on a 2.4 GHz Pentium PC machine with 512 MB 
main memory, running Microsoft Windows XP. FAMDFS 
algorithm and GFS algorithm are coded using Microsoft Visual 
C ++ 6.0. 
The synthetic dataset we used for our experiments is 
generated using the tree generation program described in Ref. 
[9]. Through eight variations adjusts the distribution of data 
(table I). 
TABLE I. variation table 
Variation 
name 
Variation 
value  
Variation meaning 
S 100 Size of labeled set 
P 0.5 Probability of the node which 
generating child node 
L 10 Number of base tree 
I 4 Height of base tree 
C 3 Spanning of nodes in base tree 
N 10000 Size of TDB 
H 8 The maximized height of trees in TDB 
F 6 Spanning of nodes in TDB 
                                                                                                                                          2278
We divide database into 3 sites equally, make number of 
every database TDBi (i=1,2,3)of sites be equal, and running 4 
experiments for algorithm GFS, FAMDFS as follows: 
1. We compare the network traffic and running time of 
two algorithms when minisup is 10%, 5%, 1%, 0.8%, 
0.4%, 0.2% respectively. Experiment results are shown 
in figure 2 and figure 3. 
2. Compare the network traffic of two algorithms when 
minisup is 1% with height of base tree and spanning of 
node in base tree changing. Experiment results are 
shown in figure 4 and figure 5. 
3. When minisup is 1%, compare the running time of two 
algorithms with data size of changing from 10k to 50k. 
Experiment result is shown in figure 6. 
4. When minisup is 10%, 5%, 1%, 0.8%, 0.4%, 0.2% 
respectively, compare the running time of distribute  
algorithms and single machine algorithm for mining 
frequent subtrees. Experiment result is shown in figure 
7. 
0
60
120
180
240
300
10 5 1 0.8 0.4 0.2
mi ni sup(%)
ne
tw
or
k 
tra
ffi
c(
k)
GFS
FAMDFS
 
Figure 2.  Network traffic changing w.r.t minisup 
0
50
100
150
200
250
10 5 1 0.8 0.4 0.2
mi ni sup(%)
ru
nn
in
g 
tim
e(
s)
GFS
FAMDFS
 
Figure 3.  Running time changing w.r.t minisup 
0
40
80
120
160
200
6 6.5 7 7.5 8 8.5 9
Hei ght  of  base t r ee
ru
nn
in
g 
ti
me
(s
)
GFS
FAMDFS
 
Figure 4.  Network traffic changing w.r.t height of base tree 
0
100
200
300
400
500
4 4.5 5 5.5 6 6.5 7
spanni ng of  base t r ee
ru
nn
in
g 
ti
me
(s
)
GFS
FAMDFS
 
Figure 5.  Network traffic changing w.r.t apnning of base tree 
0
60
120
180
240
300
10000 20000 30000 40000 50000
dat a si ze
ru
nn
in
g 
ti
me
(s
)
GFS
FAMDFS
 
Figure 6.  Running time changing w.r.t data size 
0
80
160
240
320
400
10 5 1 0.8 0.4 0.2
mi ni sup (%)
ne
tw
or
k 
tra
ff
ic
(k
)
GFS
FAMDFS
FTPB
 
Figure 7.  net work comparision w.r.t. three algorithms 
In summary, FAMDFS algorithm can decrease network 
traffic of mining global frequent subtrees, improve efficiency 
of algorithm, so FAMDFS algorithm propose a new idea for 
tree mining in distribute environment and a new frame for 
mining global frequent subtrees. At the same time, FAMDFS 
algorithm mining frequent subtrees from several sites is more 
efficient than single machine mining algorithm, so when 
processing huge amount of data, we can divide data into 
several sites and mining frequent subtrees use distribute 
algorithm to improve the efficiency of mining, so FAMDFS 
algorithm also propose a new strategy for mining frequent 
subtrees from huge amount of data. 
V. CONCLUSION 
In this paper, we study the problem of mining global 
frequent subtrees, and present a method of mining global 
frequent subtrees based on projected branch, this method can 
get all nodes of new frequent subtrees which got by rightmost 
expansion from current frequent subtrees utilize the structure of 
projected branch, this method can get all global frequent 
                                                                                                                                          2279
subtrees, and can include all useful information. We also 
propose an algorithm for fast mining global frequent subtrees 
FAMDFS, compare to algorithm GFS which mining global 
frequent subtrees, FAMDFS algorithm have lower network 
traffic and higher efficiency, propose a good frame for mining 
global frequent subtrees. 
REFERENCES 
[1] Y. Chi, S. Nijssen, R. R. Munts, J.N. Nok: Frequent Subtree Mining-An 
Overview, Fundmental Informatic, Special Issue on Graph and Tree 
Mining, 2005. 161-198. 
[2] Mostafa Haghir Chehreghani, Morteza Haghir Chehreghani, Caro Lucas, 
Masoud Rahgozar and Euhanna Ghadimi. Efficient rule based structural 
algorithms for classification of tree structured data, vol.13, pp165-188, 
January 2009. 
[3] Park J S, Chen M S,Yu P S. Efficient parallel data mining foe 
association rule. In: Proceedings of the 4th International Conference on 
Information and Knowledge Management. Baltimore, Maryland, 1995. 
31-36. 
[4] Agrawal R, shafer J C. Parallel mining of association rule. IEEE 
Transaction on Knowledge and Data Engineering, 1996, 8(6):962-969. 
[5] Cheung D W, Han J W, Ng V T et al. A fast distributed algorithm for 
mining association rules. In: Proceedings of IEEE 4th International 
Conference parallel and Distributed Information Systems, Miami Beach, 
Florida, 1996, 31-44. 
[6] Schuster A, Wolff R. Communication efficient distributed mining of 
association rule. In: Proceedings of 2001 ACM SIGMOD International 
Conference on Management of Data, Santa Barbara, California, 2001. 
473-484. 
[7] Yang Ming?Sun Zhihui?Ji genlin. Fast Mining of Global Frequent 
Itemsets. Journal of Computer Research and Development, Vol.40, 
pp620-626, April 2003. 
[8] Zhao Chuanshen; Sun Zhihui; and Zhang Jing. Frequent Subtree Mining 
Based on Projected Branch. Vol.43, pp620-626, March 2006. 
[9] ZHU Yong Tai;WANG Chen;HONG Ming Sheng;WANG Wei;and SHI 
Bai Le. ESPM—An Algorithm to Mine Frequent Subtrees. Computer 
Research and Development?2004(10), pp.1720-1726. 
 
