Host-Based Anomaly Detection for Pervasive Medical Systems
Biniyam Asfaw
CS Department
Addis Abeba University
Email: biniyamasfaw@yahoo.com
Dawit Bekele
Internet Society
African Regional Bureau
Email: bekele@isoc.org
B. Eshete, A. Villa?orita, K. Weldemariam
Fondazione Bruno Kessler
(fbk-irst) Trento, Italy
Email: (eshete,adolfo,sisai)@fbk.eu
Abstract—Intrusion detection systems are deployed on hosts
in a computing infrastructure to tackle undesired events in the
course of usage of the systems. One of the promising domains of
applying intrusion detection is the healthcare domain. A typical
healthcare scenario is characterized by high degree of mobility,
frequent interruptions and above all demands access to sensi-
tive medical records by concerned stakeholders. Migrating this
set of concerns in pervasive healthcare environments where
the traditional characteristics are more intensi?ed in terms
of uncertainty, one ends up with more challenges on security
due to nature of pervasive devices and wireless communication
media along with classic security problems for desktop based
systems. Despite evolution of automated healthcare services
and sophistication of attacks against such services, there is a
reasonable lack of techniques, tools and experimental setups
for protecting hosts against intrusive actions.
This paper presents a contribution to provide a host-based,
anomaly modeling and detection approach based on data
mining techniques for pervasive healthcare systems. The tech-
nique maintains normal usage pro?le of pervasive healthcare
applications and inspects current work?ow against normal
usage pro?le so as to classify it as anomalous or normal. The
technique is implemented as a prototype with sample data set
and the results obtained revealed that the technique is able to
perform classi?cation of anomalous activities.
Keywords-Intrusion Detection Systems, Pervasive Medical
Systems, Security, Data Mining.
I. INTRODUCTION
In recent years, the use of pervasive technologies in
healthcare domain is increasingly a common practice. These
systems use large-scale deployment of sensing and commu-
nication technologies. Their aim is to continuously mon-
itor patients’ history and subsequently to deliver accurate
health information to medical professionals, thereby facili-
tating timely diagnosis and treatment for health problems.
Moreover, a typical pervasive healthcare scenario is usually
nomadic in which the healthcare personnel exhibit mobility
and interrupted operations, at the same time by providing
round-the-clock healthcare outside the con?nes of traditional
medical establishments [1], [2], [3].
Differently from a traditional paper-based system, a per-
vasive healthcare system collects and manages health data
in an electronic record. This means that a signi?cant portion
of information, much of which is sensitive, about patients’
health status (e.g., blood pressure and heart beat) is collected
from different devices monitoring the patients’ health and
recorded in electronic format for subsequent processing.
These devices also monitor the processed information (can
also be sent from other such devices) and alarm the medical
staff only whenever like, for example, blood pressure be-
comes out of the expected range for some speci?c patient.
These all are done without necessarily requiring intervention
by the medical staff(s). Notice, however, that such usage
imposes many security risks to the health information that
did not exist before with paper-based system.
Providing a proper security mechanism in this domain is,
therefore, as critical as giving proper medication facilities
to patients to ensure safety of sensitive medical detail
from being compromised. This would allow the possibility
of maintaining data con?dentiality, integrity of data, and
provides strong authentication features, thereby controlling
unauthorized access of personal health information. Unfortu-
nately, security is more complicated when we use pervasive
devices in healthcare environments for several reasons.
For example, the wireless links used in pervasive environ-
ments make passive eavesdropping and active interference
possible. This contributes to the aggravated security prob-
lems, since devices that are involved in such engagement
report their state and sensor information to other objects [4].
These devices are also less physically secured as compared
to nodes used in ?xed networks, which in turn contributes to
the ease of compromising the devices [5]. Another reason is
that the speci?c case where pervasive computing infrastruc-
ture is deployed in a healthcare system. This often ends up
with more concerns about security for the reasons, such as,
increased data aggregation, ubiquitous access, and increasing
dependency on technical solutions —see also in [2], [3], [6].
In fact, there are various approaches that are commonly
taken to address the aforementioned challenges by high-
lighting the security and dependability consequences of any
speci?c choice. Among them, intrusion detection has been
shown to improve the security of complex systems [7], [8],
[9]. Intrusion detection systems (IDSs) vary in scope and
focus ranging from simple host-based ?rewalls and authen-
tication to sophisticated distributed detection and protection
systems. However, these techniques are not tailored to
particular requirements of pervasive systems in general and
pervasive healthcare in particular. As a result, investigating
a technique based on anomaly-based intrusion detection is
978-1-4244-8642-7/10/$26.00 ©2010 IEEE
taken as one remedy to relief scarcity of tools and techniques
in achieving better security in pervasive healthcare.
This paper presents anomaly-based intrusion detection
approach for pervasive healthcare systems. The anomaly
detection model is based on normal activity pro?le of
pervasive healthcare applications and it evaluates current
work?ow against normal usage pro?le of the applications by
employing appropriate data mining techniques. The normal
usage pro?le is constructed by using a sample dataset
containing both normal and abnormal application usages.
Each request sent from a mobile device to the server side
application is trapped and then passed to the classi?er. The
classi?er categorizes the request as normal or abnormal
based on the already maintained usage pro?le. Finally, the
classi?er maintains the responses in a passive way, by
keeping each individual record of the event of the intrusive
activity. We believe that, this work leverages the lack of
anomaly detection model and tool-support for pervasive
healthcare environments.
The paper is structured as follows. Section II brie?y
describes the motivation and background material for this
work. Section III presents our anomaly detection model
in detail. In section IV, we demonstrate the prototype
implementation of the model with discussion of the results
obtained. Related work, and conclusion and future work are
given in Sections V and VI.
II. BACKGROUND AND MOTIVATION
Context-aware vs Location-based. Context awareness, dif-
ferently from traditional computing, allows to actively ex-
ploring physical location, available computing infrastruc-
tures and facilitates the delivery of services through these
infrastructures to ful?ll and enhance their ability to perform
designated tasks [10], [11].
A typical healthcare environment requires a location-
based computing to enable the delivery of accurate medical
information, as well as to reduce errors and improve access.
In the authentication process, for example, there are inter-
rupted operations where the healthcare staffs usually tend to
login but forget to logout. This is basically because a medical
staff is nomadic while login is ?xed to one computer in the
traditional computing [1].
Pervasive computing in general and their devices —
such as PDA, mobile phones and the like— in particular
are widely deployed in healthcare environments. Reasons
include these devices have nomadic characteristics and due
to the mobility of healthcare professionals [12], [13]. One
possible scenario for a pervasive healthcare system that
integrates the unique capabilities of some of these devices,
infrastructures and the medical staffs themselves is shown
in Figure 1.
Intrusion Detection Systems. The use of pervasive tech-
nologies also comes with challenges that are more dif?cult
to solve compared to the traditional computing systems.
Figure 1. Pervasive healthcare scenario [14].
Among these challenges, security is the major one. Ensuring
security, in fact, in this domain becomes more challenging in
situations where sensitive medical systems are targeted. In-
trusion Detection Systems (IDSs) have been used in practice
as a second wall to protect systems by monitoring resources
and alerting in the event of a speci?c occurrence of an
intrusive action [6], [15], [7]. IDSs are categorized in to
two based on their detection methods: anomaly-based (e.g.,
see in [16], [17]) and misuse-based (e.g., see in [18], [19]).
Anomaly-based IDS models use information about the
normal behavior of the system they monitor, by identifying
normal features, which will be used to build normal pro?le.
More speci?cally, anomaly detectors generate a model of
the observed data (about, e.g., traf?c, behavior, etc), and
compare the generated data against this model to check for
anomalies. However, the advantage of being able to detect
previously unknown attacks is usually paid for in terms of a
large number of false positives [20], [21]. This could make
the system unusable by ?ooding and eventually desensitizing
the system administrator with large numbers of incorrect
alerts. In contrast, misuse-based IDS models analyze the
system and compare the activity against signatures (or
patterns) of known intrusive system or application behavior
[20], [21], [19]. IDSs that follow the misuse detection model
need to be constantly updated to stay a step ahead of the
attackers and also suffer from false negatives.
Data Mining vs IDSs. IDSs operating on data-intensive
application domains rely on data mining techniques for their
classi?cation and detection mechanisms. Such techniques
allow ?nding ef?ciently patterns, structures or regularities
and singularities in large and growing datasets [22], [23]. In
line with this, there have been a number of efforts exerted
towards normal pattern discovery in a given large dataset.
Out of these efforts, a signi?cant number can be allocated
to healthcare and medical datasets [22], [24]. This can be
attributed mainly to the sensitiveness of the domain and
due to their link, such as, with insurance and other critical
decisions.
Association rule mining (see, for a general survey, in
[25]) has been extensively investigated in the data mining
literature. For the association rule mining, many ef?cient
algorithms have been proposed including a priori and FP-
Tree growth [26], [27]. Typically, this mining aims at
discovering associations between items in a transactional
database. Several types of algorithms are particularly ap-
plicable for mining audit data from large data stores, see,
e.g. in [28], [29]. In this paper, we use two of the mining
algorithms, namely classi?cation rule mining and association
rule mining for our anomaly detector.
III. PROPOSED ANOMALY DETECTION MODEL
A. Anomaly Detector Components
Figure 2 shows the architecture of the anomaly detection
model we propose. In the architecture, we distinguish two
main components: the mobile device component (i.e., the
pervasive component) and the server component. The under-
ling communication channel between the two components
is established over a wireless link. Requests for services are
directly sent from the mobile device to the server. The server
responds to the pervasive device component with a record
fetched from the database or an acknowledgment message.
ClientSide 
Medial App.
Client Mobile Device 
Location Repository 
Request Manager
Preprocessor
Classi?er
Response 
Manager
Medical Record 
Store (MRS)
ServerSide 
Medical App
Anomaly Detector Server
Class Association 
Rule (CAR)
Anomaly Log
Figure 2. Architecture of the Proposed Anomaly Detection Model.
The main components of the client mobile side include
the end user application (i.e., the medical application) and
Location Record (LR) database. The client mobile device
is a medical application with which users communicate. It
enables sending a request to the server’s Request Manager
based on the interaction of the users. LR is a mobile side
component used to store location information (i.e., persistent
data). At the same time, this helps tracking the current
location assuming that the device has location detection ca-
pability (for our case, we assumed GPS). After establishing
connection with the server, the client devise sends the current
location of the device along with each request sent from the
client to the server.
On the other hand, the following sub-components are
responsible for various sever side computations. The Request
Manager is responsible for collecting requests sent by the
client mobile side. The requests in this context are aimed
at manipulating the Medical Record Store (MRS). The
requests are passed to the MRS in order to respond to the
client mobile side. The requests are also directed to the
Preprocessor which basically involves categorizing locations
with respect to known locations rather than using exact
location information sent by GPS enabled pervasive device
and categorizing timestamps into time categories (e.g., like
morning, afternoon, and night). After preprocessing, user
requests are stored in the User Request (URD), and also
see Figure 3.
The information described above are the starting point for
determining the association rules for our detection model.
More speci?cally, we need to determine possible associa-
tions between the attributes in the URD along with their
support and con?dence values. This results in the association
rules, which are then basis for generating the classi?cation
rules. We use this to classify user requests as either normal
or abnormal. The classi?er determines whether the request is
in harmony with the already maintained Class Association
Rule (CAR) or not. The CAR is constructed as shown in
Figure 3. It maintains association between the MRS ?elds
belonging to the normal class with con?dence and support
values.
Users' Request 
Dump (URD)
Class Association Rule (CAR)
Associative Rule Generator 
Classi?cation Based on 
Assocication, Rule Generator 
(CBA-RG)
Users' Nominal Usage Pro?le Builder 
Figure 3. The Classi?er Sub-Component.
Furthermore, once the classi?er identi?es possible anoma-
lous activity, it keeps record of the anomalous activity
in the Anomaly Log. The record kept contains different
information to identify the location information of mobile
device and the nature of the intrusion. This quali?es our
anomaly detector to be a passive detector, at is keeps log
information about the intrusion rather than taking proactive
measures.
B. Detection Algorithms
We noted that, for our purpose, we use the classi?cation
and association algorithms, as discussed in background
section. Based on these, we devise a normalcy based on the
normal usage pro?le constructed from a noise-free users’
request dump as discussed before. The normalcy is de?ned
by creating associations between attributes of the users’
requests.
The association rule mining is implemented to identify
association rules between the database attributes. It ?nds
all rules in the URD database that satisfy some minimum
support and minimum con?dence constraints. The classi?er
deals with constructing accurate rules for classi?cation.
Moreover, as a result of the need to involve both the
association and classi?cation rules, we use the integration
of the association and classi?cation rules. The integration is
done by focusing on mining a special subset of association
rules, which is indicated by the Class Association Rules
(CARs). The special subset is determined by selecting rules
whose right-hand-side are restricted to the classi?cation class
attribute. This is ’normal’ in our case, since our target is
to implement anomaly detection. As a consequence of this
merging, we used the integrated framework name associative
classi?cation. Note that the architecture for constructing the
rules for classi?cation is the one shown in Figure 3.
Adaptation of the existing association rule mining algo-
rithm to mine only the CARs is needed so as to reduce
the number of rules generated. Thus, this helps avoiding
combinatorial explosion. The users’ normal usage pro?le
is constructed by collecting users’ activities in URD. With
the assumption that the URD contains noise-free data, we
use it to build the normal usage pro?le after the data
in the URD being undergone preprocessing. The goal of
mining association rules is to derive multi-feature attribute
correlations from a database table.
Formally, given a set of records in which each record is
a set of items, an association rule is an expression of the
form: X ? Y, confidence, support where X and Y are
subsets of the items in a record, support is the percentage
of records that contain X +Y , whereas con?dence is of the
form support(X + Y )/support(X).
The associative classi?cation is based on the assumptions
that the dataset is a normal relational table (as indicated in
[30]). The table consists of N cases described by l distinct
attributes. These N cases are classi?ed into q known classes.
Let D be the dataset. Let I be the set of all items in D, and
Y be the set of class labels. We say that the data case d ? D
contains X ? I , if X ? d. A class association rule (of CAR)
is an implication of the form X ? y, where y ? Y . A rule
X ? y holds in D with con?dence c if c% of cases in D
that contain X are labeled with class y.
The Classi?cation Based on Association (CBA) algorithm
constitutes two parts: the Rule Generator (CBA-RG) and
Classi?er Builder (CBA-CB). Notice that the CBA is based
on Apriori algorithm (see in [29]), which we used to ?nd
the association rules.
The key operation of our implementation of the CBA-
RG algorithm is to ?nd all ruleitems that have support
with a given minimum support (minsup). A ruleitem is
of the form: < condset, y >, where condset is a set
of items, y ? Y is a class label. The support count of
the condset, condsupCount is the number of cases in
D that contain the condset. The support count of the
ruleitem, rulesupCount, is the number of cases in D
that contain the condset and are labeled with class y.
Each ruleitem basically represents a rule : condset ?
y, whose support is (rulesupCount/|D|) × 100%, where
|D| is the size of the dataset, and whose con?dence is
(rulesupCount/condsupCount) ? 100%. We call those
ruleitems that satisfy minsup frequent ruleitems, while
the rest are called infrequent ruleitems.
Algorithm 1 The CBA-RG
1: F1 = {large 1-ruleitems}
2: CAR1 = genRules(F1)
3: prCAR1 = pruneRules(CAR1)
4: for all k = 2; Fk?1 = ? ;k++ do
5: Ck = candidateGen(Fk?1)
6: for all d ? D do
7: Cd = ruleSubset(Ck, d)
8: for all c ? Cd do
9: c.condsupCount++
10: if d.class = c.class then
11: c.rulesupCount++
12: end if
13: end for
14: end for
15: Fk = {c ? Ck | c.rulesupCount ? minsup};
16: CARk = genRules(Fk)
17: prCARk = pruneRules(CARk)
18: end for
19: CARs =Uk CARk; prCARs = Uk prCARk
The CBA-RG algorithm (i.e., Algorithm 1 ) generates
all the frequent ruleitems by making multiple passes over
the data. The ?rst three lines of the algorithm deal with
describing what happens on the ?rst pass. The genRules
functionality generates rules based on the 1-frequent ruleit-
ems.
The prCAR1 contains the pruned CAR1. The function
pruneRules uses the pessimistic error rate based pruning
method [30]. It prunes a rule as follows: If pessimistic error
rate of rule r is higher than the pessimistic error rate of rule
r? (obtained by deleting one condition from the conditions
of r), then rule r is pruned. This pruning can cut down the
number of rules generated substantially.
For each subsequent pass, say pass k, the algorithm per-
forms four major operations. First, the frequent ruleitems
Fk?1, found in the (k ? 1)th pass, are used to generate the
candidate ruleitems Ck using the condidateGen function.
It then scans the database and updates various support counts
of the candidates in Ck. After those new frequent ruleitems
have been identi?ed to form Fk, the algorithm then produces
the rules CARk using the genRules function. Finally, rule
pruning is performed on these rules. The candidateGen
(Algorithm 2) function is similar to the function Apriori-
gen in algorithm Apriori [29].
Algorithm 2 Generating candidate set
1: for all itemsets c ? Ck do
2: for all (k-1)-subsets s of c do
3: if s /? Fk then
4: delete c from Ck
5: end if
6: end for
7: end for
If, for example, the following set contains the set of
itemsets in a 3-frequent ruleitems and it is required to
generate C4, F3 = {{123}, {124}, {134}, {135}, {234}}
After candidate generation: {{1 2 3 4}, {1 3 4 5}} and
after pruning: {1 2 3 4}. Moreover, the set containing {1 2
3 4} is pruned from the candidate set because {1 4 5} and
{3 4 5} are not found in F3.
The ruleSubset function takes a set of candidate
ruleitems Ck and a data case d to ?nd all the ruleitems
in Ck whose condsets are supported by d. This and the
operations in the next three lines are also similar to those
in algorithm Apriori [29]. The difference is that we need
to increment the support counts of the condset and the
ruleitem separately whereas in algorithm Apriori only one
count is updated. This allows us to compute the con?dence
of the ruleitem. The ?nal set of class association rules is in
CARs. The remaining rules after pruning are in prCARs.
Once the CAR is built, the Classi?er consumes it to
identify user activities. The classi?er needs to have multiple
passes through the CAR database. To positively contribute
to the ef?ciency of the classi?cation algorithm, a number
of data structures are used to contain and manipulate the
database for faster access. In line with this, the classi?er
building algorithm in [30] is used.
IV. PROTOTYPE IMPLEMENTATION AND EXPERIMENT
We implemented a prototype system using J2ME in order
to evaluate our approach discussed (for developing the perva-
sive end application). The mobile device side application is
comprised of user interface components speci?cally adapted
to the device to read inputs and display formatted outputs
to the users.
Figures 4(a) and 4(b) show the interfaces used for reg-
istering medical information and viewing medical record
of patients respectively. Whenever requests are sent via a
Wi-Fi connection to the server, the Apache web container
delivers the requests to the server side application and
responses to the client mobile device. We used Java Servlets
to implement the server side application and the Servlets are
responsible to respond to the requests after communicating
with the MRS (i.e., Medical Record Store) as required. The
MRS is implemented using MySQL Server. The underlying
hardware infrastructure setup includes a Palm PDA with
IEEE802.11 Wi-Fi and PalmOS3.5 operating system on the
client mobile device. On the server side, a Wi-FI enabled
PC with Microsoft Windows XP SP2 was used.
We used a number of data structures in order to improve
the ef?ciency of the classi?cation. The central data structures
for the implementation of our algorithm are Set, List, and
Map, which are collections in Java. Set collection is used to
maintain collections of the datasets from the database. Each
entry of our Set contains a List object each representing
collection of cases for each distinct attribute in the database.
This has great performance advantage since we can ?nd
all the items in the Set object rather than making multiple
scans of the database. Map is the other important collection
we have implemented for maintaining the frequent ruleitems
(i.e., Fk) and rules (i.e., CARk). The key of the Map objects
for Fk and CARk are Set objects representing our condset.
Since it is not possible to have multiple keys, the keys can
simply be maintained in a Set object.
For constructing the class association rules, we used
twenty record sample noise-free dataset of a single user, i.e.
a medical doctor. The noise free dataset is required to avoid
modeling wrong information. When the dataset is collected
from the on-spot usage environment, if an abnormal usage is
registered as a normal usage, the model ?nally includes this
abnormal usage as a normal usage resulting in a poisoned
model that misleads the classi?er.
Table I shows a sample dataset that contains different
requests at different time ranges to access the vital signs
record. Each record is tagged with either the normal or
abnormal class category.
Table I
SAMPLE NOISE-FREE DATASET.
Request Type Time Range Loc Category Patient ID Class Category # Records
Read 06:00:00-12:00:00 Room12,Room32 101 to 105 Normal 5
Read 18:00:00-06:00:00 Room12,Room32 101 to 105 Normal 5
. . . . . . . . . . . . . . . . . .
Write 06:00:00-12:00:00 Room12,Room32 101 to 105 Normal 5
Write 12:00:00-18:00:00 Room12,Room32 101 to 105 Normal 5
Table II shows the sample data set of the generated
association rule1 and is used as a normal usage pro?le for
that speci?c user. Note that to generate the association rules
for the normal records, we run the RuleGenerator module
(which is a Java class) of our system on demand basis.
1Note that the entire generated association rule contains over 300 records,
for the purpose of demonstration we only show a small subset.
(a) Patient’s follow up data registration (b) Viewing patient’s treatment information.
Figure 4. Example Pervasive Medical Application.
On rule ID76, for example, we have the rule con-
dition timeStamp : ntrequestType : readlocation :
room12 with support 15.00% and con?dence 50.00%.
As explained in Section III-B, thus, this indicates rule:
timeStamp : nt, requestType : read, location :
room12?normal [supt = 15.00%, confd = 50.00%].
Table II
SAMPLE OF GENERATED ASSOCIATION RULES.
ID Rule Condition Support (%) Con?dence (%)
1 clienName:doctor1 50 50
3 clienAddr:127.00.1 50 50
8 requestType:read 50 66.67
12 timeStamp:am 25 50
56 clientAddr:127.0.0.1 recordID:105 10 50
76 timeStamp:nt requestType:read location:room12 15 50
90 requestType:read dataSource:vital-signs timeStamp:am 25 100
Based on the noise-free sample dataset used for rule
generation and the above rule, we can say that 15.00% of
cases in the dataset contain timeStamp : nt, requestType :
read, location : room12 and are labeled normal. The
support value in this case tells us that —with respect
to the whole dataset used for rule generation— only
15.00% include the data timeStamp : ntrequestType :
readlocation : room12 and they belong to the “normal”
class category. By this, we mean that reading patient record
at night from room number 12 has only 15.00% normalcy
support.
In addition, the con?dence value indicates 50.00% of
the cases in the dataset containing timeStamp : nt,
requestType : read,location : room12 are labeled with
normal class category. This refers to considering only those
entries in the dataset which contain timeStamp : nt,
requestType : read, location : room12 and out of
these only half of them are tagged with the “normal” class
category. This simply means that only half of the cases of
reading patient record at night from room number 12 is
“normal”.
Considering another example on rule ID90:
requestType : read dataSource : vital?signs
timeStamp : am with support 25.00% and con?dence
100.00%. This corresponds to the rule: requestType :
read,dataSource : vital?signs, timeStamp :
am?normal [supt = 25 %, confd = 100%]. The
rule tells us that one fourth of the data in the dataset used
for rule generation contain the data requestType : read
dataSource:vital-signs timeStamp : am and are normal.
Hence, reading patients’ vital sign records in the morning
has a quarter normalcy support. Such a con?dence
shows that 100% of the cases in the dataset contain
requestType : read dataSource : vital?signs
timeStamp : am and all of them are ?agged to be
normal. This rule means that 15.00% of cases in the
dataset contain timeStamp : nt, requestType : read,
location : room12 and are labeled normal and
50.00% of the cases in the dataset that contain
timeStamp : nt, requestType : read, location : room12
are labeled with normal class category. Notice that all the
rules are not selected based on minimum con?dence and
support. For example, for the precision of the classi?er
—which is based on the rules for normalcy— con?dence
percentages could be ?xed with values more than 90%.
Finally, taking the rules generated, our classi?er identi?es,
based on the pro?le maintained for the speci?c user category,
each request received from the different users as normal or
abnormal. Afterwards, whenever the user sends a request
from the mobile device, the request is also sent to the
classi?er in order to identify the nature of the request,
normal or abnormal, based on the normal usage pro?le
maintained previously. Since we used a passive anomaly
detector, in terms of response action, the result of the
classi?cation is recorded in the anomaly log database using
the ResponseManager module.
V. RELATED WORK
A paradigmatic example for how to do host-based IDSs
approach is presented in [31]. If the system call traces of
normal applications are self-similar, then it is straightforward
to build an IDS that allows to learn the normal behavior
of applications and recognizes possible attacks by looking
for abnormalities. For learning, the IDS gathers system call
traces from times when the system is not under attack,
extracts all sub-traces containing consecutive system calls,
and creates a database of these observed sub-traces, which in
turn are deemed anomalous if it does not appear within the
database. In the monitoring, the abnormality of a new system
call trace is measured by counting how many anomalous
sub-traces it contains.
A process mining framework that utilizes the concept of
clinical pathways to facilitate the automatic and systematic
construction of an adaptable and extensible detection model
is presented in [22]. The authors took a data-centric point of
view and considered healthcare fraud and abuse detection as
a data analysis process. This automatic approach eliminates
the need to manually analyze and encode behavior patterns,
as well as the guesswork in selecting statistics measures.
The proposed framework was evaluated via real-world data
to demonstrate its ef?ciency and accuracy.
In [32], the authors presented a more-robust anomaly
detection IDS using data mining techniques. The techniques
are designed to dynamically model what a normal network
should look like, at the same time aimed to reduce the
false positive and false negative alarm rates in the process.
Moreover, the authors used classi?cation-tree techniques to
accurately predict probable attack sessions. Overall, their
goal is to model network traf?c into network sessions and
identify those network sessions that have a high-probability
of being an attack.
Various work have been going on mining audit data
for IDSs. In this area, the work closest in spirit to ours
can be found in [28], where the authors describes a novel
framework name MADAM ID for mining audit data in order
to construct models automatically for the intrusion detection.
The framework compute activity patterns from system audit
data and extracts predictive features from the patterns. It then
applies machine learning algorithms to the audit records that
are processed according to the feature de?nitions to generate
detection rules. Past results on the DARPA ID Evaluation
showed that their ID model was one of the best performing
of all the participating systems.
The related works described (also several other works
in IDSs) use several techniques such as machine learn-
ing, state-machine abstraction, process mining and even
data mining. Our work is not aimed at advancing such
approaches. Rather it tailors host-based anomaly modeling
and detection technique to pervasive healthcare systems and
the use of data mining is traced back to the beauty of data
mining techniques in extracting patterns from large dataset.
In this regard, pervasive healthcare systems are immediate
candidates for data intensive domain. We also pointed out
that there is lack of tool-support for anomaly-based intrusion
detection of pervasive healthcare systems. To this end, the
anomaly detection model and the prototype implementation
could help as springboard for the attempt in alleviating
tool-support for intrusion detection of pervasive healthcare
systems.
VI. CONCLUSION AND FUTURE WORK
In this paper, we described constructing anomaly detec-
tion model based on data mining techniques in a medical
pervasive environment for legitimate users. Due to the
sensitiveness of medical records, it must protect medical
records both from outsiders and insiders who try to abuse
their privileges. What we can conclude from this work is that
maintaining user activity information for intrusion detection
can enhance the role played by the proposed model in pro-
tecting a pervasive healthcare system from insider attacks.
Moreover, we demonstrated the algorithmic detail showing
the way to accomplish this through maintaining associations
between selected attributes to represent normalcy, which is
required for classi?cation purpose. Finally, we described
the prototype implementation of the proposed model and
discussed the results of evaluation.
Even though we proved that the algorithms devised in the
anomaly detection work in practice, the evaluation of algo-
rithmic ef?ciency issues are left as future work. The rules
generated from a limited number of dataset are very large
in number. In order to identify an activity as anomalous, the
data structures used to maintain the rules resides in memory.
Consequently, the speed of the classi?er is boosted at a cost
of more memory consumption.
Another line of future work is to monitor a larger data
set to determine the ef?ciency pattern as the data set size
get larger. As described in the proposed anomaly detection
model, we only used the association rule and classi?-
cation based on association techniques. Nevertheless, for
better detection capabilities it is also advisable to include
the sequence analysis technique. This is basically because
anomalous activities are also hugely manifested in some
sequential pattern.
REFERENCES
[1] E. Bardram, “The Trouble with Login: On Usability and Com-
puter Security in Ubiquitous Computing,” Personal Ubiqui-
tous Comput., vol. 9, no. 6, pp. 357–367, 2005.
[2] Ju¨rgen Bohn, Felix Ga¨rtner and Harald Vogt, “Dependability
Issues of Pervasive Computing in a Healthcare Environment,”
in Security in Pervasive Computing. Springer Berlin /
Heidelberg, 2004.
[3] K. Venkatasubramanian and S. K. Gupta, In Security in Dis-
tributed, Grid, Mobile, and Pervasive Computing. Auerbach
Publications, CRC Press, 2007, ch. Security Solutions for
Pervasive Healthcare, pp. 443–464.
[4] D. E. Denning, “Intrusion-Detection Model,” IEEE Trans.
Software Eng., vol. 13, no. 2, pp. 222–232, 1987.
[5] F. Stajano, “Security for Ubiquitous Computing,” in ICISC,
ser. Lecture Notes in Computer Science, C. Park and S. Chee,
Eds., vol. 3506. Springer, 2004, p. 2.
[6] A. Abimbola, Q. Shi, and M. Merabti, “NetHost-Sensor: A
Novel Concept in Intrusion Detection Systems,” in ISCC ’03.
Washington, DC, USA: IEEE Computer Society, 2003, p. 232.
[7] D. E. Denning, “An Intrusion-Detection Model,” IEEE Trans.
Softw. Eng., vol. 13, no. 2, pp. 222–232, 1987.
[8] M. Roesch, “Snort - Lightweight Intrusion Detection for Net-
works,” in LISA. Berkeley, CA, USA: USENIX Association,
1999, pp. 229–238.
[9] G. Vigna, F. Valeur, and R. A. Kemmerer, “Designing and
Implementing a Family of Intrusion Detection Systems,” in
ESEC/FSE-11. New York, NY, USA: ACM, 2003, pp. 88–
97.
[10] J. E. Bardram, “Applications of Context-Aware Computing
in Hospital Work - Examples and Design Principles,” in Pro-
ceedings of the 2004 ACM Symposium on Applied Computing.
ACM Press, 2004, pp. 1574–1579.
[11] M. Baldauf, S. Dustdar, and F. Rosenberg, “A Survey on
Context-Aaware Systems,” Int. J. Ad Hoc Ubiquitous Com-
put., vol. 2, no. 4, pp. 263–277, 2007.
[12] V. Stanford, “Using Pervasive Computing to Deliver Elder
Care,” IEEE Pervasive Computing, vol. 1, no. 1, pp. 10–13,
2002.
[13] J. H. Jahnke, “Towards Context-Aware Computing in Clinical
Care,” OOPSLA Workshop on Building Software for Pervasive
Computing, 2005.
[14] U. Varshney, “Pervasive Healthcare,” IEEE Computer, vol. 36,
no. 12, pp. 138–140, 2003.
[15] R. Kemmerer and G. Vigna, “Intrusion detection: A Brief
History and Overview,” IEEE Security and Privacy Magazine,
2002.
[16] Ke Wang and Salvatore J. Stolfo, “Anomalous payload-based
network intrusion detection,” in RIAD, ser. Lecture Notes in
Computer Science. Springer, 2004, pp. 203–222.
[17] Salvatore J. Stolfo and Frank Apap and Eleazar Eskin and
Katherine Heller and Shlomo Hershkop and Andrew Honig
and Krysta Marie Svore, “A comparative evaluation of two al-
gorithms for Windows Registry Anomaly Detection,” Journal
of Computer Security, vol. 13, no. 4, pp. 659–693, 2005.
[18] U. Lindqvist and P. A. Porras, “Detecting Computer and Net-
work Misuse Through the Production-Based Expert System
Toolset (P-BEST),” in S & P. IEEE Computer Society, 1999.
[19] Wojciech Tylman, “Misuse-Based Intrusion Detection Using
Bayesian Networks,” International Conference on Depend-
ability of Computer Systems,, pp. 203–210, 2008.
[20] G. Vigna and C. Kruegel, Handbook of Information Security.
Wiley, 2005, ch. Host-based Intrusion Detection Systems.
[21] A. A. M. Mehdi, S. Zair and M. Bensebti, “A bayesian net-
works in intrusion detection systems,” Journal of Computer
Science, vol. 3, no. 5, 2007.
[22] W.-S. Yang, , and S.-Y. Hwang, “A process-mining Frame-
work for the Detection of Healthcare Fraud and Abuse,”
Expert Systems with Applications, vol. 31, pp. 56–68, 2006.
[23] Bezerra, Fa´bio and Wainer, Jacques, “Anomaly detection
algorithms in logs of process aware systems,” in SAC ’08:
Proceedings of the 2008 ACM symposium on Applied com-
puting. ACM, 2008, pp. 951–952.
[24] G. A. R. Pedro A. Ortega, Cristian J. Figueroa, “A Medical
Claim Fraud/Abuse Detection System based on Data Min-
ing:A Case Study in Chile,” in DMIN’06. The 2006 World
Congress in Computer Science, Computer Engineering, and
Applied Computing, 2006, pp. 224–231.
[25] Hipp, Jochen and Gu¨ntzer, Ulrich and Nakhaeizadeh, Gho-
lamreza, “Algorithms for association rule mining — a general
survey and comparison,” SIGKDD Explor. News, vol. 2, no. 1,
pp. 58–64, 2000.
[26] P. L. Frans Coenen and S. Ahmed, “Data Structure for Associ-
ation Rule Mining: T-Trees and P-Trees,” IEEE Transactions
on Knowledge and Data Engineering, vol. 16, no. 6, 2004.
[27] K. S. Mafruz Zaman Ashra?, David Taniar, “Odam: An op-
timized distributed association rule mining algorithm,” IEEE
Distributed Systems Online, vol. 5, no. 3, March 2004.
[28] W. Lee and S. J. Stolfo, “A framework for constructing
features and models for intrusion detection systems,” ACM
Trans. Inf. Syst. Secur., vol. 3, no. 4, pp. 227–261, 2000.
[29] R. Agrawal, T. Imielin´ski, and A. Swami, “Mining association
rules between sets of items in large databases,” in SIGMOD
’93: Proceedings of the 1993 ACM SIGMOD international
conference on Management of data. New York, NY, USA:
ACM, 1993, pp. 207–216.
[30] K. Hu, Y. Lu, L. Zhou, and C. Shi, “Integrating classi?cation
and association rule mining: A concept lattice framework,”
in RSFDGrC’99. London, UK: Springer-Verlag, 1999, pp.
443–447.
[31] S. Forrest, S. A. Hofmeyr, A. Somayaji, and T. A. Longstaff,
“A Sense of Self for Unix Processes,” in SP ’96. Washington,
DC, USA: IEEE Computer Society, 1996, p. 120.
[32] B. D. Caulkins, J. Lee, and M. Wang, “A Dynamic Data
Mining Technique for Intrusion Detection Systems,” in ACM-
SE 43. New York, NY, USA: ACM, 2005, pp. 148–153.
