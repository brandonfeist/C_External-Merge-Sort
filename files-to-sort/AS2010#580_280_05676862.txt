A Recommendation Method of BPEL Activity Based 
On Association Rules Mining 
 
Deng Na, Chen Junliang, Cheng Bo, Li Desheng, Li Changbao 
State Key laboratory of Networking and Switching Technology 
Beijing University of Posts and Telecommunications  
Beijing, China 
iamdengna@gmail.com, chjl@bupt.edu.cn, chengbo@bupt.edu.cn, ldsyy2006@126.com, lichangbao_1@163.com 
 
 
Abstract—As the de facto standard, Business Process Execution 
Language (BPEL) is widely used in the composition and 
orchestration of web services; however, it is tiring and error-
prone if we just rely on the developers to create every activity 
icon and assign it an atomic service. On the basis of the author’s 
early work, this paper creatively applies association rules mining 
to the analysis of BPEL process, and put forwards a 
recommendation method of BPEL activity based on Labeled 
Activity Tree (LAT) and sub-activity sequence (subASeq). 
Finally, the experiment result of the BPEL processes in a 
multimedia conference system indicates this method’s validity. 
Keywords-BPEL;association rule; sliding window; activity tree; 
activity sequence;activity recommendation; subprocess 
I. INTRODUCTION 
As the de facto standard, Business Process Execution 
Language (BPEL) [1] is widely used in the composition and 
orchestration of web services; however, nowadays, despite 
with the help of some semiautomatic BPEL development tools 
such as ActiveBPEL, it is still necessary for the developers to 
create every activity icon and decide which atomic service it 
should be assigned to. In fact, when constructing BPEL 
processes in a specific business domain, the number of the 
atomic services is finite, and maybe there is causality between 
some of these services. If we can dig out the association 
relationship between these atomic services, then we can 
provide some activity recommendation information to the 
developers to improve the accuracy and efficiency of the BPEL 
documentation’s compilation. Also, this kind of association 
relationship can be used to build the template of BPEL 
subprocesses. On the basis of BPEL process’s workflow 
specialty and inspired by the idea of the algorithm (association 
rules mining with sliding window) in the author’s early work 
[5], this paper creatively applies the association rules in data 
mining to the analysis of BPEL, and intents to find out the 
tightly related activities in BPEL processes by making use of 
Labeled Activity Tree (LAT) and sub-activity sequence 
(subASeq) after sliding window is introduced. Finally, using 
the BPEL processes of a multimedia conference system as the 
experiment data source, the result indicates the method’s 
validity. 
II. RELATED WORK 
The paper is the first attempt about the recommendation of 
BPEL activity. With regard to the segmentation of BPEL, 
activity sequence and subprocess, there has been some related 
research. Reference [2] advanced a static process slicing 
algorithm based on BPEL control flow graph (BCFG) and 
activity dependency graph (ADG). Reference [3] tried to find 
out reusable BPEL subprocesses through variable dependence. 
This paper is inspired by the early work [4, 5] and derived from 
the author’s consideration whether it is possible to apply the 
algorithm in [5] to the scene of [4] in order to discover the 
activities with inner relationship. Compared with [2,3,4], which 
concerned the segmentation of BPEL process from the view of 
data stream and control stream at the level of subprocess, this 
paper is from the standpoint of the association rules mining of 
activity sequence and is at the level of activity, with finer grain. 
III. ASSOCIATION RULES 
A. Related Concepts 
Association rule is one of the mining technology of data 
mining, and it is used for finding out related itemsets from 
large numbers of transactions. A typical application is, from 
abundant shopping basket records, to discover the fact that the 
consumers have the custom of buying diapers and beer at the 
same time, thus we get a rule like diapers? beer. The 
definitions of association rules are as follows: 
1) itemset: The set of items. We suppose { }m,...,I,III 21=  represents the set of all items. 
2) K-itemset: The itemset which contains K items. 
3) Transaction: Transaction is a set of items. Supposing 
there is a transation T, satisfying IT ? . 
4) Transaction set:The set of transactions. Suppose D is a 
Transaction set, then { }n21 ,...,T,TTD = . 
5) Association rule: An implication in the form of 
BA? , with IBIA ?? ? and ?=? BA .Rule 
BA?  has two measurement parameters: support and 
confidence, having )()(support BAPBA ?=?  and 
)()(confidence B|APBA =? .A rule satisfies both 
MIN_SUPPORT and MIN_CONFIDENCE is called strong 
rule.  
This work is supported by National Natural Science Foundation of China 
(No. 60432010); “973” program of National Basic Research Program of 
China (No. 2007CB307103) and the Fundamental Research Funds for the 
Central Universities (No.2009RC0507). 
978-1-4244-5392-4/10/$26.00 ©2010 IEEE
B. Microsoft_Association_Rules 
In this paper, the algorithm that the experiment used is 
Microsoft_Association_Rules Algorithm. It is an improvement 
and optimization of Apriori Algorithm and saves the memory 
space by using the data structure of tree.  
Microsoft_Association_Rules Algorithm has two main 
steps: mining the frequent itemsets and generating rules based 
on the frequent itemsets, which are explained below: 
1) Mining the frequent itemsets 
This step uses an iterative method, this means that 
itemsets(K) is used for exploring itemsets(K+1). Firstly, by 
scanning the database, count on each item, collect all the items 
satisfying MIN_SUPPORT, and call the set of these items as 
1L .Then 1L  is used for seeking 2L ,and 2L  is used for 
seeking 3L , and so forth , finally we stop at frequent 
itemsets(K) if there is no frequent itemsets(K+1) satisfying 
MIN_SUPPORT. 
2) Generating rules based on the frequent itemsets 
For each frequent itemset  f, generate all the subset x and its 
complementary set xfy ?= , if:  
CONFIDENCEMINyxconfidence _)( >? , 
then yx?  is a qualified strong association rule. 
IV. BPEL MODELING AND TRANSACTIONS CREATION 
In essential, BPEL is a business process, and it describes 
the business process procedure in a specific domain. Because 
of this specialty, we can model the BPEL process, extract all 
the interesting activities and arrange them in the original 
logical order in BPEL process to build a LAT. Then, we get all 
the LASeqs(Longest Activity Sequence) by tranversing from 
the root to the leaves of LAT. Finally, by introducing the 
notion of sliding window, we transform LASeqs to the input 
transactions of association rules: sub-activity sequences.  
A. The Mapping of  Base Activity 
Since what we will excavate is the inner relationship 
between the activities, and what we concern is the causality 
between the atomic services BPEL activity invokes, we only 
show our interest on three types of base activities: receive, 
reply and invoke. For briefness, activity is represented as 
ActivityType_ActivityName, ActivityType is the type of the 
activity, having },,{peActivityTy INVRPLRCV? , in 
which RCV, RPL and INV are the abbreviations of receive, 
reply and invoke respectively. ActivityName is the name of the 
activity, which is uniquely identified by partnerLink, portType 
and operation. The mapping of the base activities of BPEL 
process is shown in TABLE1. 
TABLE I.  THE MAPPING OF BASE ACTIVITIES OF BPEL PROCESS  
The Base Activities of 
 BPEL Process 
Mapped as 
<receive partnerLink= “a” operation= “b”  
portType= “c” variable=…> 
RCV_abc 
<invoke partnerLink= “a” operation= “b”  INV_abc 
portType= “c” inputVariable=… outputVariable=…> 
assign\faultHandlers\eventHandlers 
\wait\empty\scope\process\terminate 
null 
B. The Mapping of Structured Activity 
For the structured activities in BPEL: sequence, if/else, 
while, flow, their mapping mode is shown in Fig. 1. 
 For the activity forEach and repeatUntil, their mapping 
mode is the same as while. Because we just care about the 
association relation between the activities, activity’s repeat 
times will be ignored, and the activities in the circular structure 
will be mapped only once. 
 
Figure 1.  The Mapping Mode Of  Structured Activities Of  BPEL Process 
C. Constructing Labeled Activity Tree 
Mapping the base activities in BPEL to nodes, structured 
activities to connecting lines, in which sequence, while, 
forEach, repeatUntil are mapped as the lines connecting 
contained activities orderly, if/else and flow are mapped as the 
lines connecting contained activities parallelly, then an activity 
tree(AT) is built. Labeling the nodes in AT will get LAT. The 
method of labeling is: each node in AT is labeled using a pair 
(m, n), m denotes the level this node lies in AT, and n denotes 
this node is the nth node in level m. A labeled activity is 
expressed as Triple=(ActivityType_ActivityName, m, n). Fig. 
2 is an example of a LAT. 
  
Figure 2.  An example of a Labeled Activity Tree 
D. Activity Sequence after Introducing Sliding window  
After constructing LAT, the next step is to find out all the 
LASeqs in LAT. LASeq is a path from the root to a leaf of 
LAT. It is worth noting that, because of the existence of flow 
and if/else, there is some difference between LAT and general 
multi-tree, that is, two branches in LAT have the possibility to 
converge later on. Actually, the number of LASeqs is equal to 
or larger than the number of leaves in a LAT. The pseudocode 
of obtaining all the LASeqs is as below: 
1) Symbol Definition 
• root: root node of LAT   
• Seq: activity sequence   
• tailOfSeq(Seq): the last node in Seq  
• children(node)?the set of all the direct children of 
node 
• countOfChildren(node): the number of the direct 
children of node 
• add(Seq?node): add node to the tail of  Seq 
• add(S, Seq): add Seq to the set S 
• remove(S, Seq): remove Seq from set S 
• newSeq =copy(Seq): copy Seq as a new sequence, 
namely, newSeq  
2) Algorithm of Creating LASeqs(ACL) 
 
Input: a LAT 
Output: all the LASeqs of this LAT 
Algorithm (ACL): 
S;return         19.
}}    );iSeqremove(S, 0)if(j              18.
};j                    17.
);childNode,add(newSeq                    16.
);i copy(SeqnewSeq                    15.
{ ailNode)children(tchildNodeeach for               14.
0;j              13.
true;flag    0)untif(childCo              12.
Node);ldren(tailcountOfChichildCount              11.
);iSeqtailOfSeq(de    tailNo          10.
{ iSeq   sequenceeach for          9.
false;flag         8.
true){flag    while(7.
Seq); add(S,    6.
root); add(Seq,    5.
;Seq;    4.
true;flagboolean      3.
;childCount,jint        2.
childNode;tailNode,root,     Node    1.
jj
j
j
>
++
=
?
=
=>
=
=
?
=
==
?=?=
=
S
S
 
The result of ACL should guarantee that all the LASeqs are 
not the same. Two LASeqs are the same implies that these two 
LASeqs have the same length and the corresponding activity 
nodes (expressed as Triple) are the same. In the LAT in Fig. 2, 
there are two LASeqs in all: 
 LASeq1?
(Activity1,1,1)(Activity2,2,1)(Activity3,3,1)(Activity5,4,1) 
(Activity6,5,1)  
LASeq2?
(Activity1,1,1)(Activity2,2,1)(Activity4,3,2)(Activity5,4,1) 
(Activity6,5,1) 
However, there is only one leaf node: Activity 6. 
3) Introducing Sliding window 
In order to get the input transactions of association rules 
mining, the notion of sliding window is introduced. Sliding 
window glides on LASeq from the beginning to the end, one 
activity at a time, thereout some subASeqs are gotten. The size 
of the sliding window is decided by the number of related 
activities we are interested with. Still take Fig. 2 as an example, 
if we want to get the association relation between two 
activities, i.e. activity B always appears after A on condition 
that they have some inner causality, in this case, the size of the 
sliding window should be set to 2. 
 After introducing sliding window with size 2(Fig.3), 
LASeq1 produces four subASeqs: 
(Activity1,1,1)(Activity2,2,1),(Activity2,2,1) (Activity3,3,1), 
(Activity3,3,1) (Activity5,4,1),(Activity5,4,1)(Activity6,5,1). 
In like manner, LASeq2 also produces four subASeqs: 
(Activity1,1,1)(Activity2,2,1),(Activity2,2,1) (Activity4,3,2), 
(Activity4,3,2) (Activity5,4,1),(Activity5,4,1)(Activity6,5,1). 
Finally, the LAT in Fig. 2 has eight subASeqs in all. 
Collect all the subASeqs of all the BPEL processes in a 
specific business domain, and keep only the first term 
(ActivityType_ActivityName) in every activity’s Triple, we 
will get all the input transactions for the association rules 
mining. 
 
Figure 3.  LASeq1  after Introducing Sliding Window with Size 2 
V. EXPERIMENT RESULT AND ANALYSIS 
The experiment data source from a multimedia conference 
system in the author’s laboratory. It contains 19 BPEL 
processes with 63 interesting activities after mapping. The tool  
 Figure 4.  The Result of Association Rules Mining
used for association rules mining is Microsoft SQL Server2005 
[6].When the size of the sliding window is set to 2, it produces 
269 subASeqs. The algorithm parameters of mining model are:  
MIN_SUPPORT = 0.035 
MIN_PROBABILITY (viz. MIN_CONFIDENCE) = 0.4. 
Here we illustrate the modeling of a BPEL process in 
conference system (Fig.5). After the neglection of 
scope\assign\eventHandlers, the LAT is shown in Fig. 6. 
 
Figure 5.  A BPEL process in Multimedia Conference System 
 
Figure 6.   LAT of BPEL process in Fig.5 
The mining result is shown in Fig.4, four rules are 
obtained, and they are consistent with the conference logic. 
Rule1 indicates that, after conference BPEL process’s 
invoking getMedia, setMedia is always invoked in succession. 
getMedia is used for querying a participant’s supported media 
condition, and setMedia is used for setting new media 
condition for the participant. In fact, before the “setting”, 
“querying” is necessary, in order to avoid the mistake that a 
participant has no camera but is required to receive conference 
video. Rule2 is also reasonable, because the function of 
getConfInfo is to get conference chairman’s ID, which is an 
indispensable parameter to invoke the immediate 
informChairman. 
Thus, during the procedure of constructing a BPEL 
process, when the developer creates an activity IVK_getMedia, 
we can recommend IVK_setMedia to him/her, this is helpful in 
enhancing the efficiency and accuracy of BPEL document’s 
compilation.  
VI. CONCLUSION AND FUTURE WORK 
The method in this paper mines out those highly related 
activities, which are internally tightly-coupled and can be 
applied in the creation of BPEL template and subprocess in the 
subsequent work. In addition, some BPEL base activities’ 
mappings are ignored here, and they can be added to be 
considered in future research.  
REFERENCES 
[1] Oasis, “Business process execution language (bpel)”, v1.1 and v2.0, 
URL: http://www.oasis-open.org, 2007. 
[2] Bao Liang ,Song Shengli ,Chen Sheng , Chen Ping , Hu Shengming and 
Cui Weiyong, “Research on static process slicing in BPEL”, Systems 
Engineering and Electronics, vol .31, No. 1, January 2009. 
[3] Zhai Yanlong, Su Hongyi, Zhang Han and Zhan Shouyi, “The method 
of segmenting BPEL process based on data stream optimization”, 
Journal of South China University of Technology (Natural Science 
Edition), vol.37, No.4, April 2009. 
[4] Deng Min, Deng Na, Peng Yong and Cheng Bo, “The algorithm of sub-
process discovery for BPEL process based on variable dependence”, 
Proceedings of 2010 International Conference on Communications and 
Mobile Computing (CMC 2010), 2010, in press 
[5] Deng Na and Deng Fang, “Research of a mining method about 
multidimensional inter-time association rule based on sliding window”, 
Proceedings of China-Ireland International Conference on Information 
and Communications Technologies (CIICT 2008), p.419–422,2008. 
[6] ZhaoHui Tang and Jamie MacLennan, “Data Mining with SQL 
Server2005”, Tsinghua University Press, January 2007. 
[7] Han Jiawei and Kamber M. “Data Mining: Concepts and Techniques”, 
China Machine Press , March 2007. 
 
