2010 Second International conference on Computing, Communication and Networking Technologies
Maintaining Privacy and Data Quality in Privacy 
Preserving Association Rule Mining
Chirag N. Modi, Udai Pratap Rao
Sardar Vallabhbhai National Institute of Technology, Surat, 
Gujarat, INDIA-395007
cnmodi.956@gmail.com
upr@coed.svnit.ac.in
Dhiren R. Patel
Indian Institute of Technology Gandinagar, Ahmedabad, 
Gujarat, INDIA-382424
dhiren@iitgn.ac.in
Abstract—Privacy preserving data mining (PPDM) is a novel 
research direction to preserve privacy for sensitive knowledge 
from disclosure. Many of the researchers in this area have 
recently made effort to preserve privacy for sensitive association
rules in statistical database. In this paper, we propose a heuristic
algorithm named DSRRC (Decrease Support of R.H.S. item of
Rule Clusters), which provides privacy for sensitive rules at 
certain level while ensuring data quality. Proposed algorithm 
clusters the sensitive association rules based on certain criteria
and hides as many as possible rules at a time by modifying fewer 
transactions. Because of less modification in database it helps 
maintaining data quality.
Keywords—Data mining, Frequent Itemset Hiding, 
Association Rule Hiding, Sensitivity, Clustering
I. INTRODUCTION
Successful applications of data mining techniques have 
been demonstrated in many areas that benefit commercial, 
social and human activities. Along with the success of these 
techniques, they pose a threat to privacy. One can easily 
disclose other’s sensitive information or knowledge by using 
these techniques. So, before releasing database, sensitive 
information or knowledge must be hidden from unauthorized 
access. To solve privacy problem, PPDM has become a hotspot 
in data mining and database security field. 
Researchers have proposed several approaches for 
knowledge hiding, in context of association rule mining. 
M.Attallah et al. [1] was the first to propose heuristic 
algorithms for preventing disclosure of sensitive knowledge. 
Oliveria et al. [3] presented taxonomy of attacks against 
sensitive knowledge. In following, we show the necessity of 
sensitive association rule hiding in real life application. 
A. Motivation
Consider, as a tea reseller we are purchasing tea at low 
price from two companies, Tata Tea Ltd. and Lipton Tea Ltd., 
while granting them to access our customer database. Now, 
978-1-4244-6589-7/10/$26.00 ©2010 IEEE
suppose the Lipton Tea supplier misuse the database and 
mines 
association rules related to the Tata Tea, saying that most of 
the customers who buy bread also buy Tata tea. Lipton tea 
supplier 
now runs a coupon scheme that offers some discount on 
bread with purchase of Lipton Tea. So, the amount of sales on 
Tata Tea is down rapidly and Tata Tea supplier cannot offer tea 
at low price to us as before and Lipton monopolizes the tea 
market and is not offering tea at low price to us as before. As a 
result, we may start losing business to our competitors. So, 
releasing database with sensitive knowledge is bad for us. This 
scenario leads to the research of sensitive knowledge (or rule) 
hiding in database.
In this paper, we propose a heuristic algorithm named 
DSRRC (Decrease Support of R.H.S. item of Rule Clusters) to 
preserve privacy for sensitive association rules in database.
Proposed algorithm modifies fewer transactions and hides 
many rules at a time. So, it is more efficient than other 
heuristic approaches. Moreover it maintains data quality in 
sanitized database. So, sanitized database is as useful as 
original database. A detailed description of proposed DSRRC 
algorithm is given in section 3.
Some parameters for data quality presented in [8], are as 
follows: (1) accuracy, measures the proximity of a sanitized 
value to the original one. (2) completeness, is used to evaluate 
the degree of missed data in the sanitized database and (3)
consistency, is related to the relationships that must continue 
to hold among the different among data items in a sanitized 
database.
B. Problem Description
The association rule hiding problem is to sanitize database 
in a way that through association rule mining one will not be 
able to disclosing the sensitive rules and will be able to mine all 
the non-sensitive rules. More specifically, the problem 
statement can be defined as follows: Let given dataset D, a set 
of association rules R over D is given and also R0?R, R0 is 
specified as sensitive rules set. Now, the problem is to find 
sanitized database D0 such that there exist only a set of rules R-
R0, can be mined. Finding an optimal solution to this problem 
is NP-hard, proved in [1]. 
The rest of this paper is organized as follows. In section 2, 
we discuss related background and existing approaches. In 
section 3, a detailed description of proposed DSRRC 
algorithm is given. An example demonstrating DSRRC 
algorithm is given in section 4. In section 5 we analyze and 
discuss the performance results of proposed algorithm. Finally 
in section 6, we conclude proposed algorithm by defining 
some future trends.
II. THEORITICAL BACKGROUND AND RELATED WORK
Association rule using support and confidence can be 
defined as follows. Let I= {i1,…,im}be a set of items. Database 
D={T1,….,Tn}is a set of transactions, where Ti?I(1?i?m). Each 
transaction T is an itemset such that T?I. A transaction T 
supports X, a set of items in I, if X?I. The association rule is an 
implication formula like X?Y, where X?I, Y?I and X?Y=?. 
The rule with support s and confidence c is called, if |X?Y|/|D| 
? s and |X?Y|/|X| ? c. Because of interestingness, we consider 
user specified thresholds for support and confidence, MST 
(minimum support threshold) and MCT (minimum confidence 
threshold). A detailed overview of association rule mining 
algorithms are presented in [2]. 
Privacy preserving association rule mining should achieve 
one of the following goals: (1) All the sensitive association 
rules must be hidden in sanitized database. (2) All the rules that 
are not specified as sensitive can be mined from sanitized 
database. (3) No new rule that was not previously found in 
original database can be mined from sanitized database. First 
goal considers privacy issue. Second goal is related to the 
usefulness of sanitized dataset. Third goal is related to the side 
effect of the sanitization process.
Many approaches have been proposed to preserve privacy 
for sensitive knowledge or sensitive association rules in 
database. They can be classified in to following classes: 
heuristic based approaches, border based approaches, exact 
approaches, reconstruction based approaches, and cryptography 
based approaches. In following, a detailed overview of these 
approaches is given.
A. Heuristic Based Approaches
These approaches can be further divided in to two groups
based on data modification techniques: data distortion 
techniques and data blocking techniques.
Data distortion techniques try to hide association rules by 
decreasing or increasing support (or confidence). To increase 
or decrease support (or confidence), they replace 0’s by 1’s or 
vice versa in selected transactions. So they can be used to 
address the complexity issue. But they produce undesirable 
side effects in the new database, which lead them to suboptimal 
solution. M.Attallah et al. [1] were the first proposed heuristic 
algorithms. The proof of NP-hardness of optimal sanitization is 
also given in [1].  Verykios et al. [11] proposed five 
assumptions which are used to hide sensitive knowledge in 
database by reducing support or confidence of sensitive rules. 
Y-H Wu et al. [14] proposed method to reduce the side effects 
in sanitized database, which are produced by other approaches 
[11]. K.Duraiswamy et al. [19] proposed an efficient clustering 
based approach to reduce the time complexity of the hiding 
process.
Data blocking techniques replace the 0’s and 1’s by 
unknowns (“?”) in selected transaction instead of inserting or 
deleting items. So it is difficult for an adversary to know the 
value behind “?”. Y.Saygin et al. [7][15] were the first to 
introduce blocking based technique for sensitive rule hiding. 
The safety margin is also introduced in [7] to show how much 
below the minimum threshold new support and confidence of a 
sensitive rule should. Wang and Jafari [17] proposed more 
efficient approaches than other approaches presented in [7][15].
B. Border Based Approaches
Border based approaches use the notion of borders 
presented in [4]. These approaches preprocess the sensitive 
rules so that minimum numbers of rules are given as input to 
hiding process. So, they maintain database quality while 
minimizing side effects. Sun and Yu [10] were the first to 
propose the border revision process. Hiding process in [10]
greedily selects those modifications that lead to minimal side 
effects. The authors in [13] presented more efficient 
algorithms than other similar approaches presented in [10].
C. Exact Approaches
Exact approaches formulate hiding problem to constraint 
satisfaction problem (CSP) and solve it by using binary integer 
programming (BIP). They provide an exact (optimal) solution 
that satisfies all the constraints. However if there is no exact 
solution exists in database, some of the constraint are relaxed. 
These approaches provide better solution than other 
approaches. But they suffer from high time complexity to CSP. 
Gkoulalas and Verykios [6] proposed an approach to find 
optimal solution for rule hiding problem. The authors in [12] 
proposed a partitioning approach for the scalability of the 
algorithm.
D. Reconstruction Based Approaches
Reconstruction based approaches generate privacy aware 
database by extracting sensitive characteristics from the 
original database. These approaches generate lesser side effects 
in database than heuristic approaches. Mielikainen [9] was the 
first analyzed the computational complexity of inverse frequent 
set mining and showed in many cases the problems are 
computationally difficult. Y. Guo [16] proposed a FP tree 
based algorithm which reconstruct the original database by 
using non characteristic of database and efficiently generates 
number of secure databases.
E. Cryptography Based Approaches
Cryptography based approaches used in multiparty 
computation. If the database of one organization is distributed 
among several sites, then secure computation is needed 
between them.  These approaches encrypt original database 
instead of distorting it for sharing. So they provide input 
privacy. Vaidya and Clifton [5] proposed a secure approach for 
sharing association rules when data are vertically partitioned. 
The authors in [20] addressed the secure mining of association 
rules over horizontal partitioned data. 
We proposed a more efficient heuristic algorithm than other 
heuristic approaches presented in this section.
II. DSRRC- PROPOSED HEURISTIC BASED ALGORITHM
To hide an association rule like X ?Y, we decrease its 
confidence (|X?Y|/|X|) to smaller than specified minimum 
confidence threshold (MCT). We decrease the support of Y 
(R.H.S. of the rule) in the most sensitive transactions. 
Therefore algorithm reduces the confidence faster than 
reducing the support of X. To decrease support count of an 
item, we delete one item from selected transaction by changing 
from 1 to 0.
A. Framework of DSRRC Algorithm
Some important concepts used in proposed framework of 
DSRRC algorithm are as follows:-
1) Item Sensitivity: is the frequency of data item exists in 
the number of the sensitive association rule containing this 
item. It is used to measure rule sensitivity.  
2) Rule Sensitivity: is the sum of the sensitivities of all 
items containing that association rule. 
3) Cluster Sensitivity: is the sum of the sensitivities of all 
association rules in cluster. Cluster sensitivity defines the rule 
cluster which is most affecting to the privacy.
4) Sensitive Transaction: is the transaction in given 
database which contains sensitive item. 
5) Transaction sensitivity: is the sum of sensitivities of 
sensitive items contained in the transaction.
A detailed overview of sensitivities is given in [21]. The 
proposed framework of DSRRC algorithm is shown in 
Figure.1. Initially association rules (AR) are mined from the 
source database D by using association rule mining algorithms 
e.g. Apriori algorithm in [2]. Then sensitive rules (SR) are 
specified from mined rules. Selected rules are clustered based 
on common R.H.S. item of the rules. Rule-clusters are denoted 
as RCLs. Then for each Rule-cluster sensitive transactions are 
indexed. Sensitivity of each item (and each rule) in each Rule-
cluster is calculated. Rule-Clusters are sorted in decreasing 
order of their sensitivity and sensitive transactions supporting 
first rule-cluster are sorted in decreasing order of their 
sensitivity.
  
Figure 1. Framework of proposed DSRRC algorithm.
After sorting process, rule hiding (RH) process hides all the 
sensitive rules in sorted transactions for each cluster by using 
strategy mentioned in this section and updates the sensitivity of 
sensitive transactions in other cluster. Hiding process starts 
from highest sensitive transaction and continues until all the 
sensitive rules in all clusters are not hidden. Finally modified 
transactions are updated in original database and produced 
database is called sanitized database D’ which ensures certain 
privacy for specified rules and maintains data quality.
B. DSRRC Algorithm
According to above presented framework for hiding 
association rules in database, the proposed DSRRC algorithm 
is shown in Figure 2. By using given minimum support 
threshold (MST) and minimum confidence threshold (MCT), 
algorithm first generates the possible number of association 
rules from source database D. Now some of the generated 
association rules are selected as sensitive rule set (set RH) by 
database owner. Rules with only single R.H.S. item are 
specified as sensitive. Then algorithm finds C clusters based 
on common R.H.S. item in sensitive rule set RH and calculates 
the sensitivity of each cluster. After that it index sensitive 
transactions for each cluster and sorts all the clusters by 
decreasing order of their sensitivities. For the highest sensitive 
cluster, algorithm sorts sensitive transaction in decreasing 
order of their sensitivites. 
INPUT: Source database D, Minimum Confidence Threshold (MCT), 
Minimum support threshold (MST).
OUTPUT: The sanitized database D’.
1. Begin
2. Generate association rules.
3. Selecting the Sensitive rule set RH with single antecedent and consequent 
e.g. x?y.
4. Clustering-based on common item in  R.H.S. of the selected rules
5. Find sensitivity of each item in each cluster.
6. Find the sensitivity of each rule in each cluster.
7. Find the sensitivity of each cluster
8. Index the sensitive transactions for each cluster.
9. Sort generated clusters in decreasing order of their sensitivity.
10. For the first cluster, sort selected transaction in decreasing order of their 
sensitivity
11. For each cluster c? C
12. {
13.        While(all the sensitive rules ? c are not hidden)
14.        {
15.       Take first transaction for cluster c.
16.                Delete common R.H.S. item from the transaction.
17.               Update the sensitivity of deleted item for modified transaction in 
other cluster and sort it.
18.                For i = 1 to no. of rule Rh?c
19.               {
20.                     Update support and confidence of the rule r ?c.
21.                     If(support of r < MST or confidence of r < MCT)
22.                    {
23.                         Remove  Rule r from Rh
24.                   }
25.              }
26.             Take next transaction.
27.      }
28.      End while
29. }
30. End for
Update 
Transactions
Update 
Sensitivity
Rule-
Clusters
Output
Update
Indexing & 
Sorting
GroupSelect
Transactions
Mine
D AR SR RCLs
RHTransaction 
Table
D’
31. Update the modified transactions in D.
32. End
Figure 2. DSRRC algorithm.
Now, the hiding Process tries to hide all the sensitive rules 
by deleting common R.H.S. item of the rules in cluster, from 
the sensitive transactions. While loop continues until all the 
rules are not hidden in cluster c. Every time in while loop it 
updates the sensitivity of deleted item for modified transaction 
in other cluster and sorts it. Finally algorithm updates all the 
modified transactions in original database. Proposed DSRRC 
algorithm produces sanitized database D’, in which most of 
the sensitive rules are hidden. This algorithm hides many rules 
in an iteration of hiding process and it modifies less 
transaction in database.
III. EXAMPLE
The following example illustrates proposed DSRRC 
algorithm. A sample transaction database D is shown in Table 
1. TID shows unique transaction number. Binary valued item 
shows whether an item is present or absent in that transaction. 
Suppose MST and MCT are selected 3 and 75% respectively.
Table 2 shows frequent itemsets satisfying MST, generated 
from sample database D. 
Table 1. Sample Transaction Database D.
TID Items Items (Binary Form)
1 a b c d e 11111000
2 a c d 10110000
3 a b d f g 11010110
4 b c d e 01111000
5 a b d 11010000
6 c d e f h 01110101
7 a b c g 11100010
8 a c d e 10111000
9 a c d h 10110001
In following, the possible number of association rules 
satisfying MST and MCT,  generated by Apriori algorithm [2]:
b?a, a?d, d?a, b?d, c?d, d?c, e?c, e?d, ab?d, bd?a, 
ac?d, ce?d, de?c, e?dc. Suppose the rules b?a, b?d and 
c?d specified as sensitive and should be hidden in sanitized 
database. There are two different R.H.S. items in selected 
rules, named “a” and “d”.  As shown in Table 3, Algorithm 
generates two clusters based on common R.H.S. item of the 
selected rules.
Table 2. Frequent Itemsets with Support Count.
Frequent Itemsets with
Support Count
a:7,b:5,c:7,d:8,e:4, ab:4,ac:5,bc:3,
ad:6, bd:4, cd:6, ce:4, de:4,abd:3,
acd:4, cde:4
Table 3. Clusters generated by DSRRC.
Cluster-1(d)
(b?d, c?d)   
Cluster-2(a)
(b?a)
Item Sensitivity Item Sensitivity
b 1 a 1
c 1 b 1
d 2
Total
 sensitivity
4
Total
 sensitivity
2
Cluster 1 includes sensitive rules namely b?d, c?d, 
where cluster 2 includes b?a. For cluster 1 sensitivities of 
items b, c, and d have 1,1and 2 respectively, where 
sensitivities for items a and b in cluster 2 have 1and 1 
respectively. Total sensitivity for cluster-1 and cluster-2 is 4 
and 2 respectively. For each cluster, sensitive transactions are 
indexed. Indexed transactions with their sensitivity are shown 
in table 4. Clusters are sorted based on their sensitivity. For the
first cluster (here cluster-1), algorithm sorts transactions in 
decreasing order of their sensitivity.
Table 4. Clusters generated by DSRRC algorithm.
Cluster-1(d)
(b?d, c?d)   
Cluster-2(a)
(b?a)
TID Sensitivity TID Sensitivity
1 4 1 2
2 3 3 2
3 3 5 2
4 4 7 2
5 3
6 3
8 3
9 3
Hiding process of algorithm modifies first transaction by 
deleting item d (common R.H.S. of rules in cluster-1). Table 
5(a) shows sanitized database after first iteration. Now, the 
support or confidence for all the rules in cluster-1 is decreased 
below the minimum thresholds. Then next cluster is taken. 
After one iteration, final sanitized database as shown in Table 
5(b) is generated.
Now, if we mine association rules from final sanitized 
database, we can see that most of the specified sensitive rules 
are hidden and very few side effects produced. But using only 
two iterations and modifying only one transaction, algorithm 
successfully hides many sensitive rules. So, DSRRC provides 
database quality while preserving privacy.
Table 5. Sanitized Databases.
TID Items TID Items
1 a b c  e 1  b c e
2 a c d 2 a c d
3 a b d f g 3 a b d f g
4 b c d e 4 b c d e
5 a b d 5 a b d
6 c d e f h 6 c d e f h
7 a b c g 7 a b c g
8 a c d e 8 a c d e
9 a c d h 9 a c d h
                        (a) Sanitized Database D1.       (b) Final Sanitized Database.
IV. EXPERIMENTAL RESULTS AND ANALYSIS 
For performance comparison, we selected the best 
sanitizing algorithm: Algo 1b [11] which hides sensitive rules 
by reducing support of R.H.S.  item of the rules.
We used Algo1b and DSRRC to sanitize sample database 
as shown in Table 2 and applied Apriori algorithm on both the 
produced sanitized database to mine association rules. In our 
experiment, we selected 3 sensitive association rules as in 
example. The sample dataset has 14 association rules with 
support count ? 3 and confidence ? 75. Then we evaluated the 
internal parameters and external parameters for both the 
algorithms.  The internal and external parameters for rule 
hiding algorithms are as follows: hiding failure (HF), misses 
cost (MC), artifactual patterns (AP), dissimilarity (DISS), side 
effect factor (SEF), data quality etc. A detailed overview of 
these parameters is given in [18].
As shown in Table 6 (a) and Table 6 (b), performance of 
DSRRC is better than Algo 1b, in terms of hiding failure, 
misses cost, artifactual patterns, dissimilarity, side effect factor 
and data quality of sanitized database. In Figure 3, we can see 
that performance of DSRRC algorithm is better than Algo 1b.
Table 6. Comparative Performance Results.
Parameters Algo 1b DSRRC 
HF ? 33.33% 0%
MC ? 45.45% ? 36%
AP ? 68.18% 0%
DISS(D,D’) ? 9.67% ? 6.4%
SEF ? 81.81% ? 36%
(a) Performance Results for Internal Parameters.
Parameters Algo 1b DSRRC
Accuracy ? 90.32% ? 93.45%
Quality
Completeness ? 77.78% ? 88.89%
(b) Performance Results for External Parameters.
Figure 3. Performance Comparision between DSRRC and Algo 1b.
Indexing is used in proposed algorithm, which helps to 
reduce number of scans of database. The number of 
modifications in database is very less because of clustering 
and use of sensitivities. Efficiency is improved by clustering 
which helps to hide many rules by modifying less sensitive 
transactions. The modifications in transactions are stopped 
when support or confidence reduced than minimum 
thresholds. Clustering and sensitivity help to hide many rules 
at a time.
V. CONCLUSION AND FUTURE SCOPE
In this paper, we proposed a heuristic algorithm named 
DSRRC which hides many sensitive association rules at a time 
while maintaining database quality. Several existing 
approaches regarding sensitive rule hiding problem are also 
discussed. An example demonstrating proposed DSRRC 
algorithm is discussed. We analyzed experimental results for 
DSRRC, which show that performance of the DSRRC 
algorithm is better than other existing heuristic approaches. 
Our proposed algorithm hides only rules that contain single 
item on R.H.S. of the rule. But it is more efficient than other 
heuristic approaches.
Proposed algorithm can be modified to hide sensitive rules 
which contain different number of R.H.S. items.
REFERENCES
[1] M. Atallah, E. Bertino, A. Elmagarmid, M. Ibrahim, and V. S. Verykios
“Disclosure limitation of sensitive rules,”.In Proc. of the 1999 IEEE 
Knowledge and Data Engineering Exchange Workshop (KDEX’99), pp.
45–52, 1999.
[2] J. Han and M. Kamber, Data Mining: Concepts and Techniuqes. Morgan 
Kaufmann Publishers, San Francisco, CA, 2001, pp. 227–245.
[3] S.R.M. Oliveira, M., O.R. Zaiane, and Y. Saygin, “Secure Association 
Rule Sharing,” In Proc. of the 8th Pacific-Asia Conf. PAKDD2004, 
Sydney, Australia, pp. 74–85, May 2004. 
[4] H. Mannila and H. Toivonen, “Levelwise search and borders of theories 
in knowledge discovery,” Data Mining and Knowledge Discovery, 
vol.1(3), pp. 241–258, Sep. 1997.
[5] J. Vaidya and C. Clifton, “Privacy preserving association rule mining in 
vertically partitioned data,” In proc. Int’l Conf. Knowledge Discovery 
and Data Mining, pp. 639–644, July 2002.
[6] A. Gkoulalas-Divanis and V.S. Verykios, “An Integer Programming 
Approach for Frequent Itemset Hiding,” In Proc. ACM Conf. 
Information and Knowledge Management (CIKM ’06), Nov. 2006.
[7] Y.Saygin, V. S. Verykios, and C. Clifton, “Using Unknowns to Prevent 
Discovery of Association Rules,” ACM SIGMOD, vol.30(4), pp. 45–54,
Dec.  2001.
[8] I.N. Fovino, and A. Trombetta, “Information Driven Association Rule 
Hiding Algorithms,” In Proc. 1st Int’l Conf. on Information Technology, 
pp.1–4, May 2008.
[9] T. Mielikainen, “On inverse frequent set mining,” In Proc. 3rd IEEE 
ICDM Workshop on Privacy Preserving Data Mining. IEEE Computer 
Society, pp.18–23, 2003.
[10] X. Sun and P.S. Yu, “A Border-Based Approach for Hiding Sensitive 
Frequent Itemsets,” In Proc. Fifth IEEE Int’l Conf. Data Mining (ICDM 
’05), pp. 426–433, Nov. 2005.
[11] V.S. Verykios, A.K. Elmagarmid, E. Bertino, Y. Saygin,  and E.
Dasseni, “Association rule hiding,” IEEE Transactions on Knowledge 
and Data Engineering, vol. 16(4), pp. 434–447, April 2004.
[12] A. Gkoulalas-Divanis and V.S. Verykios, “Exact Knowledge Hiding 
through Database Extension,” IEEE Transactions on Knowledge and 
Data Engineering, vol. 21(5), pp. 699–713, May 2009. 
[13] Moustakides and V.S. Verykios, “A Max-Min Approach for Hiding 
Frequent Itemsets,” In Proc. Sixth IEEE Int’l Conf. Data Mining (ICDM 
’06), pp. 502–506, April 2006.
[14] Y. H. Wu, C.M. Chiang and A.L.P. Chen, “Hiding Sensitive Association 
Rules with Limited Side Effects,” IEEE Transactions on Knowledge and 
Data Engineering, vol.19(1), pp. 29–42, Jan. 2007.
[15] Y. Saygin, V. S. Verykios, and A. K. Elmagarmid, “Privacy preserving 
association rule mining,” In Proc. Int’l Workshop on Research Issues in 
Data Engineering (RIDE 2002), 2002,pp. 151–163.
[16] Y. Guo, “Reconstruction-Based Association Rule Hiding,” In Proc. of 
SIGMOD2007 Ph.D. Workshop on Innovative Database Research 
2007(IDAR2007), June 2007.
[17] S.L.Wang and A. Jafari, “Using unknowns for hiding sensitive 
predictive association rules,” In Proc. IEEE Int’l Conf. Information 
Reuse and Integration (IRI 2005), pp. 223–228, Aug. 2005.
[18] Charu C. Aggarwal, Philip S. Yu, Privacy-Preserving Data Mining: 
Models and Algorithms. Springer Publishing Company Incorporated, 
2008, pp. 267-286.  
[19] K. Duraiswamy, and D. Manjula, “Advanced Approach in Sensitive 
Rule Hiding” Modern Applied Science, vol. 3(2), Feb. 2009.
[20] M. Kantarcioglu and C. Clifton, “Privacy-preserving distributed mining 
of association rules on horizontally partitioned data,” IEEE Transactions 
on Knowledge and Data Engineering, vol. 16(9), pp. 1026-1037, Sept. 
2004.
[21] S. Wu, H. Wang, “Research On The Privacy Preserving Algorithm Of 
Association Rule Mining In Centralized Database,” Int’l Symposiums on 
Information Processing (ISIP), pp. 131 – 134, May 2008.
