An Intrusion Detection System in Ad Hoc
Networks: A Social Network Analysis Approach
Wei Wang, Hong Man, and Yu Liu
Department of Electrical and Computer Engineering
Stevens Institute of Technology
Hoboken, NJ 07030, USA
e-mail: {wwang3, hman, yliu}@stevens.edu
Abstract—We introduce a social network analysis method as
a new approach to build an Intrusion Detection System (SN-
IDS) in ad hoc networks. The SN-IDS utilizes social relations
as metrics-of-interest for anomaly detections, which is different
from most traditional IDS approaches. To construct proper social
networks, we first investigate ad hoc MAC and network layer
data attributes and select relevant social feature sets; then we
build up a set of socio-matrices based on these features. Social
analysis methods are applied to these matrices to detect suspicious
behaviors of mobile nodes. NS-2 simulation results show that this
SN-IDS system can effectively detect common attacks with high
detection rates and low false positive alarm rates. Furthermore, it
has clear advantages over the conventional association rule based
data mining IDS in terms of computation and system complexity.
Index Terms—Intrusion Detection System, Social Network
Analysis, Network Security, Ad Hoc Networks.
I. INTRODUCTION AND RELATED WORK
Social network analysis has emerged as an interdisciplinary
technique in modern sociology, information science and eco-
nomics. Social relationships are used to enhance system func-
tions, performance, and security levels. Social Path Routing
(SPROUT) algorithm exploits social path trust rating in struc-
tured p2p networks [1]. Davis Social Links was proposed in
[2], social closeness centrality metric was used for routing dis-
covery. Coffman and Marcus applied Hidden Markov Models
to identify suspicious communication evolutions for certain
groups based on Social Network metric values [3].
In order to secure the perimeter-free ad hoc networks, many
types of intrusion detection systems (IDS) have been proposed,
including stand-alone IDS, distributed cooperative IDS and
hierarchical (cluster-based) IDS. Distributed cooperative IDS
was first proposed by Zhang and Lee [4]. If a node detects an
intrusion with low confidence, it can initiate a global intrusion
detection procedure through a cooperative detection engine. Yi
and Lee [5] developed a cross-feature analysis using decision-
tree based classification algorithm for local anomaly detection.
Mell and McLarnon proposed a hierarchical IDS architecture
[6]. A cluster of neighboring MANET nodes randomly and
fairly elect a monitoring node to run IDS.
In this work we attempt to study the capability of social
network analysis as a new anomaly detection tool. Our objec-
tive is to demonstrate that a set of properly constructed social
networks can be as effective as some conventional data mining
based IDS in capturing network attacks, while with less system
complexity. To the best of our knowledge, our work of building
an intrusion detection system using the social network analysis
method is the first of its kind.
II. SOCIAL NETWORKS ANALYSIS
There are three formal ways to analyze the huge amount of
social network data: descriptive methods using social graphs;
statistical modeling; and analysis methods using the adjacency
matrix (socio-matrix). In this paper, we focus on analysis
methods, especially the “centrality” properties.
A. CENTRALITY
Freeman General Centrality [7] is a very important quan-
titative parameter representing which members of a network
are important. The three widely used centrality measures are
“degree”, “betweenness” and “closeness”.
“Degree” is defined as the number of direct connections
an actor has to other members of the network. Actors with a
high degree centrality are popular nodes with a large amount
of links to other nodes in the network. If we represent the
whole network graph as G, and the total number of nodes as
N , degree centrality for node k is expressed as
CD(k) =
?
?j?G
j =k
wkj (1)
where wkj is the edge weights between node j and k (j = k).
“Betweenness” shows the importance of a node in the
network. Geodesic Path (GP) is defined to be the shortest path
between two nodes in the network. “Betweenness” of node k
takes the form of
CB(k) =
?
?i,j?G,
i=j =k
GPNumikj
GPNumij
(2)
where GPNumikj is the number of Geodesic paths from
node i to j involving node k, while GPNumij is the total
number of Geodesic paths with or without node k. An actor
is considered in a favored position if it frequently falls on the
geodesic paths between other pairs of actors in the network.
“Closeness” centrality means how close a node is to all the
other nodes in the network by emphasizing all the distances,
rather than only with its immediate nodes. Thus this parameter
also shows the importance of the node. The definition of
978-1-4244-2309-5/09/$25.00 ©2009 IEEE 1
“closeness” of one node is the inverse of the sum of the
geodesic distances (Geodesic Path length) from that node to
all the other nodes.
CC(k) =
N ? 1?
?j?G
j =k
GPLenkj
(3)
B. EGO NETWORK
In this work, we focus our study on “local” ego networks
(local analysis). Ego network is a network which is made up of
a single actor (ego) together with the actors who are connected
to (alters) and all the links among those alters. Since global
network topology information is hardly available at each node,
ego network provides enough information for our system. It
helps understand variation in the behavior of individuals, and
whether behaviors of one node during a certain period match
its routine ones. Analyzing centrality properties in the ego
network is relatively simpler.
According to Equation (3), the “closeness” of an ego k is 1
considering k has a direct connection with all the alter nodes.
The “betweenness” metric calculation is also simplified since
the length of Geodesic paths is either one or two. Assume ego
k’s binary adjacency matrix A = [aij ]N×N is defined as
aij =
{
1, node i and j have a direct connection
0, otherwise
and B = A2 = [bij ]N×N , where N is the total number of
nodes in the network. Thus for each element bij in B,
bij = ai1a1j + ai2a2j + . . .+ aiNaNj (4)
it represents the total number of pathways from node i to node
j (i? 1? j, . . . , i? N ? j) with the length two.
According to the definition of “betweenness”, in ego net-
works, we should only consider the cases with Geodesic paths’
length equals to two, excluding the ones that two nodes i and
j have direct links. As a result, the ego k’s betweenness can
be simplified as
CB(k) =
?
?i=1,j =1,i=j?B,
i,j?{aij =1}
1
bij
(5)
III. SOCIAL NETWORK BASED IDS
A. FEATURE OF INTERESTS IN AD HOC NETWORKS
To characterize MAC layer normal behaviors, we define
features based on the MAC layer data attributes, with one
exception for DATA packets in the MAC layer. That is, we
further associate each MAC DATA packet with information
from the network layer, a MAC DATA packet may encapsulate
a routing data packet (routingDataPkt) or a routing control
packet (routingCtrlPkt). MAC information can help identify
information of each pair of sending and receiving nodes, so
it could either trace the exact attack source or at least the
misbehaved node (a victim node) for most of the attacks.
But the MAC layer does not always provide enough infor-
mation for social network analysis. For example, the network
layer blackhole attack will cause changes in social relations
at the network layer among victim nodes, but nodes’ social
relations at MAC layer will not change since every node’s
physical neighbors have not changed. Therefore in our system,
features are selected from both MAC and network layers.
With different typed control and data traffic from both MAC
and network layers, we can build multiple ego networks at the
same time, with each network representing one relation. Table
I lists our cross layer social feature set.
TABLE I
SOCIAL FEATURE SET FROM MAC AND NETWORK LAYERS
Feature Value Space
Time Timestamp
Flow direction IN, OUT
MACPktType RTS, CTS, DATA, ACK
RoutingPktType routingDataPkt, routingCtrlPkt
Neighboring nodes nodeIDs in the Routing Table
B. INTRUSION DETECTION SYSTEM PROPOSED
Data Collection
Data Preprocessing
Data Preprocessing
Module
MAC/Network layer Data
Metrics Analysis
Normal Profile Statistics Testing Profile Statistics
Detection
Global Response Local Response
Social Analysis
Module
Intrusion Response
Module
Control Matrices Data Matrices
RTS CTS RoutingData NeighborLists... ...
Generating Social Networks
Fig. 1. Social Network Based Intrusion Detection System
Figure 1 is our proposed social network based intrusion
detection system. In this work, we are more focus on the data
preprocessing and social analysis modules, to show how socio-
matrices are collected and analyzed for anomaly detections.
Previous work of integrating local intrusion alerts with global
intrusion alerts can be found in [8].
1) Data Preprocessing Module: The data collection com-
ponent collects all audit data according to the feature
set described in table I. Then the data preprocessing
component will segment the data with a sliding window
(sampling period), encode each data item into the appro-
priate social formats, and categorize them to construct
different ego networks in the subsequent module.
2) Social Analysis Module: This module provides much
freedom for different IDS design objectives. One of the
major advantages of applying the social network method
2
is its flexibility to define what the “actors” are and what
the “ties” are. For ego networks with different types of
actors and ties, the same metrics analysis methods can
be employed, which means, the system does not have
to change the analysis tool but the objects for different
design purposes. The metrics analysis will apply the
mathematical methods introduced in section II.
We use control and data traffic to construct social networks.
Each social network is represented by an adjacency matrix.
For control matrices, “degree” centrality is calculated, since
“betweenness” does not mean anything for control messages;
For data matrices, both “betweenness” and “degree” centrality
are computed. Although we do not monitor other matrices
such as MAC ACK/Route Request/Route Reply/Route Error,
all these ego networks can be easily generated if needed.
The profile built up process is divided into two phases.
During the training phase, training data is collected over a
long period of time relative to testing data. By repeating the
simulation multiple times, a normal profile is constructed by
averaging the outputs from the metrics analysis component.
During the testing phase, the calculated social metrics of the
testing data will be compared to the normal profile, if testing
data statistics violate the ones from the normal profile, an
anomaly will be reported (details in IV. C).
IV. PERFORMANCE EVALUATION
The simulation platform we use is Network Simulator (NS-
2). Table II lists our simulation environment.
TABLE II
NS-2 SIMULATION SCENARIOS AND PARAMETERS
Parameter Value/Choice
Topology 500m x 500m
Node movement random waypoint model
Radio range 250m
Routing protocol AODV
Link capacity 11 Mbit/s
Node set count 30
Average transmission rate per flow 10packet/s, 512byte/packet
Maximum Connects 25
Pause time 1000/300/100/10s
Max Moving Speed 5 m/s
We use the following three metrics to evaluate the perfor-
mance of our proposed detection system.
1) Single-node successful detection rate: the probability of
at least one node in the network that detects the attacks
correctly during a particular time frame;
2) Multi-node successful detection ratio: the ratio of the
number of nodes that detect the attacks correctly during
a particular time frame to the total number of nodes in
the network;
3) Multi-node false positive ratio: the ratio of the number of
nodes falsely identifying attack-free events as anomalies
during a particular time frame to the total number of
nodes in the network.
From a normal “betweenness” profile in Figure 2, we can
see that the “local betweenness” will fluctuate around a local
mean indicating changes of routing information due to node
movements or link failures. Thus in our work, during both
training and testing phases, a sliding window is applied for
alleviating the “betweenness” fluctuation.
0
10
20
30
40
50
60
1 14 27 40 53 66 79 92 105 118 131 144 157 170 183
Time
B
et
w
ee
n
n
es
s
Fig. 2. Normal node betweenness
We set node15 as the malicious node playing the blackhole
attack and study the attack impact on node15’s immediate
neighbor node27. In Figure 3, during the attack time, the
betweenness of the attacker node15 increases sharply with
attracting many other nodes to join its ego network. At the
same time, node27’s betweenness decreases as many of its
alter nodes stop their connections to node27, thus its ego
network is degenerated to a smaller one with fewer alters.
node15
0
50
100
150
1 15 29 43 57 71 85 99 113 127 141 155 169 183 197 211
Time
B
et
w
ee
n
n
es
s
(a) Betweenness of an attacker node15
node27
0
20
40
60
1 15 29 43 57 71 85 99 113 127 141 155 169 183 197 211
Time
B
et
w
ee
n
n
es
s
(b) Betweenness of attacker’s neighbor node27
Fig. 3. Betweenness change under a blackhole attack
Furthermore, the “betweenness” impact is not constrained
to the attacker’s immediate neighbors. Not being a neighbor to
the attacker node15, node2’s ego network also changed during
the attack. Figure 4 shows its ego network before and after the
blackhole attack, with connection numbers dropped among the
ego and some alters. If node2 has nodes on its neighboring list,
i.e. node6, 21, 25, and 27, which are victims and immediate
neighbors of node15, the connections from these victim nodes
to node2 would immediately decrease to zero at the beginning
of the attack period, thus the betweenness of node2 would
increase sharply as the denominator in Equation (2) decreases.
Therefore, with neighboring nodes unchanged, node2 which is
not on the victim list (within one-hop range) would detect the
occurrence of an attack over multi-hop range.
Table III shows the average ratios of nodes that successfully
and falsely detect the blackhole and sleep deprivation attacks
for different pause time. As shown in the table, with a low
3
20
6
7
8
13
17
18
21
24
25
27
28
(a) Before blackhole attack
2
0
6
7
8
13
17
18
21
24
25
27
28
(b) After blackhole attack
Fig. 4. Attacker’s non-neighbor – node2’s ego network
false positive rate, our system performs well on these two
attacks. It can achieve 100% successful single-node detection.
Meanwhile, the successful detection rate increases as the
maximum pause time decreases. This can be explained by the
“small-world phenomenon” principle in social networks. The
“six degrees of separation” states that everyone is an average
of six “steps” away from each person on earth. Within our
small ad hoc network of 30 nodes, the impact of attacks
on nodes’ relations will propagate from one node to the
whole network over multi-hops, but only those nodes whose
perceiving impact from the victims is big enough can detect
the attacks. With less mobility, the number of nodes who catch
this impact is more limited; while with more mobility, the
information will propagate further in the network.
TABLE III
AVERAGE RATES OF SUCCESSFUL AND FALSE POSITIVE DETECTIONS
Pause Time single-node Multi-node Multi-nodedetection rate detection ratio false positive ratio
Blackhole Attack
1000s 100% 43.33% 2.22%
300s 100% 54.81% 1.48%
100s 100% 60.37% 0.37%
10s 100% 84.81% 0.37%
Sleep Deprivation Attack
1000s 100% 45.56% 2.96%
300s 100% 57.41% 1.57%
100s 100% 64.07% 0.37%
10s 100% 66.67% 0.37%
V. MULTIRELATIONS
Social actors are often connected by more than one relation-
ship. Thus we here study how multi-relations help make de-
tection decisions and improve system detection performance.
To measure the “degree” of a node, the value of a “tie” could
be the direct traffic that the node sends, receives and relays, or
all physical traffic that can be overheard within its transmission
range at the MAC layer. For the packet dropping attack,
Figure 5 is the observations from node16. As a neighbor of
node15 (attacker), node16 (victim) sees that both the direct
and physical traffic during the time slot 11, 12 are low, thus
an alarm will be raised. Provided the bursty nature of wireless
traffic, nodes may have no traffic to send or forward for some
period. Thus without applying the physical traffic matrix, in
our experiment, six out of twelve nodes who are node15’s
immediate neighbors will generate false alarms at the wrong
time (50% false detection rate). But cases with two relations
will reduce it to zero false rate in our scenario.
From node15 to node16
0
50
100
150
200
250
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Time Slot
D
eg
re
e
(a) Direct traffic from node15 to node16
0
100
200
300
400
500
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Time Slot
D
eg
re
e
other nodes to node15
node15 to other nodes
(b) Physical traffic into and out of node15
Fig. 5. Direct and physical traffic observed in node16’s ego networks under
a packet dropping attack
Fig. 6. Ad hoc Topology
For the TCP SYN flooding attack, we use an ad hoc network
topology as Figure 6, with node0/5/10 acting as fusion centers.
Within each subnet, all nodes request TCP services to these
three nodes. Assume the number of TCP requests (TCP SYN)
packets received at one node in a given time is a R.V. with a
Poisson distribution, we define a “deficiency ratio” R as
R =
win[sumSY N ]? win[sumSY N?ACK ]
win[sumSY N?ACK ]
(6)
where win[sumSY N ] is the total number of sent SYN packets
and win[sumSY N?ACK ] is the total number of received
SYN-ACK packets fall in one sliding window. The difference
between the number of SYN and SYN-ACK depends on the
window size as well as the TCP requests frequency, thus we
“normalize” the difference by win[sumSY N?ACK ] to remove
this dependency, and also, to exaggerate the difference if
win[sumSY N?ACK ] is small.
Figure 7 shows how SYN-ACK Deficiency Ratio R is
calculated using social metrics. {Mi} represent the matrices
4
M
1
M
2
M
3
M
4
M
5
M
6
M
7
time
M
k-1
M
k
M
k+1
M
k+2
M
k+3
M
k+4
. . .
50 55 60 65 70
Sliding Windows
M
1
' M
2
' M3' M
4
' M
5
' M
6
' M
7
' Mk-1' Mk' Mk+1' Mk+2' Mk+3' Mk+4'. . .
. . .
. . .
SYN #
SYN-ACK #
R
1 R2 R3 Rk Rk+1 Rk+2. . . . . .
MatrixSum
1
Matrix
Division
Overlap slot Non-overlap slot
MatrixSum
1
'
MatrixSum
2 MatrixSum
3
MatrixSum
2
' MatrixSum
3
'
Matrix
Division
Matrix
Division
Matrix
Division
Matrix
Division
Matrix
Division
MatrixSum
k/2
MatrixSum
k/2
'
MatrixSum
k/2+1MatrixSumk/2+2
MatrixSum
k/2+1
'
MatrixSum
k/2+2
'
Fig. 7. Calculating SYN-ACK Deficiency Ratio R by social metrics
sequence for the SYN packets number while {M ?i} represent
the sequence for SYN-ACK packets number collected at each
node. The immediate two sliding windows are slightly over-
lapped in order to alleviate the fluctuation in curves without
losing the abnormal change points information.
During the attack period, two attacker nodes 1 and 2 send
tremendous TCP SYN requests to the victim node0. Follow
equation (6), by basic matrix adding, abstracting and element
division, we get the the corresponding ACK deficiency ratio
for several nodes as in Figure 8. For the attack free period,
the numbers of SYN and SYN-ACK are close, so the R has
a very small value; when an attack occurs, the R will jump
to a high value compared to the normal situation. We use
two relations for the detection, and a single relation will not
produce a successful detection result. Even though detections
can be made using other methods as in [9], comparable data
can be easily obtained from the social network framework.
0
1
2
3
4
5
6
7
1 5 9 13 17 21 25 29 33 37 41 45 49 53 57 61 65 69
Time
D
ef
ic
ie
n
cy
R
at
io
Node3
Node4
Node5
Node10
Fig. 8. SYN-ACK Deficiency Ratio R
VI. RUNTIME COMPLEXITY COMPARISON
We briefly compare the runtime complexity of our proposed
IDS with an association rule based IDS, which has been
successfully applied to network intrusion detection systems.
There are two issues about association rule based mining
algorithms. The first is the algorithm complexity, tremendous
amount of time and computer resources will be consumed for
computing. The second is the cost for picking interesting rules
even though aggregation and pruning steps are taken. Human
manipulation for redundancy rules will be expensive.
We ran both IDS systems on a PC, with Intel(R) Core(TM)2
CPU 6400 @ 2.13GHz, MemTotal 1GB, running Linux OS.
Three ego networks are used to monitor MAC layer Rout-
ingData and network layer neighbor lists information. Each
node moves with a maximal speed of 5m/s, pause time 10s,
and simulation time 30 minutes. The average detection delay
for “social analysis module” in Figure 1 (from generating ego
networks to alarming on an attack) is 0.424s. For comparison,
with the Apriori based IDS, we get an average of 930,000 data
transactions for total 30 minutes at each node, with 7 features
for each transaction. Before aggregation, 246 rules are gener-
ated; 21 rules are left after. 11 rules are contributable for the
final detection. The average detection delay for Apriori based
IDS is 1.051s, excluded the time spent on picking valuable
rules. Therefore, our SN-IDS system is comparably simpler
in implementation and computation, while socio-metrics are
comparable to the Apriori based anomaly rules.
VII. CONCLUSIONS
In this work, we introduced the social network analysis
method to build an intrusion detection system (SN-IDS) for ad
hoc networks. This SN-IDS is intended to monitor different
relations among the ad hoc nodes, and generate alarms when
one or more relation rules are violated. We also showed that
the capability of the proposed SN-IDS can be further extended
with the help of combining different matrices to study multi-
relations simultaneously. Furthermore, the proposed system
has a clear advantage over popular association rule based IDS
in terms of computation and system complexity.
REFERENCES
[1] S. Marti, P. Ganesan, and H. Garcia-Molina, “Dht routing using social
links,” in Proceedings of the International P2P conference, 2004, pp.
100–111.
[2] L. Banks, S. Ye, Y. Huang, and S. F. Wu, “Davis social links: Integrating
social networks with internet routing,” in In Proceedings of ACM SIG-
COMM Workshop on Large-Scale Attack Defense, Kyoto, Japan, August
2007.
[3] T. Coffman and S. Marcus, “Dynamic classification of groups through
social network analysis and hmms,” in Aerospace Conference, 2004.
Proceedings. 2004 IEEE, vol. 5, Austin, TX, USA, March 2004, pp.
3197–3205.
[4] Y. Zhang and W. Lee, “Intrusion detection in wireless ad-hoc networks,”
in in Proc. the 6th Annual International Conference on Mobile Computing
and Networking (MobiCom’00), August 2000, pp. 275–283.
[5] Y. Huang and W. Lee, “A cooperative intrusion detection system for ad
hoc networks,” in in Proc. the 1st ACM Workshop on Security of Ad Hoc
and Sensor Networks, October 2003, pp. 135–147.
[6] P. Mell and M. McLarnon, “Mobile agent attack resistant distributed
hierarchical intrusion detection systems,” in In Proceedings of the Sec-
ond International Workshop on Recent Advances in Intrusion Detection
(RAID99), Purdue, USA, September 1999.
[7] L. C. Freeman, “A set of measures of centrality based on betweeness,”
Sociometry, vol. 40, pp. 35–40, 1977.
[8] Y. Liu and H. Man, “Network vulnerability assessment using bayesian
networks,” in SPIE Data Mining, Intrusion Detection, Information Assur-
ance, and Data Networks Security, vol. 5812, 2005.
[9] H. Wang, D. Zhang, and K. G. Shin, “Detecting syn flooding attacks,”
in INFOCOM 2002. Twenty-First Annual Joint Conference of the IEEE
Computer and Communications Societies Proceedings IEEE, vol. 3, June
2002, pp. 1530–1539.
5
