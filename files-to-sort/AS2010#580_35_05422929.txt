An Encounter with Strong Association Rules  
G. S. Bhamra 
M.M. Institute of Comp. Tech. and Business Management  
Maharishi Markandeshwar University 
Mullana-133203, Haryana, India 
bhamra.gs@gmail.com 
A.K.Verma 
Deptt. of Computer Science & Engineering 
TIET, Thapar University 
Patiala-147004, Punjab, India 
 akverma@tiet.ac.in
R. B. Patel 
Deptt. of Computer Engineering 
MMEC, Maharishi Markandeshwar University 
Mullana-133203, Haryana, India 
patel_r_b@indiatimes.com 
 
Abstract—Data Mining (DM) is the process of automated 
extraction of interesting data patterns representing knowledge, 
from the large data sets. Frequent itemsets are the itemsets that 
appear in a data set frequently. Finding such frequent itemsets 
plays an essential role in mining associations, correlations, and 
many other interesting relationships among itemsets in 
transactional database. In this paper an algorithm, SAR (Strong 
Association Rule), is designed and implemented to check whether 
an Association Rule (AR) is strong enough or not. Apriori 
algorithm is also implemented to generate Frequent k-itemsets. A 
Binary Transactional Dataset is used for implementing the 
algorithm in java language.   
Keywords-Data Mining; Frequent Itemsets; Transactional Data 
Se;  Association Rule
I.  INTRODUCTION 
Data Mining (DM) is the process of automated extraction 
of interesting data patterns representing knowledge, implicitly 
stored (embedded or hidden) in large databases, the web, other 
massive data repositories, or data streams [1, 2]. Patterns are 
extracted using tools such as classification, association rules, 
clustering, etc.  
A huge amount of transactional data, a.k.a. basket data, is 
available in the retail industry due to advancement in bar code 
technology where a customer’s purchase order is stored per 
transaction basis [3]. Frequent itemsets are the itemsets that 
appear in a data set frequently. Finding such frequent itemsets 
plays an essential role in mining associations, correlations, and 
many other interesting relationships among itemsets in 
transactional and relational databases. Frequent Itemset mining 
is a core DM task. It has an elegantly simple problem 
statement: to find the set of all subsets of items that frequently 
occur together in database records or transactions. Although 
this task has a simple statement, it is CPU and input/output 
(I/O) intensive, mainly because the large amount of itemsets 
that are typically generated and large size of the datasets 
involved in the process[2,4,5]. 
Mining the Association rules from the frequent itemsets 
requires a transactional database which can be a real 
transactional data base of any retail industry or can be a 
synthetic version generated by a tool. Synthetic Data Set 
generated by a tool can server a fundamental requirement for 
experimenting with the DM concepts and mining the 
Association rules from the frequent itemsets. Newly designed 
algorithms can be experimented and tested on such synthetic 
data sets and then the concepts can be implemented on a real 
data set [8].  
This paper presents an designed and implemented 
algorithm, SAR (Strong Association Rule), to check whether 
an Association Rule (AR) is strong enough or not. Apriori 
algorithm is also implemented to generate Frequent k-itemsets. 
A Binary Transactional Dataset [8] is used for implementing 
the algorithm in java language 
Rest of the paper is organized as follows. Section 2 
describes the definitions and preliminary concepts; Section 3 
describes the SAR algorithm. Implementation and performance 
of the algorithm is shown in Section 4 and finally article is 
concluded in Section 5. 
II. DEFINITIONS AND PRELIMINARIES 
The frequent itemset mining can be formally defined as 
follows: 
TDS   Transactional Database  
D   total number of transactions in TDS  or size of TDS  
I = { }miii ,,, 21    set of m items in TDS  
t   A transaction (tuple) in TDS .Each transaction is 
assigned an identifier called TID.  
P   A set of items (itemset or pattern) in a particular 
transaction t , IP ? . An itemset P  containing k items is 
called k-itemset. 
)(Ps  : Support of an itemset P  is the frequency of 
occurrence of P  in TDS   
)(Ps  = 
D
Pcontainingtof ____#
 %, 
342978-1-4244-4791-6/10/$25.00 c©2010 IEEE
 Transactional 
Data Set  
Candidate -1 Itemset 
Generator 
 Itemset     Sup count 
Candidate -1 Itemset 
Frequent -1 Itemset 
Generator min_sup
 Itemset     Sup count 
Frequent -1 Itemset 
All Frequent Itemsets  
Reservior 
JOINER 
Candidate Itemset 
Generator 
 Itemset     Sup count 
Intermediate 
Candidate Itemset 
SUBSET  
TESTER  
 Itemset     Sup count 
Candidate Itemset 
Prior Knowledge 
(Apriori Property) 
Frequent Itemset 
Generator  Itemset     Sup count 
Frequent  Itemset min_sup 
 
Figure 1. Block Architecture of Apriori Implementation   
where Pcontainingtof ____#  is the support count 
(sup_count) of itemset P .  
min_sup: given minimum support threshold.   
Frequent Itemsets   Frequent itemsets are the itemsets that 
appear in a data set frequently. and satisfy the minimum 
support(min_sup) ,i.e. itemset P  is frequent if 
)(Ps ? min_sup.  
kC   Candidate frequent k-Itemsets is the list (or set) of all 
frequent k-itemsets without the constraint of minimum support 
threshold, min_sup.  
kL   List (or set) of frequent k-itemsets after pruning the 
candidate set kC  by applying the constraint of min_sup. 
Antimontone downward closure property of Frequent 
Itemsets  if a set cannot pass a test, all of its supersets will 
fail the same test as well, i.e., all nonempty subsets of a 
frequent itemset must also be frequent, i.e., any (k-1)-itemset 
that is not frequent cannot be a subset of a frequent k-itemset. 
This property is used in subset testing of frequent itemsets.  
Apriori Algorithm   Apriori is most popular and basic 
algorithm proposed by R. Agrawal and R. Srikant [6] for 
mining frequent itemsets for generating boolean association 
rules. Apriori exploits the basic functionality of a frequent 
itemset: all subsets of a frequent itemset must be frequent. 
Starting with singleton itemsets, Apriori computes their 
supports by scanning the database, and filters out frequent 
itemsets. At the end of each iteration, only itemsets whose 
immediate subsets are all frequent at the current iteration are 
considered at the next iteration.  
We have also implemented Apriori algorithm in java 
language. Figure 1 shows the block architecture of the Apriori 
implementation. Transactional Data Set (TDS) contains items 
purchased per transaction basis. Candidate-1 Itemset Generator 
generates Candidate-1 itemset with support count. Frequent-1 
Itemset Generator prunes Candidate-1 itemset with the 
constraints of given minimum threshold support count, i.e., 
min_sup and generates Frequent-1 itemset which also is 
2010 IEEE 2nd International Advance Computing Conference 343
stacked in All Frequent Itemset Reservoir (AFIR). AFIR is 
used to supply the prior knowledge to the Subset Tester. In 
each level wise iteration JOINER joins the Frequent Itemset 
List then Candidate Itemset Generator generates Intermediate 
Candidate Itemset with support count. Subset Tester generates 
all the non empty subsets for every itemset in Intermediate 
Candidate Itemset. If any of subset is not frequent in previous 
list (Prior Knowledge from AFIR) and a resultant Candidate 
Itemset is generated for that iteration which is then pruned by 
Frequent Itemset Generator for generating Frequent Itemset 
List with the constraints of min_sup. This list is stacked to 
AFIR and also given to JOINER for the next iteration. This 
process is repeated till an empty Frequent Itemset list is 
obtained.       
Association Rule(AR)   An implication of the form 
QP  , where itemset IP ? , itemset IQ ? , and 
?=QP  . Itemset P  is the antecedent part and itemset Q  
is called the  consequent part of AR.  
Association Rules first introduced in [3], are used to 
discover the associations (or co-occurrences) among items in a 
transactional database. ARs can be used to find the patterns of 
customer’s purchase such as how the transaction of buying 
some goods will impact on the transactions of buying others. 
Such rules can be implemented to design the merchandise 
shelves, to manage the stock and to classify the customers 
according to the purchase patterns. Support and confidence are 
two measures to find interesting Association Rules. 
Support, s, of an AR is the probability that the transaction 
contains both antecedent and consequent of AR and  is given 
as: 
)( QPs  =
D
QandPbothcontainingTof _______#
%, we 
can say that %s  of the transactions support the rule QP  , 
0.10 ?? s  or %100%0 ?? s  
Confidence, c, of an AR is the conditional probability that a 
transaction having antecedent also contains consequent of AR 
and is given as: 
)( QPc  =  
)(
)(
Ps
QPs 
 = sup_count( QP  ) / 
sup_count( P ), we can say that when itemset P  occurs in a 
transaction there are %c  chances that itemset Q  will occur in 
that transaction, 0.10 ?? c  or %100%0 ?? c   
min_conf  given minimum confidence threshold 
Strong AR   if ? )( QPs min_sup && 
? )( QPc min_conf, then rule QP   is called strong 
AR.  
Association Rule Mining (ARM)   ARM is the task to 
find all the strong association rules whose support and 
confidence are above the min_sup and min_conf, respectively. 
The ARM can be viewed as a two-step process[7].  
• Find all frequent k-itemsets( kL ) 
• Generate Strong Association Rules from kL      
III. SAR ALGORITHM 
This section describes an algorithm for finding the strong 
ness of an AR. 
Algorithm: SAR: Find strong association rule whose support 
and confidence are greater than given threshold support and 
confidence. 
Input:  
• TDS , A Transactional Database having m  number 
of items and D  number of transactions 
• min_sup, the minimum threshold support. 
• min_conf, the minuming threshold confidence 
• P , antecedent part of AR )( QP  , 
P { }( )miiiI ,...,, 21=?    
• Q , consequent part of AR )( QP  , 
Q { }( )miiiI ,...,, 21=? , and  ?P ?=Q  
Output: 
• s , support factor of the AR )( QP  . 
• c , confidence factor of the AR )( QP  . 
• sf , strong ness factor of the AR )( QP   
Method:  
0=tpq ;  
for each transaction TDSt ?  
{ if( t  contains items from P  as well from Q ) 
++tpq ; } 
Dtpqs /= ; 
0=tp  ; 
for each transaction TDSt ?  
{ if( t  contains items from P ) 
      ++tp ; } 
Dtpsp /= ; 
spsc /= ; 
344 2010 IEEE 2nd International Advance Computing Conference
if( supmin_>=s  and confc min_>=  ) 
  =sf ”STRONG”; // AR )( QP   is strong 
else 
  =sf ”NOT  STRONG”; //AR )( QP   is not strong 
IV. IMPLEMENTATION AND PERFORMANCE STUDY 
A Binary Transactional Dataset, TDS , is generated using 
a Synthetic Transactional Dataset Generator[8]. Apriori 
algorithm is implemented in java language. Figures 2-7 show 
the output of the implementation generating frequent k-
itemsets with execution time in milli seconds for the different 
size of the TDS. SAR algorithm is implemented in java 
language. Figure 8 shows the output and performance study of 
the SAR algorithm for an AR )( QP  . 
 
Figure 2. Frequent 12-itemsets for TDS: I30T10 
 
Figure 3. Frequent 8-itemsets for TDS: I20T10 
 
Figure 4. Frequent 8-itemsets for TDS: I20T20 
 
Figure 5. Frequent 12-itemsets for TDS: I20T50 
 
Figure 6. Frequent 6-itemsets for TDS: I10T20 
 
Figure 7. Frequent 7-itemsets for TDS: I10T50 
Figure 8. Implementation and Performance study of SAR algorithm
2010 IEEE 2nd International Advance Computing Conference 345
V. CONCLUSION 
In this paper an algorithm, SAR (Strong Association Rule), 
is designed and implemented to check whether an Association 
Rule(AR) is strong enough or not. Apriori algorithm is also 
implemented to generate frequent k-itemsets. A Binary 
Transactional Dataset is used for implementing the algorithm 
in java language. In further steps of research a framework will 
be designed where strong AR will be mined from the 
distributed transactional datasets over the network using 
Mobile Agents.   
REFERENCES 
[1] U. M. Fayyad, G. Piatetsky-Shapiro, P. Smyth, and R. Uthurusamy. 
Advances in Knowledge Discovery and Data Mining. AAAI/MIT Press, 
1996 
[2] J. Han and M. Kamber. Data Mining: Concepts and Techniques. Morgan 
Kaufmann, 2nd ed., 2006 
[3] R. Agrawal, T. Imielinski, and A. Swami. Mining association rules 
between sets of items in large databases. In Proc. 1993 ACM-SIGMOD 
Int. Conf. Management of Data, pp. 207-216, WA, May 1993. 
[4] Matthew Eric Otey, S. Parthasarathy, Chao W., Adriano V., and Wagner 
Meira Jr., Parallel and Distributed Methods for Incremental Frequent 
Itemset Mining, IEEE transactions on Systems, Man, and Sybernetics- 
Part B: Cybernetics, 34(6), December 2004. 
[5] J. Han, J. Pei, Y. Yin, Mining Frequent Patterns without candidate 
generation, Proc. ACM-SIGMOD, Dallas,TX, May, 2000.
[6] R. Agrawal and R. Srikant, Fast algorithms for mining association rules. 
In Proc. 1994 Int. Conf. Very Large DataBases, pp. 487-499, Santiago, 
Chile, September 1994.   
[7] You-Lin Raun, Gan Liu, Qing-Hau Li, Parallel Algorithm for Mining 
Frequent Itemsets, in Proc. of the Fourth International Conference on 
Machine Learning and Cybernetics, Guangzhou, 18-21, August 2005.  
[8] Bhamra G.S., Patel R.B. and Verma A.K., “Transactional Data Set 
Generator for Frequent Itemsets Mining”, in Proceedings of 3rd 
International Conference on Advanced Computing and Communication 
Technologies (ICACCT-2008), ASIA PACIFIC INSTITUTE OF 
INFORMATION TECHNOLOGY, Panipat, Haryana, India, pp. 169-
173, November 8-9, 2008.
 
 
346 2010 IEEE 2nd International Advance Computing Conference
