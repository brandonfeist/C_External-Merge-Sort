An Algorithm for Mining Multidimensional 
Association Rules using Boolean Matrix 
 
 
 Neelu Khare1        Neeru Adlakha2         K. R. Pardasani3  
Department of  Computer Applications            Department of Applied Matthematics        Departmet of Mathematics 
Maulana Azad National Institute  of  Technology      SVNIT, Surat,Gujrat                                   Maulana Azad National Institute of  Technology 
Bhopal (M.P.) India        Bhopal (M.P.) India 
neelukh_29@yahoo.com         neeru.adlakha21@gmail.com           kamalrajp@hotmail.com  
 
 
Abstract— In this paper an algorithm is proposed for mining 
multidimensional association rules. A Boolean Matrix based 
approach has been employed to discover frequent itemsets, the 
items forming a rule come from different dimensions. It is an 
algorithm for mining multidimensional association rules from 
relational databases. The algorithm adopts Boolean relational 
calculus to discover frequent predicate sets. When using this 
algorithm first time, it scans the database once and will generate 
the association rules. Apriori property is used in algorithm to 
prune the item sets. It is not necessary to scan the database again, 
it uses Boolean logical operations to generate the association 
rules.   
Keywords— Boolean matrix, multidimensional association rules, 
frequent itemsets, relational calculus. 
I.  INTRODUCTION  
Data mining is the analysis of typically very large sets of data 
in order to discover yet unknown relationships among the data 
and aggregates them in ways which are novel, useful and 
understandable to the users of the data. Association rule 
mining finds interesting association or correlation relationship 
among a large data set of items.  
 An association rule is generally in the format: A ?  B, where 
A and B. These are two distinct sets of items, i.e, ?=?BA . A 
set of items is called an itemset. A set of k items is called a    
k-itemset. The main aim of association rule is to find 
associations among items from a set of transactions, each of 
which contains a set of items. Generally the algorithm finds a 
subset of association rules that satisfy certain measures. The 
most commonly used measures of association rules are : 
Support and Confidence.  
Support: The support of rule A ?  B is defined as percentage 
of transactions including both A and B (A ? B) in transaction 
sets. It can be denoted as: 
N
BAPSupport )()B  A ( ?=?  
 Confidence: Confidence of rule A ?  B is defined as 
percentage of transactions including both A and B (A ? B) in 
transactions that contain A. It can be denoted as: 
)(
)()(
AP
BAPBAConfidence ?=?  
An itemset with a support greater than a given minimum 
support is called frequent itemset. Support determines how 
often a rule is applicable to a given dataset, while confidence 
determines how frequently items in B appear in transactions 
that contain A [6]. 
Most association rule algorithms generate association rules in 
two steps:  
(1) Generate all frequent itemsets, and (2) Construct all rules 
using these itemsets.  
The basis of such algorithm is the fact that any subset of a 
frequent itemset must also be frequent, and both A and B in 
rule must also be frequent. Thus, every frequent itemset of size 
n can result in n association rules with a single item. The first 
step is expensive in terms of computation, memory usage and 
I/O resources. Much of the efforts in association rule 
discovery have been given to improve the efficiency of this 
first step. The second step is relatively straightforward, but it 
can also be very expensive when solving real-world problems.  
The discovery of interesting association rules is useful in 
decision making process. Association rules are usually used to 
study the relevancy among the different items or attributes. 
Association rule, which describes correlations of data items in 
large numbers of data, is a manner of expressing knowledge. 
The first algorithm namely Apriori algorithm [1] was proposed 
by R. Agrawal and others  [2][3].  
Association rules can be classified as single-dimensional 
association rules and multidimensional association rules on the 
basis of dimensions appearing in rules[11]. In 
multidimensional databases, we refer to each distinct predicate 
in a rule as a dimension. Hence, we can refer to buys (X, 
“Digital camera”) ? buys (X, “HP Printer”) is a single 
dimensional or intra-dimensional association rule because it 
contains a single distinct predicate (e.g., buys) with multiple 
occurrences (i.e., the predicate occurs more than once within 
the rule). Association rules that involve two or more 
dimensions or predicates can be referred to as 
multidimensional association rules. age(X , "20" ) 
? occupation (X , "student" ) ? buys (X , "laptop" ), 
contains three predicates (age, occupation, and buys), each of 
which occurs only once in the rule. Hence, we say that it has 
no repeated predicates. Multidimensional association rules 
with no repeated predicates are called inter-dimensional 
association rules. We can also mine multidimensional 
2010 International Conference on Recent Trends in Information, Telecommunication and Computing
978-0-7695-3975-1/10 $25.00 © 2010 IEEE
DOI 10.1109/ITC.2010.8
95
association rules with repeated predicates, which contain 
multiple occurrences of some predicates. These rules are 
called hybrid-dimensional association rules. This  paper 
discusses mining multidimensional inter-dimension 
association  rules directly in relational database [15]. 
To mine association rules in relational database, some authors 
present a method which transforms relational database into 
transaction database and uses Apriori algorithm to mine rules. 
But the performance of the Apriori  algorithm is not very 
good. The frequently used methods[14,15] of mining 
multidimensional association rules with relational database are 
those which improve the classical algorithms such as , Apriori, 
and other apriori like using SQL tools [10][12][15]. These 
algorithms are fast and effective to a certain extent, so they are 
used in many applications. However, they are not appropriate 
for mining the same database again and again to acquire more 
interesting rules than last time, because they cost as much time 
as last time. To find a solution to this problem, this paper 
presents a new algorithm that uses Boolean matrix and logical 
operations on attributes and items. 
II. DEFINITIONS 
A. Association Rules 
Definition 1: Let I = {i1 , i2, i3,……. in} be a set of items. D is a 
database of transactions.  Each transaction T is a set of items 
and has an identifier called TID. Each T ? I. [9] 
Definition 2: Association rule is the implication of the form A ? B, where A and B are itemsets which satisfies A ? I , 
B ? I and A ?  B = ? . 
Definition 3: The strength of an association rule can be 
measured in terms of its Support and Confidence.  Rule             
A ?B ” is true in D with a support (denoted by “sup”) and a 
confidence (denoted by “conf”), where A and B are  set of 
items. Support “sup” is a percentage of transactions including 
both A and B (A ? B) in transaction sets D. Confidence 
“conf” is a percentage of transactions including both A and B 
(A ? B) in transactions that contain  A.[12] 
sup = P(A ? B)/|D| , conf = P(B?A)?P(A ? B)/P(A) 
B. Apriori Property 
If an itemset is frequent, then all of its subsets must also be 
frequent. Apriori is the first association rule mining algorithm 
for mining single dimension single level  boolean  association 
rules, which uses support based pruning to systematically 
control the exponential growth of candidate itemsets [6]. 
C. Item sets in Multidimensional data set 
Let RD is relational database with m records and n 
dimensions. Dimensions, which are also called predications or 
fields, constitute a dimension combination with a formula (d1, 
d2, …, dn), in which dj represents j-th dimension. The i-th 
record can be expressed as value combination with a formula 
(vi1, vi2, …, vin), where vij represents j-th value in i-th record, 
1 ?  i ? m and 1 ?  j ?  n.  
Definition 4: The form  (dj, vij) is called an “item” in relational 
database or other multidimensional data sets, which is denoted 
by Iij. That is: Iij = (dj, vij), where 1 ?  i ? m and 1 ?  j ?  n [13]. 
 
Definition 5: Suppose that A and B are items in the same 
relational database RD.  A equals B if and only if the 
dimension and the value of the item A are equal to the 
dimension and the value of the item B, which is denoted by 
A=B. If it is not true that A equals B, it is denoted by A ? B. 
 
 Definition 6: A set constituted by some “item” defined in 
definition 4 is called “itemset”. The “itemset” which are 
constituted by all items in relational database is called “Full 
itemset”, and it is denoted by S. That is: S?{Iij  : 1 ?  i ? m and 
1 ?  j ?  n }. 
 
Definition 7: Boolean Matrix: is a matrix with element ‘0’ or 
‘1’.  
 
Definition 8: The Boolean AND operation is defined as 
follows:   
0.0=0 0.1=0 1.0=0 1.1=1  
Where logical implication is denoted by . or AND. If we write 
C=A.B,  then C can be determined by listing all possible 
combinations of A and B. Truth  table for logical AND will 
be: 
        TABLE  I . AND OPERATION 
A B C=A.B 
0 0 0 
0 1 0 
1 0 0 
1 1 1 
 
Definition 9: The Boolean ‘AND calculus’ is carried out to an 
arbitrary k columns vector of the Boolean matrix; the sum of 
‘1’ of the operation result is called k- support of the k columns 
vector. 
Proposition 1: If the sum of ‘1’ in a column vector Ai is less 
than min_sup_num, it is not necessary that Ai  will attend 
calculus of the next level supports. 
 
Rationale: According to the principle of the Boolean AND 
calculus, the result is ‘1’ when the value of all vector elements 
(in a record) is ‘1’ [7].  
 
Proposition 2: Itemset A is a k-itemsets (each item belongs to 
different dimension/attribute); |LK-1(j)| presents the number of 
values in a dimension/attribute ‘j’ in all frequent  (k-1)-
itemsets of the frequent set LK-1. There is an item j in X. If  
|LK-1(j)| is smaller than k-1, itemset X is not a frequent itemset 
[7]. 
 
96
Proposition 3: |LK| presents the number of k-predicate set  in 
the frequent set LK. If |LK| is smaller than k+1, the maximum 
length of frequent predicate sets is k. 
 
Rationale: Frequent (k+1)-itemsets X have k+1 frequent        
k-subsets. If the number of frequent k-itemsets in the frequent 
set LK is smaller than k+1, there are no frequent (k+1)-itemsets 
in the mined transaction database.  
III. ALGORITHM 
Let RD be a relational database, m be the number of records 
and n are number of dimensions, and min_sup is the minimum 
support of RD. The minimum support number min_sup_num 
can be defined as: min_sup_num= min_sup ×m [7]. 
The algorithm consists of following steps: 
1. Transforming the relational database in Boolean 
matrix. 
2. Generating the set of frequent 1-itemset L1. 
3. Pruning the Boolean matrix. 
4. Perform AND operation on frequent 1-items of 
different dimensions to generate 2-itemsets. 
5. Repeat the process to generate (k+1)-itemsets from Lk.  
A. Transforming the relational database into Boolean Matrix 
The relational database RD has m records and n 
dimensions/attributes. Whereas each dimension has different 
value combinations or categories. To extract such patterns 
from relational database, the categorical and symmetric binary 
attributes are transformed into “items” [7]. This type of 
transformation can be performed by creating a new item for 
each distinct attribute-value pair. Then association rule mining 
algorithm can be applied.  If there are k value combinations in 
a dimension then k(k-1)/2 binary items will be created. We set 
up a Boolean matrix Am*n which has m (are records) rows and 
n (are different dimension categories) columns. For each 
record, only one category of each dimension contains the 
value 1 rest will contain 0. 
B. Generating the frequent 1-itemset L1 
The Boolean matrix Am*n  is scanned and support numbers of 
all dimension categories are computed.  The Support number  
‘sup_num‘ of Ij  is the number of ‘1s’ in the jth column of the 
Boolean matrix Am*n . If sup_num of Ij, is less than 
min_sup_num, then itemset { Ij } is not a frequent  1-itemset 
and the jth column will be deleted from Am*n . Otherwise 
itemset { Ij } is the frequent 1-itemset and is added to frequent 
one itemset list L1. 
C. Prunung the Boolean Matrix 
  Pruning the Boolean matrix means deleting some columns 
from it. Columns of the Boolean matrix are pruned according 
to the Proposition 2. This is described in detail as: Let D is the 
set of all dimensions/attributes in the frequent set   LK-1, where 
k>2. Compute all |LK-1(j)| where  j?I•, and delete the column 
of corresponding item j if |LK-1(j)| is smaller than  min_sup.  
D.  Generating the set of frequent k-itemsets Lk 
  Frequent candidate k-itemsets are discovered only by AND 
relational calculus, which is carried out for the k-vectors 
combination. If the Boolean matrix Ap*q  has q columns where 
2<q•n and min_sup_num is h•p•m, (Cq )k , combinations of k-
vectors will be produced. The AND relational calculus 
computed is for each combination of k-vectors. If the sum of 
element values in the ‘AND’ calculation result is not less than 
the minimum support number min_supt_num, the k-itemsets 
corresponding to this combination of k-vectors are the 
frequent k-itemsets and are added to the set of frequent k-
itemsets list Lk.    
IV. ILLUSTRATIVE EXAMPLE 
 An example is given in TABLE II. and the data used in the 
example is from a relational table shown in  TABLE II. The  
minimum support for TABLE II is 0.5; m=8 is the number of 
transactions. Therefore min_sup_num=8×0.5=4. 
 
    TABLE  II . A RELATIONAL TABLE (RT)  
RID M N O P Q 
R1 M1 N1 O1 P1 Q1 
R2 M2 N2 O1 P2 Q1 
R3 M2 N2 O2 P2 Q1 
R4 M1 N1 O2 P1 Q1 
R5 M2 N3 O2 P1 Q2 
R6 M1 N1 O1 P1 Q1 
R7 M2 N3 O2 P1 Q2 
R8 M2 N2 O1 P2 Q1 
 
1. The relational table RT is transformed into Boolean  
       Matrix Am*n  as given below . 
        
M          N          O           P             Q
                    P P P P P  
M1 M2  N1  N2  N3 O1 O2 P1 P2 Q1 Q2 
??
??
??
??
??
?
?
?
??
??
??
??
??
?
?
?
01100101010
10011010010
01010100101
10011010010
01011000101
01101001010
01100101010
01010100101
 
 
Figure 1. A8*11 
 
2. Compute  the sum of the elements value of each column 
in the Boolean matrix A8*11 and set of frequent 1-itemset 
is : 
L1 = {{M2},{O1},{O2},{P1},{Q1}} 
The M1, N1, N2, N3, P2, Q2 columns of the boolean 
matrix A8*11 are deleted because their support numbers are 
smaller than the minimum support number.  
R1 
R2 
R3 
R4 
R5 
R6 
R7 
R8 
97
3. Now perform the ‘AND’ operation to generate 2-
itemsets on these frequent 1-items of different 
dimensions.  
4. The candidate 2-itemsets from different dimensions are 
{{(M,M2)(O,O1)}, {(M,M2)(O,O2)}, {(M,M2)(P,P1)}, 
{(M,M2)(Q,Q1)}, {(O,O1)(P,P1)},  (O,O1)(P,Q1)}, 
{(O,O2)(P,P1)}, {(O,O2)(Q,Q1)}, {(P,P1)(Q,Q1)}}. 
5. After performing ‘AND’ operation for the above inter-
dimensional item combinations, we get the support 
numbers of all the2-itemsets mentioned above.  
6. The Boolean matrix A8*9 is generated. 
 
 
M2.O1  M2.O2  M2.P1  M2.Q1 O1.P1  O1.Q1 O2.P1 O2.Q1  P1.Q1 
??
??
??
??
??
??
??
??
??
??
??
?
?
?
??
??
??
??
??
??
??
??
??
??
??
?
?
?
000111001
001000110
100110000
001000110
111000000
010001010
000101001
100110000
 
 
Figure 2. A8*9 
 
7. Compute the sum of all column elements of Boolean 
matrix A8*9.   
8. Then compare them with min_sup_num, only  the 6th 
column of A8*9 (O1Q1) is greater. 
9. Thus the only frequent 2-itemset is (O1Q1). The 
algorithm will terminate here because there is no other 
frequent 2-itemset in the  list L2,  for generating higher 
itemsets. 
V. THEORITICAL ANALYSIS 
Suppose that  relational database RD has m number of records 
and number of dimension is n(n<<m), the number of different 
values of j-dimension is |Vj | and the maximum number of 
items in one of all frequent item sets is K. Frequent  j-itemsets  
has |Dj| different dimension combinations. There are |Lj| 
frequent j item sets and |Cj| candidate j-itemsets. The 
execution/processing time of the algorithm is divided into 
following parts: 
First part is the time of generating candiadate 1-itemset :for 
each data e(totally n.m data) . Time consuming is O(n·m·|Vs|), 
where |Vs| equals to max(|V1|,|V2|, … ,|VN|). 
The second part is the time of performing AND operations 
on two frequent (k-1)-itemset into a k-itemset: 
                  O(k + (k-2)·|Lk-1| + 2m).  
Because the first item is much smaller compared with latter 
two items in the formula, the former formulas can have 
processing time  O((k-2)·|Lk-1| + 2m). Especially, processing 
time  in this part will be O(M) if k=2. 
The third part is the time of generating frequent k-itemset with 
candidate k-itemset: O(|Ck|). So, the total processing time 
when using the algorithm for the first time should be: 
O((n.m.|Vs|) + ||2.||).2((
2
2 k
k
k
k CmLk ++??
=
?
 
 Processing  time taken by algorithm after minimum 
support is adjusted should be: 
           O(|C1| )+ ||2.||).2((
2
2 k
k
k
k CmLk ++??
=
?
) 
VI.  EXPERIMENTS 
To test whether the proposed method is fast, expansible and 
effective our experiments are made on machine with Intell ( R) 
Core 2Duo, 1.5GHz and 1GB memory. The operating system 
is Windows XP .The database used has 500 records and 11 
fields, which have 2~10 different values/categories.  
 
 
Figure 3. Execution Time with different record numbers (3-dimensions) 
 
VII. CONCLUSION 
In this paper, a multidimensional association rule mining 
algorithm based on Boolean matrix is proposed. The main 
features of the algorithm are that it scans the database only 
once, it does not generate the candidate item sets, and it uses 
the Boolean vector “relational calculus” to generate frequent 
item sets. It stores all data in the form of bits, so it needs less 
memory space and can be applied to large relational databases.   
REFERENCES 
[1] Agrawal R, Lmielinski T, Swami A. “Mining Association Rules 
between Sets of Items in Large Database”, Proceeding of the ACM 
SIGMOD Conference on Management of Data, Washington, USA, 
pp. 207-216, 1993. 
[2] Agrawal R, Srikant R.” Fast Algorithms for Mining Association 
Rules”, Proceeding of the 20th International Conference on Very 
Large Databases, Santiago, Chile, pp. 487-499, 1994. 
[3] R. Agrawal, R. Srikant, “Mining sequential patterns, in: 
Proceedings of the 11th International Conference on Data 
Engineering, Taipei, Taiwan, 1995, pp. 3–14. 
[4] Agrawal R, Shim K. “Developing tightly-coupled data mining 
Applications on a Relational Database System”, Proceeding of the 
2nd Int. Conference on Knowledge Discovery in Databases and Data 
Mining, Portland, Oregon, pp. 287-290, 1996. 
R1 
R2 
R3 
R4 
R5 
R6 
R7 
R8 
98
 [5] Houtsma M, Swami A. “Set-oriented mining of association rules 
in relational databases.”  Proc of the 11th International Conference on 
Data Engineering. Taipei, Taiwan, pp 25-33, 1995. 
[6] Jiawei han, “Data Mining Concepts and techniques” University of 
illinois at urbana-champaign Micheline kamber, Elsevier Publication. 
[7] Hanbing Liu and Baisheng Wang, “An association rule mining 
algorithm based on a Boolean matrix”, Data Science Journal, Volume 
6, Supplement, 9 September 2007 
[8] Jun Gao, “Realization of a New Association Rule Mining 
Algorithm“, Shanghai Institute of TechnoChina,IEEE DOI  2007 
[9] Ravindra Patel, D. K. Swami and K. R. Pardasani, “ Lattice Based 
Algorithm for Incremental Mining of Association Rules”, 
International Journal of Theoretical and Applied Computer Sciences 
Volume 1 Number 1 (2006) pp. 119–128       
[10] Yang Bing-Ru, Sun Hai-Hong, Xiong Fan-Lun, “Mining 
Quantitative Association Rules with Standard SQL Queries and it’s 
Evaluation”, Journal of Computer Research and Development, 
Vol.39, No.1, pp.: 307-312, 2002. 
[11] Reda ALHAJJ, Mehmet KAYA, “Integrating Fuzziness into 
OLAP for Multidimensional Fuzzy Association Rules Mining”, 
Canada Third IEEE International Conferenceon Data Mining 
(ICDM’0 (ICDM’03)  
[12] Jurgen M. Janas, “An Enhanced Apriori Algorithm for Mining 
Multidimensional Association Rules”, 25th Int. Conference, 
Information Technology Interfaces ITI ,Cavtat, Croatia, pp 193-198 
June 2003 
[13] Wan-xin xu, ru-jing wang, “A fast algorithm of mining 
multidimensional association Rules frequently”, Proceedings of the 
Fifth International Conference on Machine Learning and Cybernetics, 
Dalian, 13-16 August 2006 
[14] Rolly Intan, “A Proposal Of  Fuzzy Multidimensional 
Association Rules”,  Jurnal INFORMATIKA VOL 7, pp 85-90,  
NOV 2006. 
[15] Anjana Pandey, K. R. Pardasani, “Rough Set Model for 
Discovering Multidimensional Ass0ciation Rules”, IJCSNS 
International journal of Computer Science and Network Security, 
Vol.9, No.6, pp 159-164, June 2009.  
99
