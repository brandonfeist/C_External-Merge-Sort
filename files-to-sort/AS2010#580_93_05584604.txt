On a Fuzzy Group-by Clause in SQLf
Patrick Bosc, Member, IEEE, and Olivier Pivert
Abstract— Group-by is a core database operation that is used
extensively in data analysis and decision support systems. In
many application scenarios, it appears useful to group values
according to their compliance with a certain concept instead
of founding the grouping on value equality. In this paper, we
propose a new SQLf construct that supports fuzzy-partition-
based group-by (FGB). We show that FGB can be used to
generate fuzzy summaries as well as to mine fuzzy association
rules in a practical and efficient way.
I. INTRODUCTION
The relationships between databases and fuzzy sets have
been studied for a long time. Among the very first works is
that launched by L.A. Zadeh while supervising V. Tahani’s
Ph.D thesis in the early 70s. The core of this study was
about the design of new querying capabilities for relational
databases. The basic idea was to use fuzzy sets in order
to devise new predicates intended for representing a graded
satisfaction instead of the “all-or-nothing” behavior conveyed
by Boolean conditions. If this type of issue was quite
innovative at that time, it turns out that it has gained more and
more acceptance for some years in the database community.
Many fuzzy querying approaches have been proposed in the
last decades, among which a fuzzy extension of the SQL
language, called SQLf [1]). This language has the same
general philosophy as SQL (as to querying features and
syntax in particular) and offers new possibilities regarding
flexible querying. The underlying principle was to introduce
graduality wherever it appeared meaningful (by using fuzzy
predicates in the where clause of a base block, of course, but
also by introducing fuzzy nesting operators, fuzzy quantifiers
and so on). However, the group-by clause in SQLf remained
unchanged with respect to SQL. As noted in [2], grouping
capabilities have been extensively studied and implemented
in data management systems. The standard group-by operator
has relatively good execution time and scalability properties.
However, while its semantics is simple, it is also limited
because it is based only on equality, i.e., all the tuples
in a group have exactly the same values of the grouping
attributes. In this paper, we aim to extend this core database
operation by defining a “fuzzy grouping” mechanism. The
contributions of this paper are as follows:
• we introduce the fuzzy group-by (FGB) operator which
extends standard group-by to allow the formation of
groups based on predefined fuzzy partitions of the
attribute domains rather than equality of data,
• we show how this mechanism makes it possible to
perform some kind of data summarization “on demand”,
Patrick Bosc and Olivier Pivert are with IRISA–ENSSAT, Lannion,
France (email: {bosc, pivert}@irisa.fr)
• we point out the interest of the FGB operator for the
purpose of fuzzy association rule mining.
The remainder of the paper is organized as follows.
Section II presents the general framework of the SQLf
language. Section III introduces the definition of the FGB
operator and shows how fuzzy summaries can be obtained by
means of appropriate aggregates applied to the fuzzy groups
that are produced by this operator. Section IV discusses
different forms that the complementary having clause can
take. Section V deals with the way FGB can be used for
mining fuzzy association rules. Section VI briefly tackles
implementation aspects. Related work is presented in Section
VII, and Section VIII presents the conclusions and directions
for future research.
II. REMINDER ABOUT SQLF
The language called SQLf described in [1] extends SQL so
as to support fuzzy queries. The general principle consists in
introducing gradual predicates wherever it makes sense. The
three clauses select, from and where of the base block of SQL
are kept in SQLf and the “from” clause remains unchanged.
The principal differences affect mainly two aspects :
• the calibration of the result since it is made with
discriminated elements, which can be achieved through
a number of desired answers (k), a minimal level of
satisfaction (t), or both, and
• the nature of the authorized conditions as mentioned
previously.
Therefore, the base block is expressed as:
select [distinct] [k | t | k, t] attributes
from relations
where fuzzy-cond
where “fuzzy-cond” may involve both Boolean and fuzzy
conditions. This expression is interpreted as:
• the fuzzy selection of the Cartesian product of the
relations appearing in the “from” clause,
• a projection over the attributes of the “select” clause
(duplicates are kept by default, and if “distinct” is speci-
fied the maximal degree is attached to the representative
in the result),
• the calibration of the result (top k elements and/or those
whose score is over the threshold t).
The operations from the relational algebra — on which SQLf
rests — are straightforwardly extended to fuzzy relations by
considering fuzzy relations as fuzzy sets on the one hand
and by introducing gradual predicates in the appropriate
operations (selections and joins especially) on the other hand.
The definitions of these extended relational operators can be
978-1-4244-8126-2/10/$26.00 ©2010 IEEE
found in [3]. As an illustration, we give the definitions of
the fuzzy selection and join operators hereafter, where r and
s denote two fuzzy relations defined respectively on the sets
of domains X and Y .
• µselect(r, ?)(t) = >(µr(t), µ?(t)) where ? is a fuzzy
condition and > is a triangular norm (most usually, min
is used),
• µjoin(r, s, A, B, ?)(tu) = >(µr(t), µs(u), µ?(t.A, u.B))
where A (resp. B) is a subset of X (resp. Y ), A and
B are defined over the same domains, ? is a binary
relational operator (possibly fuzzy), t.A (resp. u.B)
stands for the value of t over A (resp. u over B).
III. AN EXTENDED GROUP-BY CLAUSE
In SQLf as in SQL, a group by clause builds a partition
based on the (atomic) values of the attributes specified in this
clause. Then, “group by A” leads to a partition where every
group is associated with an A-value present in the relation.
The idea we advocate here is to extend this mechanism so as
to build a partition based on intervals or fuzzy sets of values.
A. Use of a Crisp Partition
The generic form of such a query is:
select label(A) [, aggregate, ...] from r [where ?]
group by label(A)
using p(A) = {L1, . . . , Ln}
where p(A) is a partition defined on the domain of A,
label(A) denotes any label Li from p(A), and ? is a (fuzzy
or crisp) condition.
Example 1. Let Emp be a relation of schema (id, name, age,
salary). Let us assume that one wants to retrieve the average
salary for each age class (twenties, thirties, etc). In SQL,
one has to express as many queries as there are age classes.
However, one can imagine an expression of the type:
select label(age), avg(salary) from Emp
group by label(age)
using p(age) = {[20, 29], [30, 39], [40, 49], [50, 59], [60, 69]}.
With the data from Table I, the result is:
{?[20, 29], 26.5?, ?[30, 39], 32?, ?[40, 49], 45?,
?[50, 59], 61?, ?[60, 69], 37? }.
In the case where ? is a fuzzy condition, the only type of
aggregate which can appear in the select clause is count,
because of the difficulty of defining the other aggregates on
fuzzy sets. For a given Li from p(A), count(Li) is computed
the following way:
count(Li) =
?
t?r ? t.A ? Li
µ?(t).
One also introduces a variant of count, denoted count-
rel, which computes the relative cardinality (i.e., the average
satisfaction degree) associated with a group. It is defined as:
count-rel(Li) =
?
t?r ? t.A ? Li µ?(t)
|{t ? r | t.A ? Li}| .
TABLE I
EXTENSION OF RELATION EMP
#e e-name position age w-dep sal(k$)
17 Smith engineer 51 3 65
76 Martin engineer 40 5 45
26 Jones secretary 24 3 19
12 Green technician 39 3 32
19 Duncan clerk 28 1 24
8 Brown manager 54 1 57
31 Harris technician 29 5 18
9 Davis janitor 61 1 15
44 Howard manager 22 3 45
23 Lewis engineer 62 1 59
Fig. 1. A fuzzy partition on the domain of attribute age
Example 2. Let us consider the query:
select label(age), count, count-rel from Emp
where salary is medium group by label(age)
using p(age) = {[20, 29], [30, 39], [40, 49], [50, 59], [60, 69]}.
With the fuzzy term medium defined as in Fig. 2 and the
data from Table I, one gets the result:
{?[20, 29], 1, 0.25?, ?[30, 39], 0.7, 0.7?, ?[40, 49], 1, 1?,
?[50, 59], 0.8, 0.4?, ?[60, 69], 0.6, 0.3?}.
B. Use of a Fuzzy Partition
The extension to the fuzzy partition case — which allows
to take into account vague classes and to have a better
robustness by making query results less sensitive to the
boundaries of the classes — is rather straightforward. One
just has to have available fuzzy partitions defined on the
attribute domains. On the other hand, it is not possible
anymore to use any type of aggregate in the select clause:
one is limited to using count even when the condition in the
where clause is Boolean (since the groups themselves are
fuzzy).
The fuzzy partitions used may be, e.g, Ruspini partitions
[4], i.e., such that ?x ? X, ?Li?P µLi(x) = 1 where P
denotes a partition defined on domain X (cf. Fig. 1 and 2).
With such a fuzzy partition, a given tuple can belong to at
most two classes. Ruspini partitions are probably the easiest
to handle for an end-user, however the approach described
hereafter is valid for any kind of fuzzy partition.
Example 3. Let us assume that one has available a fuzzy
partition — still denoted by p(age) — defined on the domain
of attribute age. Let us consider the query “find for each
fuzzy age class the number of employees which earn more
than 3000 euros.” It can be expressed as:
Fig. 2. A fuzzy partition on the domain of attribute salary
TABLE II
TUPLES FROM EMP AND THEIR DEGREES
#e age µyg µma µold sal µlow µmed µhigh
17 51 0 0.9 0.1 65 0 0 1
76 40 0 1 0 45 0 1 0
26 24 0.6 0.4 0 19 1 0 0
12 39 0 1 0 32 0.3 0.7 0
19 28 0.2 0.8 0 24 1 0 0
8 54 0 0.6 0.4 57 0 0.8 0.2
31 29 0.1 0.9 0 18 1 0 0
9 61 0 0 1 15 1 0 0
44 22 0.8 0.2 0 45 0 1 0
23 62 0 0 1 59 0 0.6 0.4
select label(age), count from Emp
where salary > 30k group by label(age)
using p(age) = {young, middle-aged, old}.
With the data from Table II, the result is:
{?young, 0.8?, ?middle-aged, 3.7?, ?old, 1.5?}
where each number returned corresponds to a ?-count.
We now extend count and count-rel the following way:
count(Li) =
?
t?r
>(µ?(t), µLi(t.A)) (1)
count-rel(Li) =
?
t ? r >(µ?(t), µLi(t.A))?
t ? r µLi(t.A)
. (2)
Using these two aggregates, the fuzzy group by clause makes
it possible to compute fuzzy summaries “on demand”, in
contrast with the approach proposed in [5] which first builds
a summary of the whole database, then uses it to answer
queries. An example of a query aimed at providing a fuzzy
summary is given hereafter.
Example 4a. Let us consider the query: “what is the distri-
bution over the different age classes of the employees whose
salary is medium?”. It can be expressed as:
select label(age), count from Emp
where salary is medium group by label(age)
using p(age) = {young, middle-aged, old}.
With the data from Table II, and using > = min, one gets:
{?young, 0.8?, ?middle-aged, 2.5 ?, ?old, 1.0?}.
Example 4b. Let us now consider the query: “which propor-
tion of employees from each age class has a salary which is
medium?”. It can be expressed as:
select label(age), count-rel from Emp
where salary is medium group by label(age)
using p(age) = {young, middle-aged, old}.
With the data from Table II, and using > = min, one gets:
{?young, 0.47?, ?middle-aged, 0.43 ?, ?old, 0.4?}.
IV. HAVING CLAUSE
The different forms of a having clause that can come as
a complement to a group-by clause are described hereafter
through a few examples.
A. Inclusion constraint
An example which involves a Boolean condition in the
having clause is: “find every age class such that at least 30%
of the employees from that class have a high salary”:
select label(age) from Emp E1
group by label(age)
having count ?
(select (count * 0.3) from Emp where salary is high
and age is E1.label(age))
using p(age) = {young, middle-aged, old}.
Another example, which involves a fuzzy having clause is:
“find the extent to which all the employees of a given age
class have a high salary:
select label(age) from Emp E1
group by label(age)
having (select #e from Emp where salary is high)
contains set(#e)
using p(age) = {young, middle-aged, old}.
The evaluation of such a query rests on a graded inclusion.
It constitutes the prototype expression for fuzzy association
rule mining and will be detailed in Section V.
B. aggregate1 ? aggregate2
Even though a limitation exists as to the aggregates which
can be computed on a fuzzy set — as already mentioned —,
it is still possible to evaluate conditions which compare two
aggregates [6]. For instance: “find the age classes such that
the maximum of the technician’s salaries is greater than the
minimum of the engineer’s salaries”:
select label(age) from Emp E1 where job = ’technician’
group by label(age)
having max(salary) >
(select min(salary) from Emp
where age is E1.label(age) and job = ’engineer’)
using p(age) = {young, middle-aged, old}.
In such a query, the where clause could also involve a fuzzy
condition.
C. aggregate is ?
One may also compute the extent to which an aggregate
satisfies a fuzzy condition ?, by means of the approach
proposed in [7]. For instance: “find the age classes where
the average salary of engineers is high”:
select label(age) from Emp where job = ’engineer’
group by label(age)
having avg(salary) is high
using p(age) = {young, middle-aged, old}.
Here again, the where clause can also involve a fuzzy
condition.
V. USE FOR ASSOCIATION RULE MINING
A. Introduction
We now explain how the fuzzy group by clause can be
used for evaluating in a simple way fuzzy association rules
of the type (age is Li ? salary is L?j) where Li and L?j
are two fuzzy labels defined respectively on the domain of
age and that of salary. As mentioned in [8], at least two
fuzzy extensions of association rules may be considered:
those based on (fuzzy or scalar) cardinalities, and those based
on fuzzy implications (cf. also [9] for the latter category).
Hereafter, we do not deal with fuzzy-cardinality-based rules
since they may be somewhat difficult to interpret for an
end-user (and also because they cannot be represented and
handled easily in a purely relational DBMS).
The approach based on a scalar cardinality (?-count) rests
on a straightforward extension of the usual definition of
confidence. Let us consider a fuzzy association rule of the
type (A is Li ? B is L?j). In this approach, the validity
(confidence) of the rule is defined as:?
t?r >(µLi(t.A), µL?j (t.B))?
t?r µLi(t.A)
In the fuzzy-implication-based approach, the rule (A is Li
? B is L?j) expresses a constraint on the B-value for each
tuple in the relation. The association rule, also denoted by
(A, Li)? (B, L?j), then means: “for every tuple t, the more
t.A is Li, the more t.B is L?j”, i.e.:
(A, Li)? (B, L?j)? ?t ? r, µLi(t.A)?f µL?j (t.B)
where ?f denotes a fuzzy R-implication. In this case, the
confidence of the rule is equal to:
mint?r µLi(t.A)?f µL?j(t.B).
B. Rules of the type A is Li ? B is L?
1) Computation of the Support: First, one introduces a
variant of count named count-g whose general definition is:
count-g(Li) =
?
t ? r >(µ?(t), µLi(t.A))
|r| . (3)
Let us consider the generic SQLf query:
select label(A), count-g from r where B is L?
group by label(A)
using p(A) = {L1, . . . , Ln}
It allows for computing the support of every fuzzy associa-
tion rule of the type “A is Li ? B is L?” for a given L?.
2) Computation of the Confidence: Let us consider the
generic SQLf query:
select label(A) from r
group by label(A)
having (select K from r where B is L?) contains set(K)
using p(A) = {L1, . . . , Ln}
where K denotes the primary key of the relation.
a) Scalar Cardinality: Using the approach based on
scalar cardinality, the confidence of the rule corresponds to
the cardinality-based degree of inclusion of the fuzzy set:
E(Li) = (select #e from r where A is Li)
in the fuzzy set:
F = (select #e from r where B is L?)
i.e., to the degree µ produced by the evaluation of the having
clause:
µ =
?
t ? r >(µL?(t.B), µLi(t.A))?
t ? r µLi(t.A)
.
b) R-implication: Using the approach based on a fuzzy
R-implication, the confidence of the rule corresponds to the
implication-based degree of inclusion of E(Li) in F — see,
e.g., [10] —, i.e. to the degree µ produced by the evaluation
of the having clause when contains is replaced by contains-f :
µ = mint?r µLi(t.A)?f µL?(t.B).
For instance, with ?ukasiewicz’ implication (contains-Lu),
we have:
µ = mint?r min(1, 1? µLi(t.A) + µL?(t.B)).
Example 5. Let us consider the set of rules of the form:
age is Li ? salary is medium
where Li belongs to p(age). They can be evaluated by means
of the following two queries:
select label(age), count-g from Emp where salary is medium
group by label(age)
using p(age) = {young, middle-aged, old};
which, using the data from Table I, the partitions from Fig.
1 and 2, and > = min returns:
{0.08/?young?, 0.25/?middle-aged?, 0.1/?old?}.
and
select label(age) from Emp group by label(age)
having (select #e from Emp where salary is medium)
contains set(#e)
using p(age) = {young, middle-aged, old}
which returns:
{0.47/?young?, 0.43/?middle-aged?, 0.4/?old?}.
If contains were replaced by contains-Lu in the second query,
we would get:
{0.4/?young?, 0.1/?middle-aged?}. 
C. Rules of the type A is L ? B is L?i
Now let us consider mining fuzzy association rules of the
type “A is L ? B is L?i” for a given L. Again, two SQLf
queries are necessary:
select label(B), count-g from r where A is L
group by label(B)
using p(B) = {L?1, . . . , L?n}
for computing the support of the rules considered, and:
select label(B) from r group by label(B)
having set(K) contains (select K from r where A is L)
using p(B) = {L?1, . . . , L?n}
for computing their confidence values.
Example 6. Let us consider the set of rules of the form:
age is young ? salary is L?i
where L?i belongs to p(salary). They can be evaluated by
means of the following two queries:
select label(salary), count-g from Emp where age is young
group by label(salary)
using p(salary) = {low, medium, high}
and
select label(salary) from Emp group by label(salary)
having set(#e) contains
(select #e from Emp where age is young)
using p(salary) = {low, medium, high}.
With the data from Table I and the partitions from Fig. 1 and
2, the first query returns:
{0.09/?low?, 0.08/?medium?, 0/?high?}.
As to the second one — which corresponds to the scalar
cardinality approach since it involves the operator contains
—, it returns the result:
{0.53/?low?, 0.47/?medium?, 0/?high?}.
If contains were replaced by contains-Lu in the second query,
we would get: {0.2/?low?, 0.4/?medium?, 0.2/?high?}. 
VI. ABOUT THE EVALUATION OF A FUZZY GROUP-BY
The complexity of the evaluation of an FGB clause is very
similar to that of a regular group-by clause. Two cases may
be distinguished:
• if the attribute appearing in the FGB clause — let us
denote it by A — is indexed, it is possible to directly
access the tuples which belong to a given fuzzy class Li:
they are the tuples t such that t.A ? support(Li). Let us
recall that the support of a fuzzy label is expressed as an
interval and can be straightforwardly determined from
the membership function associated with that label. The
degree to which tuple t belongs to class Li is equal to
µLi(t.A).
• otherwise, as usual, one may sort the relation on at-
tribute A and compare the A-value of each tuple with
the (overlapping) segments which correspond to the
supports of the different fuzzy labels in the partition
of domain(A) in order to build the fuzzy groups. Here
too, of course, µLi(t.A) must be computed for each
tuple t.
As can be seen, the cost of the evaluation of an FGB clause
should be more or less equivalent to that of a regular group-
by clause since the only additional cost is that related to the
computation of the membership degrees.
VII. RELATED WORK
A. Extended Group-by
The work in [11] proposes some SQL constructs to make
clustering facilities available from SQL in the context of
spatial data. Basically, these constructs act as wrappers of
conventional clustering algorithms but no further integration
with database systems is studied. Li et al. [12] extend the
group-by operator to approximately cluster all the tuples in
a predefined number of clusters. Their framework makes
use of conventional clustering algorithms, e.g. K-means, and
employ summaries and bitmap indexes to integrate clustering
and ranking into database systems. Silva et al. [2] introduce
a similarity group-by operator in order to group objects with
similar values. Our study differs from [12] and [2] in that (1)
we focus on fuzzy grouping based on vague concepts, not on
similarity-based grouping; (2) we do not aim at “discovering”
the clusters, since in our approach the groups are explicitly
specified in the query (by means of a fuzzy partition), which
by the way gives them a well-identified meaning; and (3)
the authors of [12] and [2] do not consider a general fuzzy
querying framework such as SQLf (where the fuzzy group-
by construct is just a piece of the puzzle) but only extend a
particular feature of SQL.
B. Fuzzy Database Summarization Techniques
Developed by Rasmussen and Yager, SummarySQL [13] is
a fuzzy query language which can evaluate the truth degree
of a summary guessed by the user. A summary expresses
knowledge about the database in a statement under the form
“Q objects in DB are S” or “Q R objects in DB are
S” where DB stands for the database, Q is a linguistic
quantifier and R and S are linguistic terms. The expression
is evaluated for each tuple and the associated truth values
are later used to obtain a truth value for the summary. The
statements considered by the authors are in a sense more
general than the fuzzy association rules that we deal with,
since they involve fuzzy quantifiers. However, our approach
can easily be extended to capture such statements by relaxing
the operator contains that appear in the having clause, using
e.g. one of the approaches described in [10]. When it comes
to mining fuzzy statements, the main difference lies in the
fact that [13] does not propose any SQL construct to evaluate
these statements “in a batch” as we do thanks to the FGB
clause: the statements have to be checked one by one and no
fuzzy partitioning of the domains is used.
In [5], Saint-Paul et al. propose an approach to the
production of linguistic summaries structured in a hierarchy,
i.e., a summarization tree where the tuples from the database
are rewritten using the linguistic variables involved in fuzzy
partitions of the attribute domains. The main difference
with our approach is that [5] views summarization as an
independent process, which is not performed by means of
SQL queries but by a specific algorithm. As mentioned
before, the FGB operator enables to obtain summaries “on
demand” without having to summarize the whole database.
C. Mining Association Rules with SQL
The use of SQL queries for mining association rules
has been advocated by several authors, see e.g. [14], [15],
[16], [17], [18], [19], [20]. However, none of these ap-
proaches considers an extended group-by mechanism, and
none considers fuzzy association rules either. To the best
of our knowledge, the only approach which uses a fuzzy
extension of SQL for mining fuzzy association rules (or
gradual functional dependencies, as the authors call them)
is [21], which relies on SummarySQL already discussed in
the subsection above.
VIII. CONCLUSION
In this paper, we have introduced a fuzzy group-by (FGB)
operator based on the use of fuzzy partitions of attribute
domains and described how it could be integrated into the
SQLf language. The main goal of FGB is to generate more
meaningful and useful groupings than the regular group-by
operator. We have shown how this construct makes it possible
to generate fuzzy summaries “on demand”, as well as to mine
fuzzy association rules in a practical way.
Among perspectives for future work, let us mention:
• implementation aspects and experimentations: it is of
course important to make sure that queries involving
a fuzzy grouping have execution times comparable to
those involving a classical group-by. One can be rea-
sonably optimistic about this issue given the results pre-
sented in [2] about a similarity-based group-by (SGB),
which show that the overhead in this case is no more
than 25%. FGB should be even more efficient than SGB
since i) the clusters are predefined, ii) the use of fuzzy
partitions still makes it possible to employ evaluation
techniques based on sorts and/or indexes (cf. Section
VI).
• an investigation about the way other measures than
support and confidence for assessing fuzzy association
rules, cf. [22], could be taken into account;
• a variant of the approach described here, aimed at expert
users, where fuzzy cardinalities would be computed
instead of scalar ones. In a fuzzy association rule mining
context, this implies computing the validity of the rules
by means of a technique such as that described in [23];
• an extension of the format of the rules to be mined, for
instance through a relaxation of the universal quantifier
based on one of the approaches proposed in [10].
REFERENCES
[1] P. Bosc and O. Pivert, “SQLf : a relational database language for
fuzzy querying,” IEEE Transactions on Fuzzy Systems, vol. 3, no. 1,
pp. 1–17, 1995.
[2] Y. N. Silva, W. G. Aref, and M. H. Ali, “Similarity group-by,” in Proc.
of ICDE’09, 2009, pp. 904–915.
[3] P. Bosc, B. Buckles, F. Petry, and O. Pivert, “Fuzzy databases,” in
Fuzzy Sets in Approximate Reasoning and Information Systems, The
Handbook of Fuzzy Sets Series, J. Bezdek, D. Dubois, and H. Prade,
Eds. Dordrecht, The Netherlands: Kluwer Academic Publishers, 1999,
pp. 403–468.
[4] E. H. Ruspini, “A new approach to clustering,” Information and
Control, vol. 15, no. 1, pp. 22–32, 1969.
[5] R. Saint-Paul, G. Raschia, and N. Mouaddib, “General purpose
database summarization,” in Proc. of VLDB’05, 2005, pp. 733–744.
[6] P. Bosc, O. Pivert, and L. Lie´tard, “On the comparison of aggregates
over fuzzy sets,” in Intelligent Systems for Information Processing:
From Representation to Applications, B. Bouchon-Meunier, L. Foulloy,
and R. Yager, Eds. Amsterdam, The Netherlands: Elsevier, 2003, pp.
141–152.
[7] P. Bosc and L. Lie´tard, “Aggregates computed over fuzzy sets and their
integration into SQLf,” International Journal of Uncertainty, Fuzziness
and Knowledge-Based Systems, vol. 16, no. 6, pp. 761–792, 2008.
[8] P. Bosc and O. Pivert, “On some fuzzy extensions of association rules,”
in Proc. of the Joint 9th IFSA World Congress and 20th NAFIPS
International Conference, Vancouver, Canada, 2001, pp. 1104–1109.
[9] E. Hu¨llermeier, “Implication-based fuzzy association rules,” in Proc.
of PKDD’01, 2001, pp. 241–252.
[10] P. Bosc and O. Pivert, “On two qualitative approaches to tolerant
inclusion operators,” Fuzzy Sets and Systems, vol. 159, no. 21, pp.
2786–2805, 2008.
[11] C. Zhang and Y. Huang, “Cluster by: a new SQL extension for spatial
data aggregation,” in Proc. of ACM GIS, 2007, pp. 53–56.
[12] C. Li, M. Wang, L. Lim, H. Wang, and K. C.-C. Chang, “Supporting
ranking and clustering as generalized order-by and group-by,” in Proc.
of SIGMOD’07, 2007, pp. 127–138.
[13] D. Rasmussen and R. R. Yager, “Summary SQL – a fuzzy tool for
data mining,” Intell. Data Anal., vol. 1, no. 1-4, pp. 49–58, 1997.
[14] R. Meo, G. Psaila, and S. Ceri, “An extension to SQL for mining
association rules,” Data Min. Knowl. Discov., vol. 2, no. 2, pp. 195–
224, 1998.
[15] J. Clear, D. Dunn, B. Harvey, M. L. Heytens, P. Lohman, A. Mehta,
M. Melton, L. Rohrberg, A. Savasere, R. M. Wehrmeister, and M. Xu,
“Nonstop SQL/MX primitives for knowledge discovery,” in Proc. of
KDD’99, 1999, pp. 425–429.
[16] S. Thomas and S. Sarawagi, “Mining generalized association rules and
sequential patterns using SQL queries,” in Proc. of KDD’98, 1998, pp.
344–348.
[17] T. Yoshizawa, I. Pramudiono, and M. Kitsuregawa, “SQL based
association rule mining using commercial RDBMS (IBM DB2 UBD
EEE),” in Proc. of DaWaK’00, 2000, pp. 301–306.
[18] T. Imielinski and A. Virmani, “MSQL: A query language for database
mining,” Data Min. Knowl. Discov., vol. 3, no. 4, pp. 373–408, 1999.
[19] K. Rajamani, A. L. Cox, B. R. Iyer, and A. Chadha, “Efficient mining
for association rules with relational database systems,” in Proc. of
IDEAS’99, 1999, pp. 148–155.
[20] R. Pereira, M. Millan, and F. Machuca, “New algebraic operators and
SQL primitives for mining association rules,” in Neural Networks and
Computational Intelligence, 2003, pp. 227–232.
[21] D. Rasmussen and R. R. Yager, “Finding fuzzy and gradual functional
dependencies with SummarySQL,” Fuzzy Sets and Systems, vol. 106,
no. 2, pp. 131–142, 1999.
[22] D. Dubois, E. Hu¨llermeier, and H. Prade, “A systematic approach to
the assessment of fuzzy association rules,” Data Min. Knowl. Discov.,
vol. 13, no. 2, pp. 167–192, 2006.
[23] P. Bosc, D. Dubois, O. Pivert, and H. Prade, “On fuzzy association
rules based on fuzzy cardinalities,” in Proc. of the 10th IEEE Inter-
national Conference on Fuzzy Systems (FUZZ-IEEE’01), Melbourne,
Australia, 2001.
