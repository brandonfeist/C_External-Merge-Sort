12010 Second International conference on Computing, Communication and Networking Technologies
Using distributed apriori association rule 
and classical apriori mining algorithms 
for grid based knowledge discovery
Mrs. R. Sumithra, MCA, M.Phil., (Ph.D.)
(Ph.D. Scholar,  Karunya University)
Lecturer,Dept of  SS, CA & IT, CMS College
Coimbatore, India
r.sumithrasuresh@gmail.com
Dr (Mrs). Sujni Paul MCA, M.Phil, Ph.D.
Associate Professor                                         
Department of Computer Applications, KU
Coimbatore, India
sujni_paul@karunya.edu
   Abstract - The aim of this paper is to extract knowledge using 
predictive apriori and distributed grid based apriori 
algorithms for association rule mining. The paper presents the 
implementation of an association rules discovery data mining 
task using Grid technologies. A result of implementation with a 
comparison of classic apriori and distributed apriori is also
discussed. Distributed data mining systems provide an efficient 
use of multiple processors and databases to speed up the 
execution of data mining and enable data distribution. To 
evaluate the efficiency of the proposed system, performance 
analysis of apriori and predictive apriori algorithms on a 
centralized database have been given using weka tool. The 
main aim of grid computing is to give organizations and 
application developers the ability to create distributed 
computing environments that can utilize computing resources 
on demand. Therefore, it can help increase efficiencies and 
reduce the cost of computing networks by decreasing data 
processing time and optimizing resources and distributing 
workloads, thereby allowing users to achieve much faster 
results on large operations and at lower costs. In this paper 
distributed apriori association rule on grid based environment 
is mined and the knowledge obtained is interpreted.
  Keywords - Distributed data mining (DDM), Apriori 
algorithm, Grids, Predictive apriori, Association rule, frequent 
item set mining
I. INTRODUCTION
Data mining has attracted a great deal of attention in 
the information industry and in society as a whole in recent 
years, due to wide availability of huge amounts of data and 
the imminent need for turning such data into useful 
information and knowledge. Data mining refers to extracting 
or “mining” knowledge from large amounts of data. 
Distributed data mining (DDM) is data mining where the 
data and computation are spread over many independent 
sites.  Each site has its own data source and data mining 
algorithms producing local models[10]. From them global 
meaningful knowledge has to be derived. The Grid is a 
distributed computing infrastructure that enables 
coordinated resource sharing within dynamic organizations 
978-1-4244-6589-7/10/$26.00 ©2010 IEEE
Association rules are used to show the relationships between 
data items with support and confidence measurements [9].
The Weka Experiment Environment enables the user to 
create, run, modify, and analyse experiments in a more 
convenient manner than is possible when processing the 
schemes individually. For example, the user can create an 
experiment that runs several schemes against a series of 
datasets and then analyse the results to determine if one of 
the schemes is (statistically) better than the other schemes.
Based on these concepts the study is being carried out in the 
subsequent headings.
II. MINING FREQUENT PATTERNS
Frequent patterns are patterns that occur frequently in 
data. There are many kinds of frequent patterns, including 
item sets, subsequences and substructures [6]. Suppose as a 
marketing manager of AllElectronics would like to   
determine which items are frequently purchased together 
with the same transactions. An example of such a rule, 
mined from the AllElectronics transactional database is
Buys(X,”Computer”) => buys(X,”Software”) 
[support=1%,confidence=50%] where X is a variable 
representing a customer. A confidence, or certainty, of 50% 
means that if a customer buys a computer, there is a 50% 
chance that she will buy software as well. A 1% support 
means that 1% of all of the transactions under analysis 
showed that computer and software were purchased 
together. The above rule can be simply written as 
“computer=>software [1%,50%]”
A. Apriori  Algorithm 
Apriori is a seminal algorithm proposed by 
R.Agrawal and R.Srikant in 1994 from mining frequent 
itemsets for Boolean association rules. It is based on the fact 
that the algorithm uses prior knowledge of frequent itemset 
properties [2]. Apriori employs an iterative approach known 
as a level-wise search, where k-itemsets are used to explore 
(k+1) itemsets. First the set of frequent 1 itemsets is found 
by scanning the database to accumulate the count for each 
2item, and collecting those items that satisfy minimum
support. The resulting set is denoted L1.  Next L1, is used to 
find L2, the set of frequent 2- itemsets, which is used to find 
L3, and so on, until no more frequent k-itemsets can be 
found. The finding of each Lk requires one full scan of the 
database. To improve the efficiency of the level-wise 
generation of frequent itemsets, an important property called 
the Apriori property [all nonempty subsets of a frequent 
itemset must also be frequent], is used to reduce the search 
space. The [3] two set process is followed consisting of join 
and prune actions.
The join step: To find Lk, a set of candidate k-
itemsets is generated by joining Lk-1 with itself. This set of 
candidates is denoted Ck.  Let l1 and l2 be itemset in lk-1. 
After a series of process the resulting itemset formed by 
joining l1 and l2 is l1[1], l1[2], …l1[k-2], l1[k-1], l2[k-1].
The prune step: Ck is a superset of Lk, that is, its 
members may or may not be frequent, but all of the frequent 
k-itemsets are included in Ck. A scan of the database to 
determine the count of each candidate in Ck would result in 
the determination of  Lk (i.e. all candidates having a count 
no less than the minimum support count are frequent by 
definition, and therefore belong to Lk). 
To reduce the size of Ck, the Apriori property is
used as follows. Any (k-1) itemset that is not frequent 
cannot be a subset of a frequent k-itemset. Hence, if any (k-
1) subset of a candidate k-itemset is not in Lk-1. then the 
candidate cannot be frequent either and so can be removed 
from Ck.
B. Predictive  Apriori Algorithm
The Predictive Apriori algorithm [7]returns an 
array best [1 . . .n] of association rules [xi => yi] (xi, yi  < 
{a1, . . . , ak}, xi ? yi = ?), says that any rule not included 
in best is either less accurate than the n-th best rule best[n], 
or it is subsumed by an at least equally accurate rule that is 
contained in best.
C. DDM Using Grid Architecture
A possible infrastructure for a virtual organisation,
implemented using Grid technologies, is presented in
Figure. 1.
The company has a central branch and several local 
branches (LB). Each branch is composed of a number of  
Grid nodes (GN) interconnected in a Grid infrastructure.
In the case study [1], the data mining task is the 
discovery of the association rules in the local branch 
databases, and the implementation of the Grid infrastructure 
is based on the Globus toolkit. In the OGSA context, the 
association rules discovery task is exposed in the form of 
Grid services. The mining service has several components 
specific to a Grid service: service data access, service data 
element, and service implementation. The association rules 
discovery service is interacting with the rest of the grid 
services: service registry, service creation, authorisation, 
notification, manageability and concurrency. The Apriori 
Grid Service must comply with OGSA rules, constraints, 
standard interfaces and behaviour.
The service data access contains a standard 
interface and a discovery service, for registering information 
about Grid service instances with registry services. The 
client application calls the standard method 
FindServiceData, which retrieves service information from 
individual Apriori Grid Service instances. The service data 
access defines a standard interface and semantics for 
dynamic service creation of the Apriori Grid Service, 
located at the Service Data Element level.  
Figure 1. Virtual organisation infrastructure using grid technologies.
In the case study, from the central branch the 
association rules discovery task has to be launched, mining 
the data from central and local branches. It is a distributed 
framework for mining associative rules in geographic 
distributed databases. The framework implements VO 
structure and it uses data mining methods and techniques 
and different technologies like Grid [8], Java and relational 
databases. The client module allows the user to send the 
parameters and the commands to the rest of the components. 
Configuration parameters of the framework and of the 
Apriori algorithm, then call the mining methods. The client 
finds and creates the Apriori Grid Service and sends it the
parameters for: locating and connecting to the remote
transaction databases, locating the transaction tables or
calling the pre-processing methods, Apriori algorithm 
minimum support and confidence, locating the knowledge 
base with the partial rules generated.
In the next step, the Apriori Grid Service instances 
perform the association rules discovery task independently 
on the remote databases, located on the Central Branch or 
             
             LB
Gn
             LB       
GN
GN
GN
              LB
GN GN
GN                LB
GN
GN
GN
Central branch
GN GN
GN GN
GN
GN
3on the Local Branches of the VO. The user/client 
application receives notifications when an association 
mining service completes its job and the results can be 
explored from the knowledge base. The user can explore the 
partial association rules generated or can apply incremental 
methods to combine the partial rules into more general rules.
The Apriori Grid Service implements an original Apriori
library for mining the associative rules. The library is
implemented in Java for portability and compatibility with
the implementation [1] of the Globus 3 Toolkit Core 
services and, in this phase, it contains the serial version of 
the algorithm.
The implementation of the algorithm follows the 
next steps:
• finds all 1-itemsets candidates and all frequent 1-
itemsets candidates (a candidate is an item set to be 
counted).
• then finds all frequent 2-itemsets.
• then generates a hash tree structure for storing the 
k-itemsets.
• the algorithm multiple scans the database and does 
not load it in the memory, which is very useful for 
large databases
D. Results Of Apriori And Predictive Apriori Algorithms 
The apriori and its advancement of predictive 
apriori algorithms are run using weka toolkit on a 
centralised database.. The results are given in Figure.2 and 
Figure.3
Comparison of two algorithms is like
• Pred. Apriori mines a higher quality set of rules
• Pred. Apriori needs fewer rules
• But  pred. Apriori is slower than Apriori
For discussion 2 samples have been taken , APriori 
gives confidence level of 1 and predictive apriori gives 
accurate confidence level of  0.9
(Apriori)
1. tear-prod-rate=reduced 12 ==> contact-
lenses=none 12    conf:(1)
2. contact-lenses=soft 5 ==> astigmatism=no 5    
conf:(1)
Figure.2. Association rule finding of Apriori algorithm
4Figure.3. Association rule finding of Predictive Apriori algorithm
(Predictive apriori)
1. tear-prod-rate=reduced 12 ==> contact-
lenses=none 12    acc:(0.99355)
2. contact-lenses=soft 5 ==> astigmatism=no tear-
prod-rate=normal 5    acc:(0.96077)
The best rules generated depend on the number 
of best rules requested; the order of rules will change for 
both.The visualisation for results of both the algorithms has 
also been given in Figure.4. and Figure.5.
Figure. 4. Plot matrix for Apriori algorithm
Figure. 5. Graph representation for Predictive apriori
E. Comparison Of Classical Apriori &  Grid Based 
Apriori  Algorithms
A series of tests were run. First of all, the sequential 
standalone implementation of the Apriori algorithm, called 
by the Apriori Grid Service, and a classical implementation 
(Weka library) were compared. The organisation of the 
datasets was given in the form ‘‘TxxIyyDzzzK’’, where 
5‘‘xx’’ denotes the average number of items present per 
transaction, ‘‘yy’’ denotes the average support of each item 
in the dataset and ‘‘zzzK’’ denotes the total number of 
transactions in ‘‘K’’ (1000 s). The experiments were 
performed for 4 database sizes (3000, 7000, 10,000 and 
50,000 transactions) and the resulting rules resulted had 
30%, 25% and 20% support factors (given in  Figure. 6).
Figure. 6. Comparison of results
The efficiency of the Apriori Grid Service 
algorithm compared with the classical Apriori is presented 
in the figure 6 which shows an improvement in performance 
for the Grid version of the association algorithm compared
to the classical Apriori of 25% for 30% support, and it
increased to about 27% for 25% support and to 31% for
20% support, all for the larger dataset (10 k transactions).
Also, a series of distributed tests using the ‘‘Virtual
Organization’’ implemented on the local intranet were 
performed [1]. The test called the Apriori Grid Service with 
different series of parameters (remote databases, algorithm 
support and confidence factors, rules generated) and 
accurate results in real time have been obtained.
CONCLUSION
This paper presents a study on results of Apriori 
and predictive apriori algorithms on a centralized database 
using weka toolkit. A comparison is also made which shows 
how distributed associative rule mining apriori algorithm 
works better than previous classical models whose results 
have been given. The future scope of this work is that 
parallel distribution of knowledge extraction could be made 
on a distributed grid environment to produce a more 
optimized result.
REFERENCES
1. Cristian Aflori , Mitica Craus,” Grid implementation of the 
Apriori algorithm”,Science direct, Oct 2006
2. Aparna S Varde, Makiko Takakshi, Elke A Rundensteiner, 
Mathew O ward, “Apriori algorithm and game-of-life for 
predictive analysis in materials science”,  International journal 
of  knowledge based and intelligent engineering systems 
8(2004)
3. Jiawei Han and Micheline Kamber, “Data mining, Concepts 
and techniques”, Morgan Kaufmann publishers, 2006
4. Azzedine Boukerche Kaiyuan Lu, “Optimized Dynamic Grid-
based DDM Protocol for Large-scale Distributed simulation 
Systems”, Proceedings of the 19th IEEE International Parallel 
and Distributed Processing Symposium, 2005
5. U. Sakthi, R. Hemalatha, and R. S. Bhuvaneswaran, ”Parallel 
and Distributed Mining of Association Rule on Knowledge 
Grid”, World Academy of Science, Engineering and 
,Technology 42 2008
6. Lamine M. Aouad, Nhien-An Le-Khac and Tahar M. Kechadi, 
“Grid-based Approach for Distributed Frequent Itemsets 
Mining Using Dynamic Workload Management”, School of 
Computer Science and Informatics University College Dublin
7. Albrecht Zimmermann and Luc De Raedt, “CorClass: 
Correlated Association Rule Mining for Classification”, 
Institute of Computer Science, Machine Learning Lab, Albert-
Ludwigs-University, 2004
8. Ian Foster, Carl Kesselman, Jeffreu M Nick and Steven Tneeke, 
“The physiology of the grid”, University of Chicago, IBM 
corporation, NY.
9. Schender, T, “ Finding association rules that trade support 
optimally against confidence”, PKDD 2001
10. Anup kumar, Mehmed Kantardzic and Samuel Madden, 
“Distributed data mining: framework and implementation”, 
University of Louisville, Masachusetts institute of 
technology,Aug 2006
