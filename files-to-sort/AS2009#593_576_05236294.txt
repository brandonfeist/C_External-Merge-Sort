The Design of a Correlation Analysis Engine Model Based on Carma_VE 
Algorithm
Zhaoyang Qu? Lei Wang
School of Information engineering, Northeast Dianli University, Jilin, 132012, China 
qzywww@mail.nedu.edu.cn ; strugglewang@sina.com
Abstract
SOC (Security Operation Center) is the core 
platform of safety management system, and correlation 
analysis engine is the core of SOC. This paper designs 
a correlation analysis engine model. The engine can 
not only effectively eliminate or reduce duplicate and 
redundant alerts, but also quickly discover the hidden 
attack tactics in the huge amount of alerts generated 
by multi-step attacks. Based on the engine, Carma_VE 
algorithm is presented in order to automatically 
generate association rules. Compared with the Carma 
algorithm, Carma_VE algorithm is more efficient 
under the smaller training set. 
1. Introduction 
SOC [1] is a generic term describing part or all of a 
platform whose purpose is to provide detection and 
reaction services to security incidents. According to 
this definition SOC can be distinguished to five 
distinct modules: event generators, event collectors, 
message database, and correlation analysis engine and 
reaction management. In all of these, correlation 
analysis engine is the most important core component. 
At present, with the increasing large scale of 
network security, SOC is facing the following 
questions: First, Massive alert events. Second, it is 
difficult to diagnose problems and loopholes according 
to alert messages. The number of alerts is so huge that 
it’s unimaginable to rely on the artificial analysis to 
discover the correlation relationship hidden in the 
isolated multi-step attack events [2].  
Therefore, in response to these issues, this paper 
does the following key research: First, The design of a 
correlation analysis engine model. Second, Carma_VE 
algorithm was proposed by improving Carma 
algorithm. Carma_VE can dramatically enhance the 
efficiency of association analysis through narrowing 
mining space, at the same time, it can discover the 
hidden attack tactics. 
2. Correlation analysis engine model 
This paper designs a correlation analysis engine 
model, as shown in figure 1, mainly includes the 
following four modules: events standardization module, 
event filtering module, event merging module and 
correlation analysis module. Besides include merging 
rules repository, filtering rules repository, triggering 
conditions repository and association rules repository. 
 Figure 1. The structure of Correlation analysis 
engine model 
Fund Project: Grants of Jilin Provincial Technology Development
project (No.20080322); “The Eleventh Five-Year Plan” Science
and Technology Education research project of  Jilin Provincial 
Department of Education   (2008 (41) ) .               _____________________________ 
978-1-4244-3930-0/09/$25.00 ©2009 IEEE
2.1. Events standardization module 
Main function: different kinds of data gathered from 
various heterogeneous devices have to be formatted 
into a “standard” manner. Through the reference of 
IDMEF standard, formatted structure of original 
message is the following table 1 
Table 1. Formatted message structure 
Field Attributes Description 
evt_id unique Unique message ID 
alert_id Not null Intrusion type ID 
src_add Not null Intrusion source host address 
src_port Intrusion source port number 
des_add Not null Intrusion target host address 
des_port Intrusion target port number 
region_id Not null Unique region id 
timestamp Not null Time of Intrusion happened 
2.2. Events filtering module 
Main function: the removal of the original noise 
data, such as, the alarm information is not complete, 
lack of IP address or port number and other important 
information. In the collection of events, let filter some 
specific alter events according to the filter repository 
rule and the definition of template, thereby reducing 
the number of events that the management server must 
process, as well as, enhancing the effectiveness and 
efficiency of handling events. 
2.3. Events merging module
Main function: to merge alarm events so as to shrink 
the mining space for correlation analysis. As a result of 
a huge number of alarm event logs be included in SOC, 
such as the IDS log (per second can produce hundreds 
or even thousands of incidents), syslog, database log, 
which contains a large number of duplicate and 
redundant information, these information for the 
correlation analysis of events does not have any value 
[3]. 
According to the behavioral character, time 
character and location character of network intrusion 
events, alert events are divided into three types: First, 
Repeat event refers to a number of alarms are triggered 
by only an attack, such as an IP Port scan (scan); 
Second, Redundancy event refers to frequently alarms 
for a certain type of attack in a very short period of 
time, such as SYN flood, many different  forged Ip 
concurrently connect with an attack target; Third, 
Concurrent event refers to many different geographical 
position of IP attack the same target synchronously, 
such as DDOS attack , a serious threat at present.
Figure 2 gives an events sample of meeting the first 
type of merging policy (Repeat event).The alert_id of 
all the events is 14. In accordance with the merging 
rule, six events will be merged to generate a super-alert. 
In this super-alert record, evt_all_id contains all the 
merged evt_id numbers; timestamp_range represents 
the time range of  attack taking place; merge_counts 
describes the total number of merging original alert 
event, the greater the value indicates that the greater 
the possibility of successful invasion. 
Figure 2. Example of merging alert events 
2.4. Correlation analysis module 
Main function: the module was built based on the 
Carma_VE algorithm. It can effectively narrow mining 
space and limit the length of the sequence of frequent, 
besides can support dynamic, real-time mining of 
association rule for alarm events. Thus achieved two 
main function, First, automatic learning and auto-
update of association rules repository. Carma_VE is 
able to accurately mine the frequent sequences hidden 
in a variety of attack. Second, by taking advantage of 
mined frequent sequences, the model can generate 
strong association rules to achieve early warning 
function. 
Here is an example of correlation analysis about 
alert events. Set Min_Support = 50%, Min_Confidence 
= 50%. 
First step, through correlation analysis for the 
former 15 alert events in the Figure4, let’s get a strong 
association rules form. Precede presents the 
precondition of attack sequence, and Consequent 
presents the final result caused by the attack sequence, 
as shown in Figure 3.  
Figure 3. Strong association rule form 

Second step, when collecting the 16th incident, 
according to the existing rule t
the attacker will do the Udp flood attack in the next 
step. This forecast has 100% confidence. As shown in 
Figure 4. 
eardrop Udp flood
Figure 4. Example of attack warning 
3. Carma_VE algorithm description
Carma_VE algorithm is proposed based on the 
Carma algorithm. Carma would be able to dig out all 
the frequent sequence set in compliance with the 
threshold of Min_Support and Min_Confidence 
through scanning twice in the database transaction set. 
It can be divided into two phases: Phase I, to find out 
all the frequent itemsets which enough to content 
Min_Support. Phase II, to generate strong association 
rules from all the frequent itemsets. These rules must 
be able to content   Min_Support and Min_Confidence. 
Carma_VE mainly improve the Phase I of Carma in 
the following two aspects: 
On the one hand, according to the Apriori important 
properties "The all nonempty subsets of a frequent 
itemset must be frequent" [4], when the length of 
frequent sequences is n, the frequent itemset will 
contain 2  frequent items. Therefore in dealing with 
massive data, the frequent sequence length will 
seriously affect the speed of the algorithm. 
1n ?
Based on in-depth study of attacks in the network 
security, a successful invasion usually contains the 
following five steps, Hidden IP address=>Footprinting 
and Scanning=>Access to the system or administrator 
privileges => Cultivation of back door=> Stealth in the 
network. According to this characteristic, to limit the 
length of itemset v which will be inserted into a 
frequent itemset collection V in Phase I. Set the 
longest frequent attack sequence's length is 5, that is 
.| | 5v ?
On the other hand, as is well known, the important 
conclusion of Association Rule, "Support of a itemset 
is always less than or equal to support of its subset" [5]. 
However, Carma did not take full advantage of the 
conclusion in Phase I. Observed the execution, we can 
find that if a itemset v contained k elements is inserted 
into frequent itemset collection V, it would at least 
going through k times transactions,. The condition of 
inserting is following [6]: 
:   ( )   ( ) iw v w V and firstTrans w i and maxSupport w ?? ? ? < ?
   According to the above analysis, the condition that v 
is inserted into V can be weakened by preferable using 
the important conclusion. Just to check all the proper 
subset w in v at first, the number of elements in w only 
smaller one than the number in v. The inserting 
condition can be changed, 
:| | | | 1    ( )
 ( ) i
w v w v and w V and firstTrans w i
and maxSupport w ?
? ? = ? ? <
?
  The Pseudocode of Phase I in the Carma_VE 
algorithm is following, 
Input   :  —attack sequence in database
1 2( , ...., )nT t t t=
—support sequence
1 2
( , , ...., )n? ? ? ?=
Output:V—the frequent itemsets collection
i
i
Begin
   V:={ };
   maxMissed(v):=0;firstTrans(v):=0;count(v):=0;
   for i from 1 to n {
      //1)Increment
        for all v V with v t {count(v) ;}
      //2)Insert
        for all v t  and |v| 5 with 
?
? ? ++
? ?
i
v V {
                       if  w v: |w|=|v|-1 and w V and firstTrans(w)<i 
                                       and maxSupport(w)  then
                      {   V:=V {v};
                         
?
?
? ? ?
?
?
i-1 1
  firstTrans(v):=i;
                           count(v):=1;
                           maxMissed(v):=min{ (i-1)avg ( ) +|v|-1,
                                                       maxMissed(
i
?
?
 
 
 
 
i
w)+count(w)-1 |w v};
                       } 
                       if |v|= =1 and maxSupport(w) then 
                            {V:=V {v};firstTrans(v) : i;maxMissed(v):=0;}
         }
          //3
?
?
?
? =
i
i
)Prune
         if(i % max{[1/ ],500}==0) then
         {V:={v V|maxSupport(v)  or |v|= =1}        
    }
     return V;
End
?
?? ?

4. Experiment and Analysis 
Taking these two Experimental results we can see: 
Carma_VE algorithm enhance the overall efficiency of  
association rule mining, as a result of it limit to the 
subset length of current transaction and optimize the 
condition that itemset v is inserted to frequent itemset 
collection V. 
Carma and Carma_VE algorithms were achieved by 
using Java Data Mining API. And then the 
performance was compared through experiments. The 
experimental data was collected in a week's invasion 
alarm events of the campus network. A total of data is 
5000 (TD=5000). 
5. Conclusion Experiment 1: In the condition of the same number 
of transaction events (TD = 5000) and the different 
support, to compare the execution time of two 
algorithms. As shown in figure 5, the result 
demonstrate that the smaller with the support, the 
longer consumed Carma algorithm for the 
implementation, but the time growth rate of Carma_VE 
algorithm for the implementation required much lower 
than the Carma. 
According to the features of SOC, designed and 
implemented a correlation analysis engine model based 
on Carma_VE algorithm. The engine model has 
filtering, merging, correlation analysis and early 
warning functions, so as to significantly improve the 
efficiency of mining time, achieve real-time analysis 
for the massive alarm events and forecast the next step 
of attacker. The engine has already been used in the 
practical project and has a good effect in application.  
 Figure 5. Experimental result 1 
6. References 
[1] R. Bidou, “Security Operation Center Concepts & 
Implementation”, http://www.iv2-technologies.com, 2008. 
[2] Y.A. Nygate, “Event correlation using rule and object 
based techniques”. Proceedings of the fourth international 
symposium on Integrated network management IV, Chapman 
& Hall, 1995, pp. 278-289. 
[3] S. Cheung, U. Lindqvist, and M. Fong, “Modeling 
Multistep Cyber Attacks for Scenario Recognition”, Proc.
DARPA Information Survivability Conf. and Exposition 
(DISCEX III), Apr.2003, pp.284-292. 
Experiment 2: In the condition of the same Support 
(Support=0.5%) and different numbers of transaction 
event, to compare the execution time of two algorithms. 
As shown in figure 6,  the result demonstrate that with 
a growing number of event, the execution time would 
constantly increasing, but the growth rate of 
Carma_VE  algorithm was more slower. 
[4] P. Ning, Y. Cui, and D. Reeves, “Constructing attack 
scenarios through correlation of intrusion alerts”, The 9th 
ACM Conf on Computer and Communications Security,
ACM, 2002, pp.245-254. 
[5] Jiawei Han, M. Kamber,Data Mining Concepts and 
Techniques Second Edition, Mechanical industry press, 2007. 
[6] C. Hidber, “Online Association Rule Mining”, 
Proceedings of the 1999 ACM SIGMOD international 
conference on Management of data, ACM, June 1999, 
pp.145-156.
Figure 6. Experimental result 2 

