Top-down Mining Frequent Closed Patterns in Microarray Data 
 
SHI JianJun, MIAO YuQing, ZHANG WanZhen  
School of computer and control  
Guilin University of Electronic Technology 
Guilin, China 
e-mail: tj_shi@mails.guet.edu.cn, miaoyuqing@guet.edu.cn , zwan_zer@l63.com 
 
 
Abstract—Mining frequent closed patterns play an important 
role in mining association rules in microarray data. The bottom-
up search strategy for mining frequent closed patterns cannot 
make full use of minimum support threshold to prune search 
space and results in long runtime and much memory overhead. 
TP+close algorithm based on top-down search strategy 
addressed the problem. However, it determined a frequent 
pattern was closed by scanning the set of frequent closed 
patterns that have been found.  For dense datasets, the algorithm 
performance will be seriously affected by the scan time. In this 
paper, we proposed an improved tree structure, TTP+tree. Based 
on the tree, a top-down algorithm, TTP+close, was developed for 
mining frequent closed patterns in microarray data. TTP+close 
checked the closeness property of itemset by the trace-based 
method and thus avoided scanning the set of frequent closed 
patterns. The experiments show that TTP+close outperforms 
TP+close when dealing with dense data. 
Keywords-data mining; frequent closed patterns; microarray 
data  
I. INTRODUCTION  
With the development of bioinformatics, microarray 
technology produced lots of microarray data.  Making use of 
data mining techniques could discover interesting 
knowledge from these data. However, different from 
transactional datasets, microarray data usually contain a 
huge number of columns (genes) and few rows (samples). 
Therefore, most of the existing algorithms based on column 
enumeration for mining frequent closed pattern were not 
suitable for microarray data.  
Pan et al. proposed the CARPENTER [1] based on row 
enumeration strategy. The algorithm  proposed to search the 
rowset space rather than the columnset space. It cannot make 
full use of the minimum support threshold to prune the 
rowset search space. 
Liu et al. [2] proposed an approach which adopted top-
down rowsets search strategy. The algorithm used trace-
based closeness-checking method and other strategies to 
decide whether an itemset is closed. But it built many 
conditional tables or IP_Lists without any frequent closed 
patterns were output. 
Miao et al. [3, 4] also introduced top-down method and 
applied the suffix-based, divide-and-conquer method for 
mining frequent closed patterns. TP+close [3] used the row 
enumeration strategy to prune the search space and 
employed TP+-tree structure to achieve compression 
storage. When the algorithm outputs one frequent closed 
pattern, it must scan the set of frequent closed patterns that 
have be obtained to check whether the frequent closed 
pattern exists. This affects the performance of TP+close as 
processing the dense datasets. 
Inspired by the TP+close, in this paper, we proposed an 
improved structure TTP+tree. Based on the structure, an 
algorithm TTP+close was presented. TTP+close checked the 
closeness property of itemset by the trace-based method, 
avoided scanning the set of frequent closed patterns that 
have been found, and therefore accelerated the search speed. 
The rest of the paper is organized as follows. Section 2 
states the problem definition and related terms. Section 3 
introduces the TP+-tree and suffix class. In Section 4 we 
describe the improved structure TTP+tree and algorithm 
TTP+close. In Section 5 we present our experimental result. 
In Section 6 we summarize our study.  
II. PROBLEM DEFINITION 
Let 1 2 3 mI {i , i , i ,..., i }=  be a set of items, and 
1 2 nD {t , t ,..., t }=  a dataset of transactions, where each 
transaction has a unique identifier tid  and contains a set of 
items. The set of all tids is denoted as T . A set X I?  is also 
called an itemset , and a set Y T?  is called a tidset . An 
itemset with K  items is called a k itemset? . An itemsets I  
is contained in a transaction t D?  if I t? . For convenience 
we write an itemset {a, b,c}  as abc and a tidset {2,3,5} as 
235. 
Let X and Y , X T?  and Y I? .The concept of closed 
item is based on the two following functions, f and g : 
f (X) {i I | t X,i t}= ? ? ? ?  
g(Y) {t T | i Y,i t}= ? ? ? ?  
Definition 1 An itemset Y  is said to be closed if and 
only if c(Y) f (g(Y)) f g(Y) Y= = =D , where the composite 
function c is called the closure operator. 
Definition 2 sup(Y) | g(Y) |= is called the absolute 
support threshold of Y , Y I?  and | g(Y) | divided by | T | is 
called relative support threshold. 
The number of transactions which contain Y is called 
absolute support threshold of pattern Y. The percentage of 
2009 Third International Conference on Genetic and Evolutionary Computing
978-0-7695-3899-0/09 $29.00 © 2009 IEEE
DOI 10.1109/WGEC.2009.201
851
transactions which contain Y is called relative support 
threshold. 
Definition 3 If itemset Y is closed and | g(Y) |=  
sup(Y) min_ sup?  is held, the itemset is called frequent 
closed pattern. 
The problem of mining frequent closed pattern in 
microarray data can be described as following: given a 
microarray dataset D and a user-specified minimum support 
threshold minsup, all frequent closed patterns which 
satisfied the minsup are discovered. 
III. TP+-TREE STRUCTURE AND SUFFIX CLASS 
A. TP+-tree Structure 
TP+-tree is a prefix tree. For traversing conveniently, all 
nodes which have the same tide in TP+-tree are linked to 
linked list, and all nodes with the same tide in TP+-tree  are 
linked to the tid  header table. It can traverse all nodes by 
header table pointer. 
TP+-tree  mainly consists of  root node marked with 
“null” , tid prefix subtree as the children of  root node, 
itemset structure pointing to corresponding nodes in tree and 
tid header table. Every node includes four fields (tid, level, 
sid_link, item_ link). The tid stores transaction identifier of 
the node. The item_link links the relative itemsets structure 
or it is null. The field of level denotes the level of node in 
the tree, and the level of root node is 0.  The sid _ link links 
the node which has the same tid as itself. It will be null if 
there is no same tid node. The tid header table consists of 
two parts (tid, head). The last field head links the first node 
of tid list. 
TABLE I.  THE EXAMPLE DATASET 
Tid Items 
1 adfghln 
2 acdehm 
3 bdfj 
4 cegikmn 
5 bdefjkl 
For example, the dataset as table 1, suppose the 
minimum support threshold, minsup is 2. Figure 1 shows the 
TP+-tree structure corresponding to dataset in table 1 .The 
number in the bracket of node is the level of the node. The 
number out of the bracket denotes the transaction identifier 
tid. The itemset beside the node denotes that the itemset is 
included in every transaction from the node to root node. For 
example, g (d) =1523 indicates that the four transactions 
contain itemset d respectively. With the condition 
that c(d) f (g(d)) f (1523) d= = = , itemset d is frequent 
closed pattern. 
B.  Suffix Class 
Given tid set T in certain order, T is a sequence. Let  
U T? ? s(U,k) is defined to obtain suffix with k  
identifiers, 0 ? k  ?|U |.A tid sequence can be obtained on 
the path in TP+-tree from root node to every node. In fact, 
the sequence is a subsequence of T.  As is shown in figure 
1, an ordered transaction set 524 can be obtained from root 
node to leaf node 4(3). Supposing R is sequence 
transaction sets from TP+-tree root node to all other nodes. 
An equivalent relation ?  based on suffix class in 
transaction sets R is that U? , V R? , U V s(U,1)? ? =  
s(V,1) . It means that last tid of two tidsets are equal and 
two sets are equivalence class. Equivalent class R which 
relating to ?  can ascertain the divisions of R uniquely. The 
equivalent class which takes transaction identifier r for 
suffix is called suffix class r? [r] as the abbreviated form. 
To the members of suffix class, we use signal Y g(Y)× ?
where Y  is itemset, and g(Y) represents transaction set. In 
figure 1, suffix class [3]={d 1523, f 153× × , bj 53}× . 
 
Figure 1.  TP+-tree 
IV. TTP+TREE STRUCTURE AND TTP+CLOSE ALGORITHM 
A.  Trace-based Closeness-checking Method 
TTD-close [2] uses a new closeness-checking technique 
which is trace-based closeness-checking method. This 
strategy judges that whether the intersection sets of all the 
tids traversed by the itemsets is null, then determines if 
itemset is closed. 
By analyzing this strategy, it can be applied to TP+close 
to avoid scanning FCP outputted. Take the suffix class [2] 
as an example when the elements contained in suffix class 
[3] is outputted, itemset d points to the parent node 2(3) of 
node 3(4). The d has pointed to 3(4) ? therefore, 3 is 
reserved as trace traversed by d. The traversed collection of 
d is 3.It is not null. That indicates d in suffix class [2] is not 
closed pattern. When the frequent closed patterns included 
in [2] are exported, the element  d 152×  doesn’t scan FCP 
outputted.  Because 3 is the trace traversed by d, frequent 
closed pattern d must have been outputted.  We can also 
conclude that the element in [2] is not frequent closed 
pattern. In like manner the element e 52×  in [2] is not 
frequent closed pattern, because the trace of e is 4. The tidset 
intersection for d 152× and e 52 ×  is 52. The new 
intermediate results de 52×  can be obtained. The tidset 
traversed by the intermediate results can be obtained by the 
intersection of elements d 152× and e 52×  traversed 
852
tidsets. Because A is null, the new element de 52×  is a 
frequent closed pattern. 
In order to implement the closeness-checking, a field 
track_link is added to the itemset structure. This field stores 
intersection of certain itemset contained in the same suffix. 
It is found that the level number in tree node can be 
transferred from tree node to itemset structure to save space, 
since the level numbers are only used on traversing the 
structure. 
The improved TP+-tree node contains three 
fields (tid,sid _ link,item _ link) . The field item _ link  
points to itemset structure that includes three fields such 
as (itemset, level, trace _ link) . The field itemset  stores 
itemset contained by tid of all tree nodes in the path from 
root node to this tree node. The field level  indicates the 
level number of tree node pointed by itemset structure. The 
number subtract one only when the item structure is passed 
to parent node. The meaning of the field trace _ link   is 
intersection of tidset in field itemset . We name the 
improved TP+-tree as TTP+tree. In figure 2? the TTP+tree 
is shown.  
 
Figure 2.  TTP+tree 
B. TTP+close Algorithm 
With the analysis, it can be included that applying 
bitmap technique can implement the function of transpose 
table in [3], and reduce the memory space. Therefore, the 
bitmap is introduced to optimize algorithm. 
Building TTP+tree at first, the algorithm is as follows? 
Procedure Const_TTP+tree (D, minsup) 
Input: Dataset D and minimum support threshold 
minsup; 
Output? TTP+tree corresponding Datasets D? 
Method? 
1. Scan datasets D and build bitmap BT which 
contains only frequent 1-itemset. Build sequence 
tid ordered in descending order, and save it to 
head table. 
2. Build TTP+tree. Create root node T, and execute 
the following procedure to every column of 
bitmap? according to tid sequence built by step 
1, read the tid in column of bitmap that value is 1 
and write the tid sequence to array P. Call 
insert_tree (P, T). 
Procedure insert_tree (P, T) 
1) To ip in P, if tid in node of T and tid of ip  are the 
same and ip  is the last element of P, item_link of 
tree node points to this itemset  of ip  and 
itemset. level  is recorded as the level of tree node, 
also itemset. trace _ link is null and return. If ip  is 
not the last element of P , check whether jp exists 
in T ? j ip p? . 
2) If there is no node with the same tid  as that of jp , 
create a new node. Initialize the new node and 
insert it to the corresponding linked list of 
header table . Return step1. 
Algorithm   TTP+close (D, minsup) 
Input: Dataset D , minimum support threshold minsup  
Output: Frequent closed patterns FCP and support  
Method: 
1. Call Const_TTP+tree (D, minsup) 
2. Search the header table by bottom-up strategy and if 
the number rest tids in header table  less than 
minsup, return. 
3. Create array N that consist of elements of suffix 
class [n] by traversing field sid _ link . 
4. Insert the itemset structure which corresponding 
every element in array N to the item _ link  field of 
its parent’s node, then level level 1= ? . 
Simultaneously, updating the field tranc _ link . 
5. Call SubTTP+close(N)?and executing step 2. 
Procedure SubTTP+close (N) 
Begin 
1) for each element i in g(n )×  in N 
2)   for each element j jn g(n )×  in N? jn < in  
3) i j i jn ' n n ,g(n ') g(n ) g(n )= ? = ? , i jt ' t t= ?  ?   
4)     If | g(n ') | min_ sup?  then 
5)     If i jg(n ) g(n )=  then 
6) Delete j jn g(n )× and jt from  N ?  and 
substitute n ' for  in ? t ' for it ? including 
sub-nodes? 
7)      If i jg(n ) g(n )?  then 
8) Substitute n ' for in ? t ' for it ? including  
sub-nodes? 
9) If i jg(n ) g(n )? and g(n ') is not discovered  then 
10)         add n ' g(n ')× and t ' to N '  
11)     End if 
12) End for 
13) If N ' ? ?  then SubTTP+close(N’) 
14) If it is null then store i in g(n )× to FCP 
15) End for 
Because in procedure Const_ttp+tree, the sid_ink sorted 
in ascending order according to level number of tree node, 
the state i jg(n ) g(n )? will never happen. Accordingly, the 
state is deleted. In the algorithm TTP close+ , not only does 
N contain element in suffix class, but also it contains the 
853
intersection of tidsets which each element traversed. In steps 
9, the program only needs scanning the FCP outputted by 
this suffix. In step 14, i in g(n )×   is a frequent closed pattern 
depending on whether it  is null or not. The strategy will 
avoid scanning FCP or whole. As a result, the algorithm 
performance is upgraded. 
V.   PERFORMANCE STUDIES 
In this section, we will evaluate TTP+close in terms of 
the efficiency. All experiments were performed on a PC 
with a Pentium D 3.0Ghz CPU, 1GB RAM and an 80GB 
hard disk running Windows XP. The algorithm was coded 
in standard C++. We introduced two real-life microarray 
gene expression datasets denoted by AML1_ETO [8] and 
BCR_ABL [9] which we use to measure the execution time 
of our proposed algorithm.  
We compared TTP+close with the algorithm TP+close. 
Figure 3 shows the experimental result on dataset AML1-
ETO. When minsup is 2, TTP+close performance has been 
improved more than one time over TP+close. With the 
increase of minsup TTP+close performance has improved 
much lower. If the minsup is more than 8, the two 
algorithms perform with almost the same time. It is because 
that with the increasing of support threshold, the number of  
frequent closed pattern gets much less and what has to be 
closeness checked get much less too. 
 
Figure 3.  Running for AML1_ETO 
Figure 4 shows the comparison results with TP+close 
on dataset BCR_ABL. If minsup is 2, BCR_ABL contains 
more than thirty thousand frequent closed patterns. The 
algorithm performance has been improved nearly five times  
 
Figure 4.  Running for BCR_ABL 
over TP+close. If minsup is 8, the frequent closed patterns 
outputted are less than twenty thousand, and the 
performance falls sharply. TTP+close also uses binary 
bitmap to save space, which speed up the tree structure 
establishing. In conclusion, TTP+close outperform 
TP+close processing very high dimension dense datasets. 
Especially with the low support threshold, the algorithm 
performance has been improved prominently.  
VI. CONCLUSIONS 
 In this paper, we have investigated the problem of 
efficiency in algorithm TP+close from microarray datasets, 
and proposed an improved algorithm TTP+close based on 
TTP+tree. The algorithm checked the closeness property of 
itemset by the trace-based method and thus avoided 
scanning the set of frequent closed patterns. The experiment 
shows that TTP+close outperforms TP+close algorithm. 
 
REFERENCES 
 
[1] F. Pan, G. Cong, A. Tung, J. Yang, and M.J. Zaki, 
“CARPENTER:Finding Closed Patterns in Long Biological 
Datasets”, Proc, 9th ACM SIGKDD International Conference on 
Knowledge Discovery and Data Mining (KDD) 2003  ,2003, pp. 637-
642. 
[2] H. Liu, X. Wang, J. He, J. Han, D. Xin, and Z. Shao, "Top-down 
Mining of Frequent Closed Patterns from Very High Dimensional 
Data”, IEEE Computer Society, vol 179, no. 7, 2009 ,pp. 899-924. 
[3] Y. Miao, G. Chen, B. Song, and Z. Wang, “TP+Close: Mining 
Frequent Closed Patterns in Gene Expression Datasets” ,Proc.the 
workshop on Data Mining and Bioinformatics at the 32th 
International Conference on Very Large Data Bases (VDMB 2006), 
Sep. 2006, pp. 120-130. 
[4] Y. Miao, G. Chen, and Y. Xu, “A New Algorithm for Mining 
Frequent Closed Patterns in Gene Expression Datasets”, Journal of 
University of Science and Technology of China, vol. 37, no. 9, Sep. 
2007, pp. 1080-1087. 
[5] M. J. Zaki and C. Hsiao. “CHARM: an Efficient Algorithm for 
Closed Itemset Mining”, Proc . 2002 SIAM Int’l Conf. on Data 
Mining , Apr. 2002   , pp. 457-473. 
[6] J. Wang, J. Han, and J. Pei. “CLOSET+: Searching for The Best 
Strategies for Mining Frequent Closed Itemsets”, In Proc. ACM 
SIGKDD Int’l Conf. on Knowledge Discovery and Data Mining 
(KDD), 2003, pp. 236-245. 
[7] G. Cong, K.-L. Tan, A. K. Tung, and F. Pan,”Mining Frequent 
Closed Patterns in Microarray Data”, Proc the 4th IEEE International 
Conference on Data Mining(ICDM'4), 2004, pp. 363-366. 
[8] http://www.broadinstitute.org/cgi-bin/cancer/datasets.cgi 
[9] http://www.stjuderesearch.org/data/ALL1/all_datafiles.html 
854
